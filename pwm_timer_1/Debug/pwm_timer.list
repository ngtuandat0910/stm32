
pwm_timer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003838  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080039cc  080039cc  000139cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080039fc  080039fc  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080039fc  080039fc  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080039fc  080039fc  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039fc  080039fc  000139fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003a00  08003a00  00013a00  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003a04  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000006c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000078  20000078  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a37a  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000178f  00000000  00000000  0002a3b6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002bb48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e0  00000000  00000000  0002c4e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f386  00000000  00000000  0002cdc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8ff  00000000  00000000  0004c146  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c12ba  00000000  00000000  00057a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118cff  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002798  00000000  00000000  00118d50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080039b4 	.word	0x080039b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	080039b4 	.word	0x080039b4

080001d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80001d4:	b580      	push	{r7, lr}
 80001d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80001d8:	f000 fa4c 	bl	8000674 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80001dc:	f000 f80c 	bl	80001f8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80001e0:	f000 f8de 	bl	80003a0 <MX_GPIO_Init>
  MX_TIM2_Init();
 80001e4:	f000 f866 	bl	80002b4 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 80001e8:	2100      	movs	r1, #0
 80001ea:	4802      	ldr	r0, [pc, #8]	; (80001f4 <main+0x20>)
 80001ec:	f002 fa6c 	bl	80026c8 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80001f0:	e7fe      	b.n	80001f0 <main+0x1c>
 80001f2:	bf00      	nop
 80001f4:	20000028 	.word	0x20000028

080001f8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80001f8:	b580      	push	{r7, lr}
 80001fa:	b0a6      	sub	sp, #152	; 0x98
 80001fc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80001fe:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000202:	2228      	movs	r2, #40	; 0x28
 8000204:	2100      	movs	r1, #0
 8000206:	4618      	mov	r0, r3
 8000208:	f003 fbcc 	bl	80039a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800020c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000210:	2200      	movs	r2, #0
 8000212:	601a      	str	r2, [r3, #0]
 8000214:	605a      	str	r2, [r3, #4]
 8000216:	609a      	str	r2, [r3, #8]
 8000218:	60da      	str	r2, [r3, #12]
 800021a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800021c:	1d3b      	adds	r3, r7, #4
 800021e:	2258      	movs	r2, #88	; 0x58
 8000220:	2100      	movs	r1, #0
 8000222:	4618      	mov	r0, r3
 8000224:	f003 fbbe 	bl	80039a4 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000228:	2302      	movs	r3, #2
 800022a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800022c:	2301      	movs	r3, #1
 800022e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000230:	2310      	movs	r3, #16
 8000232:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000236:	2302      	movs	r3, #2
 8000238:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800023c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000240:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 8000244:	2300      	movs	r3, #0
 8000246:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 800024a:	2300      	movs	r3, #0
 800024c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000250:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000254:	4618      	mov	r0, r3
 8000256:	f000 fd27 	bl	8000ca8 <HAL_RCC_OscConfig>
 800025a:	4603      	mov	r3, r0
 800025c:	2b00      	cmp	r3, #0
 800025e:	d001      	beq.n	8000264 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 8000260:	f000 f916 	bl	8000490 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000264:	230f      	movs	r3, #15
 8000266:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000268:	2302      	movs	r3, #2
 800026a:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800026c:	2380      	movs	r3, #128	; 0x80
 800026e:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000270:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000274:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000276:	2300      	movs	r3, #0
 8000278:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800027a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800027e:	2100      	movs	r1, #0
 8000280:	4618      	mov	r0, r3
 8000282:	f001 fd65 	bl	8001d50 <HAL_RCC_ClockConfig>
 8000286:	4603      	mov	r3, r0
 8000288:	2b00      	cmp	r3, #0
 800028a:	d001      	beq.n	8000290 <SystemClock_Config+0x98>
  {
    Error_Handler();
 800028c:	f000 f900 	bl	8000490 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 8000290:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8000294:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000296:	2300      	movs	r3, #0
 8000298:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800029a:	1d3b      	adds	r3, r7, #4
 800029c:	4618      	mov	r0, r3
 800029e:	f001 ff3d 	bl	800211c <HAL_RCCEx_PeriphCLKConfig>
 80002a2:	4603      	mov	r3, r0
 80002a4:	2b00      	cmp	r3, #0
 80002a6:	d001      	beq.n	80002ac <SystemClock_Config+0xb4>
  {
    Error_Handler();
 80002a8:	f000 f8f2 	bl	8000490 <Error_Handler>
  }
}
 80002ac:	bf00      	nop
 80002ae:	3798      	adds	r7, #152	; 0x98
 80002b0:	46bd      	mov	sp, r7
 80002b2:	bd80      	pop	{r7, pc}

080002b4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80002b4:	b580      	push	{r7, lr}
 80002b6:	b08e      	sub	sp, #56	; 0x38
 80002b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80002ba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80002be:	2200      	movs	r2, #0
 80002c0:	601a      	str	r2, [r3, #0]
 80002c2:	605a      	str	r2, [r3, #4]
 80002c4:	609a      	str	r2, [r3, #8]
 80002c6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80002c8:	f107 031c 	add.w	r3, r7, #28
 80002cc:	2200      	movs	r2, #0
 80002ce:	601a      	str	r2, [r3, #0]
 80002d0:	605a      	str	r2, [r3, #4]
 80002d2:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80002d4:	463b      	mov	r3, r7
 80002d6:	2200      	movs	r2, #0
 80002d8:	601a      	str	r2, [r3, #0]
 80002da:	605a      	str	r2, [r3, #4]
 80002dc:	609a      	str	r2, [r3, #8]
 80002de:	60da      	str	r2, [r3, #12]
 80002e0:	611a      	str	r2, [r3, #16]
 80002e2:	615a      	str	r2, [r3, #20]
 80002e4:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80002e6:	4b2d      	ldr	r3, [pc, #180]	; (800039c <MX_TIM2_Init+0xe8>)
 80002e8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80002ec:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 80002ee:	4b2b      	ldr	r3, [pc, #172]	; (800039c <MX_TIM2_Init+0xe8>)
 80002f0:	f641 723f 	movw	r2, #7999	; 0x1f3f
 80002f4:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80002f6:	4b29      	ldr	r3, [pc, #164]	; (800039c <MX_TIM2_Init+0xe8>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 80002fc:	4b27      	ldr	r3, [pc, #156]	; (800039c <MX_TIM2_Init+0xe8>)
 80002fe:	2263      	movs	r2, #99	; 0x63
 8000300:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000302:	4b26      	ldr	r3, [pc, #152]	; (800039c <MX_TIM2_Init+0xe8>)
 8000304:	2200      	movs	r2, #0
 8000306:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000308:	4b24      	ldr	r3, [pc, #144]	; (800039c <MX_TIM2_Init+0xe8>)
 800030a:	2280      	movs	r2, #128	; 0x80
 800030c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800030e:	4823      	ldr	r0, [pc, #140]	; (800039c <MX_TIM2_Init+0xe8>)
 8000310:	f002 f922 	bl	8002558 <HAL_TIM_Base_Init>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800031a:	f000 f8b9 	bl	8000490 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800031e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000322:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000324:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000328:	4619      	mov	r1, r3
 800032a:	481c      	ldr	r0, [pc, #112]	; (800039c <MX_TIM2_Init+0xe8>)
 800032c:	f002 fd0c 	bl	8002d48 <HAL_TIM_ConfigClockSource>
 8000330:	4603      	mov	r3, r0
 8000332:	2b00      	cmp	r3, #0
 8000334:	d001      	beq.n	800033a <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000336:	f000 f8ab 	bl	8000490 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800033a:	4818      	ldr	r0, [pc, #96]	; (800039c <MX_TIM2_Init+0xe8>)
 800033c:	f002 f963 	bl	8002606 <HAL_TIM_PWM_Init>
 8000340:	4603      	mov	r3, r0
 8000342:	2b00      	cmp	r3, #0
 8000344:	d001      	beq.n	800034a <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000346:	f000 f8a3 	bl	8000490 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800034a:	2300      	movs	r3, #0
 800034c:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800034e:	2300      	movs	r3, #0
 8000350:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000352:	f107 031c 	add.w	r3, r7, #28
 8000356:	4619      	mov	r1, r3
 8000358:	4810      	ldr	r0, [pc, #64]	; (800039c <MX_TIM2_Init+0xe8>)
 800035a:	f003 fa55 	bl	8003808 <HAL_TIMEx_MasterConfigSynchronization>
 800035e:	4603      	mov	r3, r0
 8000360:	2b00      	cmp	r3, #0
 8000362:	d001      	beq.n	8000368 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000364:	f000 f894 	bl	8000490 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000368:	2360      	movs	r3, #96	; 0x60
 800036a:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 50-1;
 800036c:	2331      	movs	r3, #49	; 0x31
 800036e:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000370:	2300      	movs	r3, #0
 8000372:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000374:	2300      	movs	r3, #0
 8000376:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000378:	463b      	mov	r3, r7
 800037a:	2200      	movs	r2, #0
 800037c:	4619      	mov	r1, r3
 800037e:	4807      	ldr	r0, [pc, #28]	; (800039c <MX_TIM2_Init+0xe8>)
 8000380:	f002 fbce 	bl	8002b20 <HAL_TIM_PWM_ConfigChannel>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 800038a:	f000 f881 	bl	8000490 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800038e:	4803      	ldr	r0, [pc, #12]	; (800039c <MX_TIM2_Init+0xe8>)
 8000390:	f000 f8cc 	bl	800052c <HAL_TIM_MspPostInit>

}
 8000394:	bf00      	nop
 8000396:	3738      	adds	r7, #56	; 0x38
 8000398:	46bd      	mov	sp, r7
 800039a:	bd80      	pop	{r7, pc}
 800039c:	20000028 	.word	0x20000028

080003a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	b08a      	sub	sp, #40	; 0x28
 80003a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003a6:	f107 0314 	add.w	r3, r7, #20
 80003aa:	2200      	movs	r2, #0
 80003ac:	601a      	str	r2, [r3, #0]
 80003ae:	605a      	str	r2, [r3, #4]
 80003b0:	609a      	str	r2, [r3, #8]
 80003b2:	60da      	str	r2, [r3, #12]
 80003b4:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003b6:	4b34      	ldr	r3, [pc, #208]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003b8:	695b      	ldr	r3, [r3, #20]
 80003ba:	4a33      	ldr	r2, [pc, #204]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003c0:	6153      	str	r3, [r2, #20]
 80003c2:	4b31      	ldr	r3, [pc, #196]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003c4:	695b      	ldr	r3, [r3, #20]
 80003c6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003ca:	613b      	str	r3, [r7, #16]
 80003cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003ce:	4b2e      	ldr	r3, [pc, #184]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a2d      	ldr	r2, [pc, #180]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003d4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b2b      	ldr	r3, [pc, #172]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003e2:	60fb      	str	r3, [r7, #12]
 80003e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e6:	4b28      	ldr	r3, [pc, #160]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a27      	ldr	r2, [pc, #156]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b25      	ldr	r3, [pc, #148]	; (8000488 <MX_GPIO_Init+0xe8>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80003fa:	60bb      	str	r3, [r7, #8]
 80003fc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80003fe:	4b22      	ldr	r3, [pc, #136]	; (8000488 <MX_GPIO_Init+0xe8>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a21      	ldr	r2, [pc, #132]	; (8000488 <MX_GPIO_Init+0xe8>)
 8000404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b1f      	ldr	r3, [pc, #124]	; (8000488 <MX_GPIO_Init+0xe8>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000412:	607b      	str	r3, [r7, #4]
 8000414:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000416:	2200      	movs	r2, #0
 8000418:	2120      	movs	r1, #32
 800041a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800041e:	f000 fc2b 	bl	8000c78 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000426:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000428:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800042c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800042e:	2300      	movs	r3, #0
 8000430:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000432:	f107 0314 	add.w	r3, r7, #20
 8000436:	4619      	mov	r1, r3
 8000438:	4814      	ldr	r0, [pc, #80]	; (800048c <MX_GPIO_Init+0xec>)
 800043a:	f000 fa93 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800043e:	230c      	movs	r3, #12
 8000440:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000442:	2302      	movs	r3, #2
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800044a:	2300      	movs	r3, #0
 800044c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800044e:	2307      	movs	r3, #7
 8000450:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000452:	f107 0314 	add.w	r3, r7, #20
 8000456:	4619      	mov	r1, r3
 8000458:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800045c:	f000 fa82 	bl	8000964 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000460:	2320      	movs	r3, #32
 8000462:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000464:	2301      	movs	r3, #1
 8000466:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000468:	2300      	movs	r3, #0
 800046a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800046c:	2300      	movs	r3, #0
 800046e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000470:	f107 0314 	add.w	r3, r7, #20
 8000474:	4619      	mov	r1, r3
 8000476:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800047a:	f000 fa73 	bl	8000964 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800047e:	bf00      	nop
 8000480:	3728      	adds	r7, #40	; 0x28
 8000482:	46bd      	mov	sp, r7
 8000484:	bd80      	pop	{r7, pc}
 8000486:	bf00      	nop
 8000488:	40021000 	.word	0x40021000
 800048c:	48000800 	.word	0x48000800

08000490 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000490:	b480      	push	{r7}
 8000492:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000494:	b672      	cpsid	i
}
 8000496:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000498:	e7fe      	b.n	8000498 <Error_Handler+0x8>
	...

0800049c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800049c:	b580      	push	{r7, lr}
 800049e:	b082      	sub	sp, #8
 80004a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004a2:	4b0f      	ldr	r3, [pc, #60]	; (80004e0 <HAL_MspInit+0x44>)
 80004a4:	699b      	ldr	r3, [r3, #24]
 80004a6:	4a0e      	ldr	r2, [pc, #56]	; (80004e0 <HAL_MspInit+0x44>)
 80004a8:	f043 0301 	orr.w	r3, r3, #1
 80004ac:	6193      	str	r3, [r2, #24]
 80004ae:	4b0c      	ldr	r3, [pc, #48]	; (80004e0 <HAL_MspInit+0x44>)
 80004b0:	699b      	ldr	r3, [r3, #24]
 80004b2:	f003 0301 	and.w	r3, r3, #1
 80004b6:	607b      	str	r3, [r7, #4]
 80004b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004ba:	4b09      	ldr	r3, [pc, #36]	; (80004e0 <HAL_MspInit+0x44>)
 80004bc:	69db      	ldr	r3, [r3, #28]
 80004be:	4a08      	ldr	r2, [pc, #32]	; (80004e0 <HAL_MspInit+0x44>)
 80004c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004c4:	61d3      	str	r3, [r2, #28]
 80004c6:	4b06      	ldr	r3, [pc, #24]	; (80004e0 <HAL_MspInit+0x44>)
 80004c8:	69db      	ldr	r3, [r3, #28]
 80004ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004ce:	603b      	str	r3, [r7, #0]
 80004d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004d2:	2007      	movs	r0, #7
 80004d4:	f000 fa04 	bl	80008e0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004d8:	bf00      	nop
 80004da:	3708      	adds	r7, #8
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40021000 	.word	0x40021000

080004e4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b084      	sub	sp, #16
 80004e8:	af00      	add	r7, sp, #0
 80004ea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	681b      	ldr	r3, [r3, #0]
 80004f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80004f4:	d113      	bne.n	800051e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80004f6:	4b0c      	ldr	r3, [pc, #48]	; (8000528 <HAL_TIM_Base_MspInit+0x44>)
 80004f8:	69db      	ldr	r3, [r3, #28]
 80004fa:	4a0b      	ldr	r2, [pc, #44]	; (8000528 <HAL_TIM_Base_MspInit+0x44>)
 80004fc:	f043 0301 	orr.w	r3, r3, #1
 8000500:	61d3      	str	r3, [r2, #28]
 8000502:	4b09      	ldr	r3, [pc, #36]	; (8000528 <HAL_TIM_Base_MspInit+0x44>)
 8000504:	69db      	ldr	r3, [r3, #28]
 8000506:	f003 0301 	and.w	r3, r3, #1
 800050a:	60fb      	str	r3, [r7, #12]
 800050c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800050e:	2200      	movs	r2, #0
 8000510:	2100      	movs	r1, #0
 8000512:	201c      	movs	r0, #28
 8000514:	f000 f9ef 	bl	80008f6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000518:	201c      	movs	r0, #28
 800051a:	f000 fa08 	bl	800092e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800051e:	bf00      	nop
 8000520:	3710      	adds	r7, #16
 8000522:	46bd      	mov	sp, r7
 8000524:	bd80      	pop	{r7, pc}
 8000526:	bf00      	nop
 8000528:	40021000 	.word	0x40021000

0800052c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800052c:	b580      	push	{r7, lr}
 800052e:	b088      	sub	sp, #32
 8000530:	af00      	add	r7, sp, #0
 8000532:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2200      	movs	r2, #0
 800053a:	601a      	str	r2, [r3, #0]
 800053c:	605a      	str	r2, [r3, #4]
 800053e:	609a      	str	r2, [r3, #8]
 8000540:	60da      	str	r2, [r3, #12]
 8000542:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	681b      	ldr	r3, [r3, #0]
 8000548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800054c:	d11c      	bne.n	8000588 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800054e:	4b10      	ldr	r3, [pc, #64]	; (8000590 <HAL_TIM_MspPostInit+0x64>)
 8000550:	695b      	ldr	r3, [r3, #20]
 8000552:	4a0f      	ldr	r2, [pc, #60]	; (8000590 <HAL_TIM_MspPostInit+0x64>)
 8000554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000558:	6153      	str	r3, [r2, #20]
 800055a:	4b0d      	ldr	r3, [pc, #52]	; (8000590 <HAL_TIM_MspPostInit+0x64>)
 800055c:	695b      	ldr	r3, [r3, #20]
 800055e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000562:	60bb      	str	r3, [r7, #8]
 8000564:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000566:	2301      	movs	r3, #1
 8000568:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800056a:	2302      	movs	r3, #2
 800056c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800056e:	2300      	movs	r3, #0
 8000570:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000572:	2300      	movs	r3, #0
 8000574:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000576:	2301      	movs	r3, #1
 8000578:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800057a:	f107 030c 	add.w	r3, r7, #12
 800057e:	4619      	mov	r1, r3
 8000580:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000584:	f000 f9ee 	bl	8000964 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000588:	bf00      	nop
 800058a:	3720      	adds	r7, #32
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	40021000 	.word	0x40021000

08000594 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000594:	b480      	push	{r7}
 8000596:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000598:	e7fe      	b.n	8000598 <NMI_Handler+0x4>

0800059a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800059a:	b480      	push	{r7}
 800059c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800059e:	e7fe      	b.n	800059e <HardFault_Handler+0x4>

080005a0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80005a0:	b480      	push	{r7}
 80005a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80005a4:	e7fe      	b.n	80005a4 <MemManage_Handler+0x4>

080005a6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80005a6:	b480      	push	{r7}
 80005a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80005aa:	e7fe      	b.n	80005aa <BusFault_Handler+0x4>

080005ac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80005b0:	e7fe      	b.n	80005b0 <UsageFault_Handler+0x4>

080005b2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80005b2:	b480      	push	{r7}
 80005b4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80005b6:	bf00      	nop
 80005b8:	46bd      	mov	sp, r7
 80005ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005be:	4770      	bx	lr

080005c0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80005c0:	b480      	push	{r7}
 80005c2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80005c4:	bf00      	nop
 80005c6:	46bd      	mov	sp, r7
 80005c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005cc:	4770      	bx	lr

080005ce <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80005ce:	b480      	push	{r7}
 80005d0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80005d2:	bf00      	nop
 80005d4:	46bd      	mov	sp, r7
 80005d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005da:	4770      	bx	lr

080005dc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80005e0:	f000 f88e 	bl	8000700 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80005e4:	bf00      	nop
 80005e6:	bd80      	pop	{r7, pc}

080005e8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80005e8:	b580      	push	{r7, lr}
 80005ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80005ec:	4802      	ldr	r0, [pc, #8]	; (80005f8 <TIM2_IRQHandler+0x10>)
 80005ee:	f002 f977 	bl	80028e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005f2:	bf00      	nop
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	20000028 	.word	0x20000028

080005fc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005fc:	b480      	push	{r7}
 80005fe:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000600:	4b06      	ldr	r3, [pc, #24]	; (800061c <SystemInit+0x20>)
 8000602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000606:	4a05      	ldr	r2, [pc, #20]	; (800061c <SystemInit+0x20>)
 8000608:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800060c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000610:	bf00      	nop
 8000612:	46bd      	mov	sp, r7
 8000614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000618:	4770      	bx	lr
 800061a:	bf00      	nop
 800061c:	e000ed00 	.word	0xe000ed00

08000620 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000620:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000658 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000624:	f7ff ffea 	bl	80005fc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000628:	480c      	ldr	r0, [pc, #48]	; (800065c <LoopForever+0x6>)
  ldr r1, =_edata
 800062a:	490d      	ldr	r1, [pc, #52]	; (8000660 <LoopForever+0xa>)
  ldr r2, =_sidata
 800062c:	4a0d      	ldr	r2, [pc, #52]	; (8000664 <LoopForever+0xe>)
  movs r3, #0
 800062e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000630:	e002      	b.n	8000638 <LoopCopyDataInit>

08000632 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000632:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000634:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000636:	3304      	adds	r3, #4

08000638 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000638:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800063a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800063c:	d3f9      	bcc.n	8000632 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800063e:	4a0a      	ldr	r2, [pc, #40]	; (8000668 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000640:	4c0a      	ldr	r4, [pc, #40]	; (800066c <LoopForever+0x16>)
  movs r3, #0
 8000642:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000644:	e001      	b.n	800064a <LoopFillZerobss>

08000646 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000646:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000648:	3204      	adds	r2, #4

0800064a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800064a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800064c:	d3fb      	bcc.n	8000646 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800064e:	f003 f985 	bl	800395c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000652:	f7ff fdbf 	bl	80001d4 <main>

08000656 <LoopForever>:

LoopForever:
    b LoopForever
 8000656:	e7fe      	b.n	8000656 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000658:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800065c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000660:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000664:	08003a04 	.word	0x08003a04
  ldr r2, =_sbss
 8000668:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800066c:	20000078 	.word	0x20000078

08000670 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000670:	e7fe      	b.n	8000670 <ADC1_2_IRQHandler>
	...

08000674 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000674:	b580      	push	{r7, lr}
 8000676:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000678:	4b08      	ldr	r3, [pc, #32]	; (800069c <HAL_Init+0x28>)
 800067a:	681b      	ldr	r3, [r3, #0]
 800067c:	4a07      	ldr	r2, [pc, #28]	; (800069c <HAL_Init+0x28>)
 800067e:	f043 0310 	orr.w	r3, r3, #16
 8000682:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000684:	2003      	movs	r0, #3
 8000686:	f000 f92b 	bl	80008e0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800068a:	2000      	movs	r0, #0
 800068c:	f000 f808 	bl	80006a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000690:	f7ff ff04 	bl	800049c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000694:	2300      	movs	r3, #0
}
 8000696:	4618      	mov	r0, r3
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40022000 	.word	0x40022000

080006a0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	b082      	sub	sp, #8
 80006a4:	af00      	add	r7, sp, #0
 80006a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80006a8:	4b12      	ldr	r3, [pc, #72]	; (80006f4 <HAL_InitTick+0x54>)
 80006aa:	681a      	ldr	r2, [r3, #0]
 80006ac:	4b12      	ldr	r3, [pc, #72]	; (80006f8 <HAL_InitTick+0x58>)
 80006ae:	781b      	ldrb	r3, [r3, #0]
 80006b0:	4619      	mov	r1, r3
 80006b2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80006b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80006ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80006be:	4618      	mov	r0, r3
 80006c0:	f000 f943 	bl	800094a <HAL_SYSTICK_Config>
 80006c4:	4603      	mov	r3, r0
 80006c6:	2b00      	cmp	r3, #0
 80006c8:	d001      	beq.n	80006ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80006ca:	2301      	movs	r3, #1
 80006cc:	e00e      	b.n	80006ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80006ce:	687b      	ldr	r3, [r7, #4]
 80006d0:	2b0f      	cmp	r3, #15
 80006d2:	d80a      	bhi.n	80006ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006d4:	2200      	movs	r2, #0
 80006d6:	6879      	ldr	r1, [r7, #4]
 80006d8:	f04f 30ff 	mov.w	r0, #4294967295
 80006dc:	f000 f90b 	bl	80008f6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80006e0:	4a06      	ldr	r2, [pc, #24]	; (80006fc <HAL_InitTick+0x5c>)
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80006e6:	2300      	movs	r3, #0
 80006e8:	e000      	b.n	80006ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80006ea:	2301      	movs	r3, #1
}
 80006ec:	4618      	mov	r0, r3
 80006ee:	3708      	adds	r7, #8
 80006f0:	46bd      	mov	sp, r7
 80006f2:	bd80      	pop	{r7, pc}
 80006f4:	20000000 	.word	0x20000000
 80006f8:	20000008 	.word	0x20000008
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <HAL_IncTick+0x20>)
 8000706:	781b      	ldrb	r3, [r3, #0]
 8000708:	461a      	mov	r2, r3
 800070a:	4b06      	ldr	r3, [pc, #24]	; (8000724 <HAL_IncTick+0x24>)
 800070c:	681b      	ldr	r3, [r3, #0]
 800070e:	4413      	add	r3, r2
 8000710:	4a04      	ldr	r2, [pc, #16]	; (8000724 <HAL_IncTick+0x24>)
 8000712:	6013      	str	r3, [r2, #0]
}
 8000714:	bf00      	nop
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000008 	.word	0x20000008
 8000724:	20000074 	.word	0x20000074

08000728 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000728:	b480      	push	{r7}
 800072a:	af00      	add	r7, sp, #0
  return uwTick;  
 800072c:	4b03      	ldr	r3, [pc, #12]	; (800073c <HAL_GetTick+0x14>)
 800072e:	681b      	ldr	r3, [r3, #0]
}
 8000730:	4618      	mov	r0, r3
 8000732:	46bd      	mov	sp, r7
 8000734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000738:	4770      	bx	lr
 800073a:	bf00      	nop
 800073c:	20000074 	.word	0x20000074

08000740 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000740:	b480      	push	{r7}
 8000742:	b085      	sub	sp, #20
 8000744:	af00      	add	r7, sp, #0
 8000746:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f003 0307 	and.w	r3, r3, #7
 800074e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000750:	4b0c      	ldr	r3, [pc, #48]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000752:	68db      	ldr	r3, [r3, #12]
 8000754:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000756:	68ba      	ldr	r2, [r7, #8]
 8000758:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800075c:	4013      	ands	r3, r2
 800075e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000760:	68fb      	ldr	r3, [r7, #12]
 8000762:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000764:	68bb      	ldr	r3, [r7, #8]
 8000766:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000768:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800076c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000770:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000772:	4a04      	ldr	r2, [pc, #16]	; (8000784 <__NVIC_SetPriorityGrouping+0x44>)
 8000774:	68bb      	ldr	r3, [r7, #8]
 8000776:	60d3      	str	r3, [r2, #12]
}
 8000778:	bf00      	nop
 800077a:	3714      	adds	r7, #20
 800077c:	46bd      	mov	sp, r7
 800077e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000782:	4770      	bx	lr
 8000784:	e000ed00 	.word	0xe000ed00

08000788 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800078c:	4b04      	ldr	r3, [pc, #16]	; (80007a0 <__NVIC_GetPriorityGrouping+0x18>)
 800078e:	68db      	ldr	r3, [r3, #12]
 8000790:	0a1b      	lsrs	r3, r3, #8
 8000792:	f003 0307 	and.w	r3, r3, #7
}
 8000796:	4618      	mov	r0, r3
 8000798:	46bd      	mov	sp, r7
 800079a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800079e:	4770      	bx	lr
 80007a0:	e000ed00 	.word	0xe000ed00

080007a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80007a4:	b480      	push	{r7}
 80007a6:	b083      	sub	sp, #12
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	4603      	mov	r3, r0
 80007ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007b2:	2b00      	cmp	r3, #0
 80007b4:	db0b      	blt.n	80007ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007b6:	79fb      	ldrb	r3, [r7, #7]
 80007b8:	f003 021f 	and.w	r2, r3, #31
 80007bc:	4907      	ldr	r1, [pc, #28]	; (80007dc <__NVIC_EnableIRQ+0x38>)
 80007be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c2:	095b      	lsrs	r3, r3, #5
 80007c4:	2001      	movs	r0, #1
 80007c6:	fa00 f202 	lsl.w	r2, r0, r2
 80007ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007ce:	bf00      	nop
 80007d0:	370c      	adds	r7, #12
 80007d2:	46bd      	mov	sp, r7
 80007d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d8:	4770      	bx	lr
 80007da:	bf00      	nop
 80007dc:	e000e100 	.word	0xe000e100

080007e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007e0:	b480      	push	{r7}
 80007e2:	b083      	sub	sp, #12
 80007e4:	af00      	add	r7, sp, #0
 80007e6:	4603      	mov	r3, r0
 80007e8:	6039      	str	r1, [r7, #0]
 80007ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	db0a      	blt.n	800080a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	b2da      	uxtb	r2, r3
 80007f8:	490c      	ldr	r1, [pc, #48]	; (800082c <__NVIC_SetPriority+0x4c>)
 80007fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007fe:	0112      	lsls	r2, r2, #4
 8000800:	b2d2      	uxtb	r2, r2
 8000802:	440b      	add	r3, r1
 8000804:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000808:	e00a      	b.n	8000820 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800080a:	683b      	ldr	r3, [r7, #0]
 800080c:	b2da      	uxtb	r2, r3
 800080e:	4908      	ldr	r1, [pc, #32]	; (8000830 <__NVIC_SetPriority+0x50>)
 8000810:	79fb      	ldrb	r3, [r7, #7]
 8000812:	f003 030f 	and.w	r3, r3, #15
 8000816:	3b04      	subs	r3, #4
 8000818:	0112      	lsls	r2, r2, #4
 800081a:	b2d2      	uxtb	r2, r2
 800081c:	440b      	add	r3, r1
 800081e:	761a      	strb	r2, [r3, #24]
}
 8000820:	bf00      	nop
 8000822:	370c      	adds	r7, #12
 8000824:	46bd      	mov	sp, r7
 8000826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082a:	4770      	bx	lr
 800082c:	e000e100 	.word	0xe000e100
 8000830:	e000ed00 	.word	0xe000ed00

08000834 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000834:	b480      	push	{r7}
 8000836:	b089      	sub	sp, #36	; 0x24
 8000838:	af00      	add	r7, sp, #0
 800083a:	60f8      	str	r0, [r7, #12]
 800083c:	60b9      	str	r1, [r7, #8]
 800083e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	f003 0307 	and.w	r3, r3, #7
 8000846:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000848:	69fb      	ldr	r3, [r7, #28]
 800084a:	f1c3 0307 	rsb	r3, r3, #7
 800084e:	2b04      	cmp	r3, #4
 8000850:	bf28      	it	cs
 8000852:	2304      	movcs	r3, #4
 8000854:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3304      	adds	r3, #4
 800085a:	2b06      	cmp	r3, #6
 800085c:	d902      	bls.n	8000864 <NVIC_EncodePriority+0x30>
 800085e:	69fb      	ldr	r3, [r7, #28]
 8000860:	3b03      	subs	r3, #3
 8000862:	e000      	b.n	8000866 <NVIC_EncodePriority+0x32>
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000868:	f04f 32ff 	mov.w	r2, #4294967295
 800086c:	69bb      	ldr	r3, [r7, #24]
 800086e:	fa02 f303 	lsl.w	r3, r2, r3
 8000872:	43da      	mvns	r2, r3
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	401a      	ands	r2, r3
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800087c:	f04f 31ff 	mov.w	r1, #4294967295
 8000880:	697b      	ldr	r3, [r7, #20]
 8000882:	fa01 f303 	lsl.w	r3, r1, r3
 8000886:	43d9      	mvns	r1, r3
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800088c:	4313      	orrs	r3, r2
         );
}
 800088e:	4618      	mov	r0, r3
 8000890:	3724      	adds	r7, #36	; 0x24
 8000892:	46bd      	mov	sp, r7
 8000894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000898:	4770      	bx	lr
	...

0800089c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800089c:	b580      	push	{r7, lr}
 800089e:	b082      	sub	sp, #8
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80008a4:	687b      	ldr	r3, [r7, #4]
 80008a6:	3b01      	subs	r3, #1
 80008a8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008ac:	d301      	bcc.n	80008b2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008ae:	2301      	movs	r3, #1
 80008b0:	e00f      	b.n	80008d2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008b2:	4a0a      	ldr	r2, [pc, #40]	; (80008dc <SysTick_Config+0x40>)
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	3b01      	subs	r3, #1
 80008b8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008ba:	210f      	movs	r1, #15
 80008bc:	f04f 30ff 	mov.w	r0, #4294967295
 80008c0:	f7ff ff8e 	bl	80007e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008c4:	4b05      	ldr	r3, [pc, #20]	; (80008dc <SysTick_Config+0x40>)
 80008c6:	2200      	movs	r2, #0
 80008c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008ca:	4b04      	ldr	r3, [pc, #16]	; (80008dc <SysTick_Config+0x40>)
 80008cc:	2207      	movs	r2, #7
 80008ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008d0:	2300      	movs	r3, #0
}
 80008d2:	4618      	mov	r0, r3
 80008d4:	3708      	adds	r7, #8
 80008d6:	46bd      	mov	sp, r7
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	e000e010 	.word	0xe000e010

080008e0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e8:	6878      	ldr	r0, [r7, #4]
 80008ea:	f7ff ff29 	bl	8000740 <__NVIC_SetPriorityGrouping>
}
 80008ee:	bf00      	nop
 80008f0:	3708      	adds	r7, #8
 80008f2:	46bd      	mov	sp, r7
 80008f4:	bd80      	pop	{r7, pc}

080008f6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008f6:	b580      	push	{r7, lr}
 80008f8:	b086      	sub	sp, #24
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	4603      	mov	r3, r0
 80008fe:	60b9      	str	r1, [r7, #8]
 8000900:	607a      	str	r2, [r7, #4]
 8000902:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000904:	2300      	movs	r3, #0
 8000906:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000908:	f7ff ff3e 	bl	8000788 <__NVIC_GetPriorityGrouping>
 800090c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800090e:	687a      	ldr	r2, [r7, #4]
 8000910:	68b9      	ldr	r1, [r7, #8]
 8000912:	6978      	ldr	r0, [r7, #20]
 8000914:	f7ff ff8e 	bl	8000834 <NVIC_EncodePriority>
 8000918:	4602      	mov	r2, r0
 800091a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800091e:	4611      	mov	r1, r2
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff ff5d 	bl	80007e0 <__NVIC_SetPriority>
}
 8000926:	bf00      	nop
 8000928:	3718      	adds	r7, #24
 800092a:	46bd      	mov	sp, r7
 800092c:	bd80      	pop	{r7, pc}

0800092e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800092e:	b580      	push	{r7, lr}
 8000930:	b082      	sub	sp, #8
 8000932:	af00      	add	r7, sp, #0
 8000934:	4603      	mov	r3, r0
 8000936:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000938:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800093c:	4618      	mov	r0, r3
 800093e:	f7ff ff31 	bl	80007a4 <__NVIC_EnableIRQ>
}
 8000942:	bf00      	nop
 8000944:	3708      	adds	r7, #8
 8000946:	46bd      	mov	sp, r7
 8000948:	bd80      	pop	{r7, pc}

0800094a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800094a:	b580      	push	{r7, lr}
 800094c:	b082      	sub	sp, #8
 800094e:	af00      	add	r7, sp, #0
 8000950:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffa2 	bl	800089c <SysTick_Config>
 8000958:	4603      	mov	r3, r0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}
	...

08000964 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000964:	b480      	push	{r7}
 8000966:	b087      	sub	sp, #28
 8000968:	af00      	add	r7, sp, #0
 800096a:	6078      	str	r0, [r7, #4]
 800096c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800096e:	2300      	movs	r3, #0
 8000970:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000972:	e160      	b.n	8000c36 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000974:	683b      	ldr	r3, [r7, #0]
 8000976:	681a      	ldr	r2, [r3, #0]
 8000978:	2101      	movs	r1, #1
 800097a:	697b      	ldr	r3, [r7, #20]
 800097c:	fa01 f303 	lsl.w	r3, r1, r3
 8000980:	4013      	ands	r3, r2
 8000982:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000984:	68fb      	ldr	r3, [r7, #12]
 8000986:	2b00      	cmp	r3, #0
 8000988:	f000 8152 	beq.w	8000c30 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800098c:	683b      	ldr	r3, [r7, #0]
 800098e:	685b      	ldr	r3, [r3, #4]
 8000990:	f003 0303 	and.w	r3, r3, #3
 8000994:	2b01      	cmp	r3, #1
 8000996:	d005      	beq.n	80009a4 <HAL_GPIO_Init+0x40>
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	685b      	ldr	r3, [r3, #4]
 800099c:	f003 0303 	and.w	r3, r3, #3
 80009a0:	2b02      	cmp	r3, #2
 80009a2:	d130      	bne.n	8000a06 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	689b      	ldr	r3, [r3, #8]
 80009a8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009aa:	697b      	ldr	r3, [r7, #20]
 80009ac:	005b      	lsls	r3, r3, #1
 80009ae:	2203      	movs	r2, #3
 80009b0:	fa02 f303 	lsl.w	r3, r2, r3
 80009b4:	43db      	mvns	r3, r3
 80009b6:	693a      	ldr	r2, [r7, #16]
 80009b8:	4013      	ands	r3, r2
 80009ba:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009bc:	683b      	ldr	r3, [r7, #0]
 80009be:	68da      	ldr	r2, [r3, #12]
 80009c0:	697b      	ldr	r3, [r7, #20]
 80009c2:	005b      	lsls	r3, r3, #1
 80009c4:	fa02 f303 	lsl.w	r3, r2, r3
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	4313      	orrs	r3, r2
 80009cc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009ce:	687b      	ldr	r3, [r7, #4]
 80009d0:	693a      	ldr	r2, [r7, #16]
 80009d2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009d4:	687b      	ldr	r3, [r7, #4]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009da:	2201      	movs	r2, #1
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	fa02 f303 	lsl.w	r3, r2, r3
 80009e2:	43db      	mvns	r3, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4013      	ands	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009ea:	683b      	ldr	r3, [r7, #0]
 80009ec:	685b      	ldr	r3, [r3, #4]
 80009ee:	091b      	lsrs	r3, r3, #4
 80009f0:	f003 0201 	and.w	r2, r3, #1
 80009f4:	697b      	ldr	r3, [r7, #20]
 80009f6:	fa02 f303 	lsl.w	r3, r2, r3
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	4313      	orrs	r3, r2
 80009fe:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	693a      	ldr	r2, [r7, #16]
 8000a04:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000a06:	683b      	ldr	r3, [r7, #0]
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	f003 0303 	and.w	r3, r3, #3
 8000a0e:	2b03      	cmp	r3, #3
 8000a10:	d017      	beq.n	8000a42 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	68db      	ldr	r3, [r3, #12]
 8000a16:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a18:	697b      	ldr	r3, [r7, #20]
 8000a1a:	005b      	lsls	r3, r3, #1
 8000a1c:	2203      	movs	r2, #3
 8000a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a22:	43db      	mvns	r3, r3
 8000a24:	693a      	ldr	r2, [r7, #16]
 8000a26:	4013      	ands	r3, r2
 8000a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a2a:	683b      	ldr	r3, [r7, #0]
 8000a2c:	689a      	ldr	r2, [r3, #8]
 8000a2e:	697b      	ldr	r3, [r7, #20]
 8000a30:	005b      	lsls	r3, r3, #1
 8000a32:	fa02 f303 	lsl.w	r3, r2, r3
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	4313      	orrs	r3, r2
 8000a3a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a3c:	687b      	ldr	r3, [r7, #4]
 8000a3e:	693a      	ldr	r2, [r7, #16]
 8000a40:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a42:	683b      	ldr	r3, [r7, #0]
 8000a44:	685b      	ldr	r3, [r3, #4]
 8000a46:	f003 0303 	and.w	r3, r3, #3
 8000a4a:	2b02      	cmp	r3, #2
 8000a4c:	d123      	bne.n	8000a96 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a4e:	697b      	ldr	r3, [r7, #20]
 8000a50:	08da      	lsrs	r2, r3, #3
 8000a52:	687b      	ldr	r3, [r7, #4]
 8000a54:	3208      	adds	r2, #8
 8000a56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a5a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a5c:	697b      	ldr	r3, [r7, #20]
 8000a5e:	f003 0307 	and.w	r3, r3, #7
 8000a62:	009b      	lsls	r3, r3, #2
 8000a64:	220f      	movs	r2, #15
 8000a66:	fa02 f303 	lsl.w	r3, r2, r3
 8000a6a:	43db      	mvns	r3, r3
 8000a6c:	693a      	ldr	r2, [r7, #16]
 8000a6e:	4013      	ands	r3, r2
 8000a70:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	691a      	ldr	r2, [r3, #16]
 8000a76:	697b      	ldr	r3, [r7, #20]
 8000a78:	f003 0307 	and.w	r3, r3, #7
 8000a7c:	009b      	lsls	r3, r3, #2
 8000a7e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a82:	693a      	ldr	r2, [r7, #16]
 8000a84:	4313      	orrs	r3, r2
 8000a86:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a88:	697b      	ldr	r3, [r7, #20]
 8000a8a:	08da      	lsrs	r2, r3, #3
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	3208      	adds	r2, #8
 8000a90:	6939      	ldr	r1, [r7, #16]
 8000a92:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a9c:	697b      	ldr	r3, [r7, #20]
 8000a9e:	005b      	lsls	r3, r3, #1
 8000aa0:	2203      	movs	r2, #3
 8000aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa6:	43db      	mvns	r3, r3
 8000aa8:	693a      	ldr	r2, [r7, #16]
 8000aaa:	4013      	ands	r3, r2
 8000aac:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aae:	683b      	ldr	r3, [r7, #0]
 8000ab0:	685b      	ldr	r3, [r3, #4]
 8000ab2:	f003 0203 	and.w	r2, r3, #3
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	fa02 f303 	lsl.w	r3, r2, r3
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	4313      	orrs	r3, r2
 8000ac2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000aca:	683b      	ldr	r3, [r7, #0]
 8000acc:	685b      	ldr	r3, [r3, #4]
 8000ace:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000ad2:	2b00      	cmp	r3, #0
 8000ad4:	f000 80ac 	beq.w	8000c30 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad8:	4b5e      	ldr	r3, [pc, #376]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000ada:	699b      	ldr	r3, [r3, #24]
 8000adc:	4a5d      	ldr	r2, [pc, #372]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000ade:	f043 0301 	orr.w	r3, r3, #1
 8000ae2:	6193      	str	r3, [r2, #24]
 8000ae4:	4b5b      	ldr	r3, [pc, #364]	; (8000c54 <HAL_GPIO_Init+0x2f0>)
 8000ae6:	699b      	ldr	r3, [r3, #24]
 8000ae8:	f003 0301 	and.w	r3, r3, #1
 8000aec:	60bb      	str	r3, [r7, #8]
 8000aee:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000af0:	4a59      	ldr	r2, [pc, #356]	; (8000c58 <HAL_GPIO_Init+0x2f4>)
 8000af2:	697b      	ldr	r3, [r7, #20]
 8000af4:	089b      	lsrs	r3, r3, #2
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000afc:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	220f      	movs	r2, #15
 8000b08:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0c:	43db      	mvns	r3, r3
 8000b0e:	693a      	ldr	r2, [r7, #16]
 8000b10:	4013      	ands	r3, r2
 8000b12:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b1a:	d025      	beq.n	8000b68 <HAL_GPIO_Init+0x204>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a4f      	ldr	r2, [pc, #316]	; (8000c5c <HAL_GPIO_Init+0x2f8>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d01f      	beq.n	8000b64 <HAL_GPIO_Init+0x200>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a4e      	ldr	r2, [pc, #312]	; (8000c60 <HAL_GPIO_Init+0x2fc>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d019      	beq.n	8000b60 <HAL_GPIO_Init+0x1fc>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a4d      	ldr	r2, [pc, #308]	; (8000c64 <HAL_GPIO_Init+0x300>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d013      	beq.n	8000b5c <HAL_GPIO_Init+0x1f8>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a4c      	ldr	r2, [pc, #304]	; (8000c68 <HAL_GPIO_Init+0x304>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d00d      	beq.n	8000b58 <HAL_GPIO_Init+0x1f4>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a4b      	ldr	r2, [pc, #300]	; (8000c6c <HAL_GPIO_Init+0x308>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d007      	beq.n	8000b54 <HAL_GPIO_Init+0x1f0>
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	4a4a      	ldr	r2, [pc, #296]	; (8000c70 <HAL_GPIO_Init+0x30c>)
 8000b48:	4293      	cmp	r3, r2
 8000b4a:	d101      	bne.n	8000b50 <HAL_GPIO_Init+0x1ec>
 8000b4c:	2306      	movs	r3, #6
 8000b4e:	e00c      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b50:	2307      	movs	r3, #7
 8000b52:	e00a      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b54:	2305      	movs	r3, #5
 8000b56:	e008      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b58:	2304      	movs	r3, #4
 8000b5a:	e006      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b5c:	2303      	movs	r3, #3
 8000b5e:	e004      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b60:	2302      	movs	r3, #2
 8000b62:	e002      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b64:	2301      	movs	r3, #1
 8000b66:	e000      	b.n	8000b6a <HAL_GPIO_Init+0x206>
 8000b68:	2300      	movs	r3, #0
 8000b6a:	697a      	ldr	r2, [r7, #20]
 8000b6c:	f002 0203 	and.w	r2, r2, #3
 8000b70:	0092      	lsls	r2, r2, #2
 8000b72:	4093      	lsls	r3, r2
 8000b74:	693a      	ldr	r2, [r7, #16]
 8000b76:	4313      	orrs	r3, r2
 8000b78:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b7a:	4937      	ldr	r1, [pc, #220]	; (8000c58 <HAL_GPIO_Init+0x2f4>)
 8000b7c:	697b      	ldr	r3, [r7, #20]
 8000b7e:	089b      	lsrs	r3, r3, #2
 8000b80:	3302      	adds	r3, #2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b88:	4b3a      	ldr	r3, [pc, #232]	; (8000c74 <HAL_GPIO_Init+0x310>)
 8000b8a:	689b      	ldr	r3, [r3, #8]
 8000b8c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b8e:	68fb      	ldr	r3, [r7, #12]
 8000b90:	43db      	mvns	r3, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4013      	ands	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b98:	683b      	ldr	r3, [r7, #0]
 8000b9a:	685b      	ldr	r3, [r3, #4]
 8000b9c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d003      	beq.n	8000bac <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000ba4:	693a      	ldr	r2, [r7, #16]
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	4313      	orrs	r3, r2
 8000baa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000bac:	4a31      	ldr	r2, [pc, #196]	; (8000c74 <HAL_GPIO_Init+0x310>)
 8000bae:	693b      	ldr	r3, [r7, #16]
 8000bb0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000bb2:	4b30      	ldr	r3, [pc, #192]	; (8000c74 <HAL_GPIO_Init+0x310>)
 8000bb4:	68db      	ldr	r3, [r3, #12]
 8000bb6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	43db      	mvns	r3, r3
 8000bbc:	693a      	ldr	r2, [r7, #16]
 8000bbe:	4013      	ands	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bc2:	683b      	ldr	r3, [r7, #0]
 8000bc4:	685b      	ldr	r3, [r3, #4]
 8000bc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bca:	2b00      	cmp	r3, #0
 8000bcc:	d003      	beq.n	8000bd6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	68fb      	ldr	r3, [r7, #12]
 8000bd2:	4313      	orrs	r3, r2
 8000bd4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bd6:	4a27      	ldr	r2, [pc, #156]	; (8000c74 <HAL_GPIO_Init+0x310>)
 8000bd8:	693b      	ldr	r3, [r7, #16]
 8000bda:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bdc:	4b25      	ldr	r3, [pc, #148]	; (8000c74 <HAL_GPIO_Init+0x310>)
 8000bde:	685b      	ldr	r3, [r3, #4]
 8000be0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000be2:	68fb      	ldr	r3, [r7, #12]
 8000be4:	43db      	mvns	r3, r3
 8000be6:	693a      	ldr	r2, [r7, #16]
 8000be8:	4013      	ands	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000bec:	683b      	ldr	r3, [r7, #0]
 8000bee:	685b      	ldr	r3, [r3, #4]
 8000bf0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d003      	beq.n	8000c00 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bf8:	693a      	ldr	r2, [r7, #16]
 8000bfa:	68fb      	ldr	r3, [r7, #12]
 8000bfc:	4313      	orrs	r3, r2
 8000bfe:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000c00:	4a1c      	ldr	r2, [pc, #112]	; (8000c74 <HAL_GPIO_Init+0x310>)
 8000c02:	693b      	ldr	r3, [r7, #16]
 8000c04:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000c06:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <HAL_GPIO_Init+0x310>)
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	43db      	mvns	r3, r3
 8000c10:	693a      	ldr	r2, [r7, #16]
 8000c12:	4013      	ands	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c16:	683b      	ldr	r3, [r7, #0]
 8000c18:	685b      	ldr	r3, [r3, #4]
 8000c1a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c1e:	2b00      	cmp	r3, #0
 8000c20:	d003      	beq.n	8000c2a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c22:	693a      	ldr	r2, [r7, #16]
 8000c24:	68fb      	ldr	r3, [r7, #12]
 8000c26:	4313      	orrs	r3, r2
 8000c28:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c2a:	4a12      	ldr	r2, [pc, #72]	; (8000c74 <HAL_GPIO_Init+0x310>)
 8000c2c:	693b      	ldr	r3, [r7, #16]
 8000c2e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c30:	697b      	ldr	r3, [r7, #20]
 8000c32:	3301      	adds	r3, #1
 8000c34:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c36:	683b      	ldr	r3, [r7, #0]
 8000c38:	681a      	ldr	r2, [r3, #0]
 8000c3a:	697b      	ldr	r3, [r7, #20]
 8000c3c:	fa22 f303 	lsr.w	r3, r2, r3
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f47f ae97 	bne.w	8000974 <HAL_GPIO_Init+0x10>
  }
}
 8000c46:	bf00      	nop
 8000c48:	bf00      	nop
 8000c4a:	371c      	adds	r7, #28
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c52:	4770      	bx	lr
 8000c54:	40021000 	.word	0x40021000
 8000c58:	40010000 	.word	0x40010000
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	48000800 	.word	0x48000800
 8000c64:	48000c00 	.word	0x48000c00
 8000c68:	48001000 	.word	0x48001000
 8000c6c:	48001400 	.word	0x48001400
 8000c70:	48001800 	.word	0x48001800
 8000c74:	40010400 	.word	0x40010400

08000c78 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b083      	sub	sp, #12
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
 8000c80:	460b      	mov	r3, r1
 8000c82:	807b      	strh	r3, [r7, #2]
 8000c84:	4613      	mov	r3, r2
 8000c86:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c88:	787b      	ldrb	r3, [r7, #1]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d003      	beq.n	8000c96 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c94:	e002      	b.n	8000c9c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c96:	887a      	ldrh	r2, [r7, #2]
 8000c98:	687b      	ldr	r3, [r7, #4]
 8000c9a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c9c:	bf00      	nop
 8000c9e:	370c      	adds	r7, #12
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ca6:	4770      	bx	lr

08000ca8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000cae:	af00      	add	r7, sp, #0
 8000cb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cb4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cb8:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000cba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cbe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	2b00      	cmp	r3, #0
 8000cc6:	d102      	bne.n	8000cce <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	f001 b83a 	b.w	8001d42 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cd2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cd6:	681b      	ldr	r3, [r3, #0]
 8000cd8:	681b      	ldr	r3, [r3, #0]
 8000cda:	f003 0301 	and.w	r3, r3, #1
 8000cde:	2b00      	cmp	r3, #0
 8000ce0:	f000 816f 	beq.w	8000fc2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000ce4:	4bb5      	ldr	r3, [pc, #724]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000ce6:	685b      	ldr	r3, [r3, #4]
 8000ce8:	f003 030c 	and.w	r3, r3, #12
 8000cec:	2b04      	cmp	r3, #4
 8000cee:	d00c      	beq.n	8000d0a <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000cf0:	4bb2      	ldr	r3, [pc, #712]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000cf2:	685b      	ldr	r3, [r3, #4]
 8000cf4:	f003 030c 	and.w	r3, r3, #12
 8000cf8:	2b08      	cmp	r3, #8
 8000cfa:	d15c      	bne.n	8000db6 <HAL_RCC_OscConfig+0x10e>
 8000cfc:	4baf      	ldr	r3, [pc, #700]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d08:	d155      	bne.n	8000db6 <HAL_RCC_OscConfig+0x10e>
 8000d0a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d0e:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d12:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d16:	fa93 f3a3 	rbit	r3, r3
 8000d1a:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d1e:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d22:	fab3 f383 	clz	r3, r3
 8000d26:	b2db      	uxtb	r3, r3
 8000d28:	095b      	lsrs	r3, r3, #5
 8000d2a:	b2db      	uxtb	r3, r3
 8000d2c:	f043 0301 	orr.w	r3, r3, #1
 8000d30:	b2db      	uxtb	r3, r3
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d102      	bne.n	8000d3c <HAL_RCC_OscConfig+0x94>
 8000d36:	4ba1      	ldr	r3, [pc, #644]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000d38:	681b      	ldr	r3, [r3, #0]
 8000d3a:	e015      	b.n	8000d68 <HAL_RCC_OscConfig+0xc0>
 8000d3c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d40:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d44:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d48:	fa93 f3a3 	rbit	r3, r3
 8000d4c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d50:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d54:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d58:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d5c:	fa93 f3a3 	rbit	r3, r3
 8000d60:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d64:	4b95      	ldr	r3, [pc, #596]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000d66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d68:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d6c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d70:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000d74:	fa92 f2a2 	rbit	r2, r2
 8000d78:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000d7c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000d80:	fab2 f282 	clz	r2, r2
 8000d84:	b2d2      	uxtb	r2, r2
 8000d86:	f042 0220 	orr.w	r2, r2, #32
 8000d8a:	b2d2      	uxtb	r2, r2
 8000d8c:	f002 021f 	and.w	r2, r2, #31
 8000d90:	2101      	movs	r1, #1
 8000d92:	fa01 f202 	lsl.w	r2, r1, r2
 8000d96:	4013      	ands	r3, r2
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	f000 8111 	beq.w	8000fc0 <HAL_RCC_OscConfig+0x318>
 8000d9e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000da2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	685b      	ldr	r3, [r3, #4]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	f040 8108 	bne.w	8000fc0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000db0:	2301      	movs	r3, #1
 8000db2:	f000 bfc6 	b.w	8001d42 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000db6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dbe:	681b      	ldr	r3, [r3, #0]
 8000dc0:	685b      	ldr	r3, [r3, #4]
 8000dc2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000dc6:	d106      	bne.n	8000dd6 <HAL_RCC_OscConfig+0x12e>
 8000dc8:	4b7c      	ldr	r3, [pc, #496]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	4a7b      	ldr	r2, [pc, #492]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000dce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dd2:	6013      	str	r3, [r2, #0]
 8000dd4:	e036      	b.n	8000e44 <HAL_RCC_OscConfig+0x19c>
 8000dd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dda:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d10c      	bne.n	8000e00 <HAL_RCC_OscConfig+0x158>
 8000de6:	4b75      	ldr	r3, [pc, #468]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	4a74      	ldr	r2, [pc, #464]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000dec:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000df0:	6013      	str	r3, [r2, #0]
 8000df2:	4b72      	ldr	r3, [pc, #456]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000df4:	681b      	ldr	r3, [r3, #0]
 8000df6:	4a71      	ldr	r2, [pc, #452]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000df8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000dfc:	6013      	str	r3, [r2, #0]
 8000dfe:	e021      	b.n	8000e44 <HAL_RCC_OscConfig+0x19c>
 8000e00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e04:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x184>
 8000e12:	4b6a      	ldr	r3, [pc, #424]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a69      	ldr	r2, [pc, #420]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000e18:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b67      	ldr	r3, [pc, #412]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a66      	ldr	r2, [pc, #408]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000e24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e00b      	b.n	8000e44 <HAL_RCC_OscConfig+0x19c>
 8000e2c:	4b63      	ldr	r3, [pc, #396]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000e2e:	681b      	ldr	r3, [r3, #0]
 8000e30:	4a62      	ldr	r2, [pc, #392]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000e32:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e36:	6013      	str	r3, [r2, #0]
 8000e38:	4b60      	ldr	r3, [pc, #384]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	4a5f      	ldr	r2, [pc, #380]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000e3e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e42:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e48:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	685b      	ldr	r3, [r3, #4]
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d059      	beq.n	8000f08 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e54:	f7ff fc68 	bl	8000728 <HAL_GetTick>
 8000e58:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e5c:	e00a      	b.n	8000e74 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e5e:	f7ff fc63 	bl	8000728 <HAL_GetTick>
 8000e62:	4602      	mov	r2, r0
 8000e64:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e68:	1ad3      	subs	r3, r2, r3
 8000e6a:	2b64      	cmp	r3, #100	; 0x64
 8000e6c:	d902      	bls.n	8000e74 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000e6e:	2303      	movs	r3, #3
 8000e70:	f000 bf67 	b.w	8001d42 <HAL_RCC_OscConfig+0x109a>
 8000e74:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e78:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e7c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000e80:	fa93 f3a3 	rbit	r3, r3
 8000e84:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000e88:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e8c:	fab3 f383 	clz	r3, r3
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	095b      	lsrs	r3, r3, #5
 8000e94:	b2db      	uxtb	r3, r3
 8000e96:	f043 0301 	orr.w	r3, r3, #1
 8000e9a:	b2db      	uxtb	r3, r3
 8000e9c:	2b01      	cmp	r3, #1
 8000e9e:	d102      	bne.n	8000ea6 <HAL_RCC_OscConfig+0x1fe>
 8000ea0:	4b46      	ldr	r3, [pc, #280]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	e015      	b.n	8000ed2 <HAL_RCC_OscConfig+0x22a>
 8000ea6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eaa:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eae:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000eb2:	fa93 f3a3 	rbit	r3, r3
 8000eb6:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000eba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ebe:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000ec2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ec6:	fa93 f3a3 	rbit	r3, r3
 8000eca:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000ece:	4b3b      	ldr	r3, [pc, #236]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000ed0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000ed2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000ed6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000eda:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000ede:	fa92 f2a2 	rbit	r2, r2
 8000ee2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000ee6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000eea:	fab2 f282 	clz	r2, r2
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	f042 0220 	orr.w	r2, r2, #32
 8000ef4:	b2d2      	uxtb	r2, r2
 8000ef6:	f002 021f 	and.w	r2, r2, #31
 8000efa:	2101      	movs	r1, #1
 8000efc:	fa01 f202 	lsl.w	r2, r1, r2
 8000f00:	4013      	ands	r3, r2
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d0ab      	beq.n	8000e5e <HAL_RCC_OscConfig+0x1b6>
 8000f06:	e05c      	b.n	8000fc2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f08:	f7ff fc0e 	bl	8000728 <HAL_GetTick>
 8000f0c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f10:	e00a      	b.n	8000f28 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f12:	f7ff fc09 	bl	8000728 <HAL_GetTick>
 8000f16:	4602      	mov	r2, r0
 8000f18:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f1c:	1ad3      	subs	r3, r2, r3
 8000f1e:	2b64      	cmp	r3, #100	; 0x64
 8000f20:	d902      	bls.n	8000f28 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000f22:	2303      	movs	r3, #3
 8000f24:	f000 bf0d 	b.w	8001d42 <HAL_RCC_OscConfig+0x109a>
 8000f28:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f2c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f30:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f34:	fa93 f3a3 	rbit	r3, r3
 8000f38:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f3c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f40:	fab3 f383 	clz	r3, r3
 8000f44:	b2db      	uxtb	r3, r3
 8000f46:	095b      	lsrs	r3, r3, #5
 8000f48:	b2db      	uxtb	r3, r3
 8000f4a:	f043 0301 	orr.w	r3, r3, #1
 8000f4e:	b2db      	uxtb	r3, r3
 8000f50:	2b01      	cmp	r3, #1
 8000f52:	d102      	bne.n	8000f5a <HAL_RCC_OscConfig+0x2b2>
 8000f54:	4b19      	ldr	r3, [pc, #100]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000f56:	681b      	ldr	r3, [r3, #0]
 8000f58:	e015      	b.n	8000f86 <HAL_RCC_OscConfig+0x2de>
 8000f5a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f5e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f62:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f66:	fa93 f3a3 	rbit	r3, r3
 8000f6a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f6e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f72:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000f76:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000f7a:	fa93 f3a3 	rbit	r3, r3
 8000f7e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000f82:	4b0e      	ldr	r3, [pc, #56]	; (8000fbc <HAL_RCC_OscConfig+0x314>)
 8000f84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f86:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f8a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000f8e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000f92:	fa92 f2a2 	rbit	r2, r2
 8000f96:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000f9a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000f9e:	fab2 f282 	clz	r2, r2
 8000fa2:	b2d2      	uxtb	r2, r2
 8000fa4:	f042 0220 	orr.w	r2, r2, #32
 8000fa8:	b2d2      	uxtb	r2, r2
 8000faa:	f002 021f 	and.w	r2, r2, #31
 8000fae:	2101      	movs	r1, #1
 8000fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8000fb4:	4013      	ands	r3, r2
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1ab      	bne.n	8000f12 <HAL_RCC_OscConfig+0x26a>
 8000fba:	e002      	b.n	8000fc2 <HAL_RCC_OscConfig+0x31a>
 8000fbc:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fc0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fc2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000fc6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	f003 0302 	and.w	r3, r3, #2
 8000fd2:	2b00      	cmp	r3, #0
 8000fd4:	f000 817f 	beq.w	80012d6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8000fd8:	4ba7      	ldr	r3, [pc, #668]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 8000fda:	685b      	ldr	r3, [r3, #4]
 8000fdc:	f003 030c 	and.w	r3, r3, #12
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d00c      	beq.n	8000ffe <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8000fe4:	4ba4      	ldr	r3, [pc, #656]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 8000fe6:	685b      	ldr	r3, [r3, #4]
 8000fe8:	f003 030c 	and.w	r3, r3, #12
 8000fec:	2b08      	cmp	r3, #8
 8000fee:	d173      	bne.n	80010d8 <HAL_RCC_OscConfig+0x430>
 8000ff0:	4ba1      	ldr	r3, [pc, #644]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 8000ff2:	685b      	ldr	r3, [r3, #4]
 8000ff4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000ff8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8000ffc:	d16c      	bne.n	80010d8 <HAL_RCC_OscConfig+0x430>
 8000ffe:	2302      	movs	r3, #2
 8001000:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001004:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001008:	fa93 f3a3 	rbit	r3, r3
 800100c:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 8001010:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001014:	fab3 f383 	clz	r3, r3
 8001018:	b2db      	uxtb	r3, r3
 800101a:	095b      	lsrs	r3, r3, #5
 800101c:	b2db      	uxtb	r3, r3
 800101e:	f043 0301 	orr.w	r3, r3, #1
 8001022:	b2db      	uxtb	r3, r3
 8001024:	2b01      	cmp	r3, #1
 8001026:	d102      	bne.n	800102e <HAL_RCC_OscConfig+0x386>
 8001028:	4b93      	ldr	r3, [pc, #588]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	e013      	b.n	8001056 <HAL_RCC_OscConfig+0x3ae>
 800102e:	2302      	movs	r3, #2
 8001030:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001034:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001038:	fa93 f3a3 	rbit	r3, r3
 800103c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001040:	2302      	movs	r3, #2
 8001042:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001046:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800104a:	fa93 f3a3 	rbit	r3, r3
 800104e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001052:	4b89      	ldr	r3, [pc, #548]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 8001054:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001056:	2202      	movs	r2, #2
 8001058:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800105c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001060:	fa92 f2a2 	rbit	r2, r2
 8001064:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001068:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800106c:	fab2 f282 	clz	r2, r2
 8001070:	b2d2      	uxtb	r2, r2
 8001072:	f042 0220 	orr.w	r2, r2, #32
 8001076:	b2d2      	uxtb	r2, r2
 8001078:	f002 021f 	and.w	r2, r2, #31
 800107c:	2101      	movs	r1, #1
 800107e:	fa01 f202 	lsl.w	r2, r1, r2
 8001082:	4013      	ands	r3, r2
 8001084:	2b00      	cmp	r3, #0
 8001086:	d00a      	beq.n	800109e <HAL_RCC_OscConfig+0x3f6>
 8001088:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800108c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	68db      	ldr	r3, [r3, #12]
 8001094:	2b01      	cmp	r3, #1
 8001096:	d002      	beq.n	800109e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001098:	2301      	movs	r3, #1
 800109a:	f000 be52 	b.w	8001d42 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800109e:	4b76      	ldr	r3, [pc, #472]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 80010a0:	681b      	ldr	r3, [r3, #0]
 80010a2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010aa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	691b      	ldr	r3, [r3, #16]
 80010b2:	21f8      	movs	r1, #248	; 0xf8
 80010b4:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010b8:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010bc:	fa91 f1a1 	rbit	r1, r1
 80010c0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010c4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010c8:	fab1 f181 	clz	r1, r1
 80010cc:	b2c9      	uxtb	r1, r1
 80010ce:	408b      	lsls	r3, r1
 80010d0:	4969      	ldr	r1, [pc, #420]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 80010d2:	4313      	orrs	r3, r2
 80010d4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010d6:	e0fe      	b.n	80012d6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80010d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010dc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	68db      	ldr	r3, [r3, #12]
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	f000 8088 	beq.w	80011fa <HAL_RCC_OscConfig+0x552>
 80010ea:	2301      	movs	r3, #1
 80010ec:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010f0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80010f4:	fa93 f3a3 	rbit	r3, r3
 80010f8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80010fc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001100:	fab3 f383 	clz	r3, r3
 8001104:	b2db      	uxtb	r3, r3
 8001106:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800110a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	461a      	mov	r2, r3
 8001112:	2301      	movs	r3, #1
 8001114:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001116:	f7ff fb07 	bl	8000728 <HAL_GetTick>
 800111a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800111e:	e00a      	b.n	8001136 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001120:	f7ff fb02 	bl	8000728 <HAL_GetTick>
 8001124:	4602      	mov	r2, r0
 8001126:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800112a:	1ad3      	subs	r3, r2, r3
 800112c:	2b02      	cmp	r3, #2
 800112e:	d902      	bls.n	8001136 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001130:	2303      	movs	r3, #3
 8001132:	f000 be06 	b.w	8001d42 <HAL_RCC_OscConfig+0x109a>
 8001136:	2302      	movs	r3, #2
 8001138:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800113c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001140:	fa93 f3a3 	rbit	r3, r3
 8001144:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001148:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114c:	fab3 f383 	clz	r3, r3
 8001150:	b2db      	uxtb	r3, r3
 8001152:	095b      	lsrs	r3, r3, #5
 8001154:	b2db      	uxtb	r3, r3
 8001156:	f043 0301 	orr.w	r3, r3, #1
 800115a:	b2db      	uxtb	r3, r3
 800115c:	2b01      	cmp	r3, #1
 800115e:	d102      	bne.n	8001166 <HAL_RCC_OscConfig+0x4be>
 8001160:	4b45      	ldr	r3, [pc, #276]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	e013      	b.n	800118e <HAL_RCC_OscConfig+0x4e6>
 8001166:	2302      	movs	r3, #2
 8001168:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800116c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001170:	fa93 f3a3 	rbit	r3, r3
 8001174:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001178:	2302      	movs	r3, #2
 800117a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800117e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001182:	fa93 f3a3 	rbit	r3, r3
 8001186:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800118a:	4b3b      	ldr	r3, [pc, #236]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	2202      	movs	r2, #2
 8001190:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001194:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001198:	fa92 f2a2 	rbit	r2, r2
 800119c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011a0:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011a4:	fab2 f282 	clz	r2, r2
 80011a8:	b2d2      	uxtb	r2, r2
 80011aa:	f042 0220 	orr.w	r2, r2, #32
 80011ae:	b2d2      	uxtb	r2, r2
 80011b0:	f002 021f 	and.w	r2, r2, #31
 80011b4:	2101      	movs	r1, #1
 80011b6:	fa01 f202 	lsl.w	r2, r1, r2
 80011ba:	4013      	ands	r3, r2
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d0af      	beq.n	8001120 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011c0:	4b2d      	ldr	r3, [pc, #180]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011cc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	691b      	ldr	r3, [r3, #16]
 80011d4:	21f8      	movs	r1, #248	; 0xf8
 80011d6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011da:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80011de:	fa91 f1a1 	rbit	r1, r1
 80011e2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80011e6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80011ea:	fab1 f181 	clz	r1, r1
 80011ee:	b2c9      	uxtb	r1, r1
 80011f0:	408b      	lsls	r3, r1
 80011f2:	4921      	ldr	r1, [pc, #132]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 80011f4:	4313      	orrs	r3, r2
 80011f6:	600b      	str	r3, [r1, #0]
 80011f8:	e06d      	b.n	80012d6 <HAL_RCC_OscConfig+0x62e>
 80011fa:	2301      	movs	r3, #1
 80011fc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001200:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001204:	fa93 f3a3 	rbit	r3, r3
 8001208:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 800120c:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001210:	fab3 f383 	clz	r3, r3
 8001214:	b2db      	uxtb	r3, r3
 8001216:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800121a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	461a      	mov	r2, r3
 8001222:	2300      	movs	r3, #0
 8001224:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001226:	f7ff fa7f 	bl	8000728 <HAL_GetTick>
 800122a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800122e:	e00a      	b.n	8001246 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001230:	f7ff fa7a 	bl	8000728 <HAL_GetTick>
 8001234:	4602      	mov	r2, r0
 8001236:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800123a:	1ad3      	subs	r3, r2, r3
 800123c:	2b02      	cmp	r3, #2
 800123e:	d902      	bls.n	8001246 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001240:	2303      	movs	r3, #3
 8001242:	f000 bd7e 	b.w	8001d42 <HAL_RCC_OscConfig+0x109a>
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001258:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125c:	fab3 f383 	clz	r3, r3
 8001260:	b2db      	uxtb	r3, r3
 8001262:	095b      	lsrs	r3, r3, #5
 8001264:	b2db      	uxtb	r3, r3
 8001266:	f043 0301 	orr.w	r3, r3, #1
 800126a:	b2db      	uxtb	r3, r3
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <HAL_RCC_OscConfig+0x5d4>
 8001270:	4b01      	ldr	r3, [pc, #4]	; (8001278 <HAL_RCC_OscConfig+0x5d0>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	e016      	b.n	80012a4 <HAL_RCC_OscConfig+0x5fc>
 8001276:	bf00      	nop
 8001278:	40021000 	.word	0x40021000
 800127c:	2302      	movs	r3, #2
 800127e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001282:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001286:	fa93 f3a3 	rbit	r3, r3
 800128a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800128e:	2302      	movs	r3, #2
 8001290:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001294:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001298:	fa93 f3a3 	rbit	r3, r3
 800129c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012a0:	4bbf      	ldr	r3, [pc, #764]	; (80015a0 <HAL_RCC_OscConfig+0x8f8>)
 80012a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012a4:	2202      	movs	r2, #2
 80012a6:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012aa:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012ae:	fa92 f2a2 	rbit	r2, r2
 80012b2:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012b6:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012ba:	fab2 f282 	clz	r2, r2
 80012be:	b2d2      	uxtb	r2, r2
 80012c0:	f042 0220 	orr.w	r2, r2, #32
 80012c4:	b2d2      	uxtb	r2, r2
 80012c6:	f002 021f 	and.w	r2, r2, #31
 80012ca:	2101      	movs	r1, #1
 80012cc:	fa01 f202 	lsl.w	r2, r1, r2
 80012d0:	4013      	ands	r3, r2
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d1ac      	bne.n	8001230 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80012d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	f003 0308 	and.w	r3, r3, #8
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	f000 8113 	beq.w	8001512 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80012ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012f0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	695b      	ldr	r3, [r3, #20]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d07c      	beq.n	80013f6 <HAL_RCC_OscConfig+0x74e>
 80012fc:	2301      	movs	r3, #1
 80012fe:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001302:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001306:	fa93 f3a3 	rbit	r3, r3
 800130a:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800130e:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001312:	fab3 f383 	clz	r3, r3
 8001316:	b2db      	uxtb	r3, r3
 8001318:	461a      	mov	r2, r3
 800131a:	4ba2      	ldr	r3, [pc, #648]	; (80015a4 <HAL_RCC_OscConfig+0x8fc>)
 800131c:	4413      	add	r3, r2
 800131e:	009b      	lsls	r3, r3, #2
 8001320:	461a      	mov	r2, r3
 8001322:	2301      	movs	r3, #1
 8001324:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001326:	f7ff f9ff 	bl	8000728 <HAL_GetTick>
 800132a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800132e:	e00a      	b.n	8001346 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001330:	f7ff f9fa 	bl	8000728 <HAL_GetTick>
 8001334:	4602      	mov	r2, r0
 8001336:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800133a:	1ad3      	subs	r3, r2, r3
 800133c:	2b02      	cmp	r3, #2
 800133e:	d902      	bls.n	8001346 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001340:	2303      	movs	r3, #3
 8001342:	f000 bcfe 	b.w	8001d42 <HAL_RCC_OscConfig+0x109a>
 8001346:	2302      	movs	r3, #2
 8001348:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800134c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001350:	fa93 f2a3 	rbit	r2, r3
 8001354:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001358:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001362:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001366:	2202      	movs	r2, #2
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800136e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	fa93 f2a3 	rbit	r2, r3
 8001378:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800137c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001380:	601a      	str	r2, [r3, #0]
 8001382:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001386:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800138a:	2202      	movs	r2, #2
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001392:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	fa93 f2a3 	rbit	r2, r3
 800139c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a0:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013a4:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013a6:	4b7e      	ldr	r3, [pc, #504]	; (80015a0 <HAL_RCC_OscConfig+0x8f8>)
 80013a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ae:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013b2:	2102      	movs	r1, #2
 80013b4:	6019      	str	r1, [r3, #0]
 80013b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ba:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	fa93 f1a3 	rbit	r1, r3
 80013c4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013c8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013cc:	6019      	str	r1, [r3, #0]
  return result;
 80013ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	fab3 f383 	clz	r3, r3
 80013dc:	b2db      	uxtb	r3, r3
 80013de:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	f003 031f 	and.w	r3, r3, #31
 80013e8:	2101      	movs	r1, #1
 80013ea:	fa01 f303 	lsl.w	r3, r1, r3
 80013ee:	4013      	ands	r3, r2
 80013f0:	2b00      	cmp	r3, #0
 80013f2:	d09d      	beq.n	8001330 <HAL_RCC_OscConfig+0x688>
 80013f4:	e08d      	b.n	8001512 <HAL_RCC_OscConfig+0x86a>
 80013f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fa:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80013fe:	2201      	movs	r2, #1
 8001400:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001402:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001406:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800140a:	681b      	ldr	r3, [r3, #0]
 800140c:	fa93 f2a3 	rbit	r2, r3
 8001410:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001414:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001418:	601a      	str	r2, [r3, #0]
  return result;
 800141a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800141e:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001422:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001424:	fab3 f383 	clz	r3, r3
 8001428:	b2db      	uxtb	r3, r3
 800142a:	461a      	mov	r2, r3
 800142c:	4b5d      	ldr	r3, [pc, #372]	; (80015a4 <HAL_RCC_OscConfig+0x8fc>)
 800142e:	4413      	add	r3, r2
 8001430:	009b      	lsls	r3, r3, #2
 8001432:	461a      	mov	r2, r3
 8001434:	2300      	movs	r3, #0
 8001436:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001438:	f7ff f976 	bl	8000728 <HAL_GetTick>
 800143c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001440:	e00a      	b.n	8001458 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001442:	f7ff f971 	bl	8000728 <HAL_GetTick>
 8001446:	4602      	mov	r2, r0
 8001448:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	2b02      	cmp	r3, #2
 8001450:	d902      	bls.n	8001458 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001452:	2303      	movs	r3, #3
 8001454:	f000 bc75 	b.w	8001d42 <HAL_RCC_OscConfig+0x109a>
 8001458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001460:	2202      	movs	r2, #2
 8001462:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001464:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001468:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	fa93 f2a3 	rbit	r2, r3
 8001472:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001476:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800147a:	601a      	str	r2, [r3, #0]
 800147c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001480:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001484:	2202      	movs	r2, #2
 8001486:	601a      	str	r2, [r3, #0]
 8001488:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	fa93 f2a3 	rbit	r2, r3
 8001496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800149e:	601a      	str	r2, [r3, #0]
 80014a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a4:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014a8:	2202      	movs	r2, #2
 80014aa:	601a      	str	r2, [r3, #0]
 80014ac:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	fa93 f2a3 	rbit	r2, r3
 80014ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014be:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014c2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014c4:	4b36      	ldr	r3, [pc, #216]	; (80015a0 <HAL_RCC_OscConfig+0x8f8>)
 80014c6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014cc:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014d0:	2102      	movs	r1, #2
 80014d2:	6019      	str	r1, [r3, #0]
 80014d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	fa93 f1a3 	rbit	r1, r3
 80014e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014ea:	6019      	str	r1, [r3, #0]
  return result;
 80014ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	fab3 f383 	clz	r3, r3
 80014fa:	b2db      	uxtb	r3, r3
 80014fc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8001500:	b2db      	uxtb	r3, r3
 8001502:	f003 031f 	and.w	r3, r3, #31
 8001506:	2101      	movs	r1, #1
 8001508:	fa01 f303 	lsl.w	r3, r1, r3
 800150c:	4013      	ands	r3, r2
 800150e:	2b00      	cmp	r3, #0
 8001510:	d197      	bne.n	8001442 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001512:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001516:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	f003 0304 	and.w	r3, r3, #4
 8001522:	2b00      	cmp	r3, #0
 8001524:	f000 81a5 	beq.w	8001872 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001528:	2300      	movs	r3, #0
 800152a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800152e:	4b1c      	ldr	r3, [pc, #112]	; (80015a0 <HAL_RCC_OscConfig+0x8f8>)
 8001530:	69db      	ldr	r3, [r3, #28]
 8001532:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d116      	bne.n	8001568 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800153a:	4b19      	ldr	r3, [pc, #100]	; (80015a0 <HAL_RCC_OscConfig+0x8f8>)
 800153c:	69db      	ldr	r3, [r3, #28]
 800153e:	4a18      	ldr	r2, [pc, #96]	; (80015a0 <HAL_RCC_OscConfig+0x8f8>)
 8001540:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001544:	61d3      	str	r3, [r2, #28]
 8001546:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <HAL_RCC_OscConfig+0x8f8>)
 8001548:	69db      	ldr	r3, [r3, #28]
 800154a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800154e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001552:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800155c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001560:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001562:	2301      	movs	r3, #1
 8001564:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001568:	4b0f      	ldr	r3, [pc, #60]	; (80015a8 <HAL_RCC_OscConfig+0x900>)
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001570:	2b00      	cmp	r3, #0
 8001572:	d121      	bne.n	80015b8 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001574:	4b0c      	ldr	r3, [pc, #48]	; (80015a8 <HAL_RCC_OscConfig+0x900>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a0b      	ldr	r2, [pc, #44]	; (80015a8 <HAL_RCC_OscConfig+0x900>)
 800157a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800157e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001580:	f7ff f8d2 	bl	8000728 <HAL_GetTick>
 8001584:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001588:	e010      	b.n	80015ac <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800158a:	f7ff f8cd 	bl	8000728 <HAL_GetTick>
 800158e:	4602      	mov	r2, r0
 8001590:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001594:	1ad3      	subs	r3, r2, r3
 8001596:	2b64      	cmp	r3, #100	; 0x64
 8001598:	d908      	bls.n	80015ac <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800159a:	2303      	movs	r3, #3
 800159c:	e3d1      	b.n	8001d42 <HAL_RCC_OscConfig+0x109a>
 800159e:	bf00      	nop
 80015a0:	40021000 	.word	0x40021000
 80015a4:	10908120 	.word	0x10908120
 80015a8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ac:	4b8d      	ldr	r3, [pc, #564]	; (80017e4 <HAL_RCC_OscConfig+0xb3c>)
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d0e8      	beq.n	800158a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015c0:	681b      	ldr	r3, [r3, #0]
 80015c2:	689b      	ldr	r3, [r3, #8]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d106      	bne.n	80015d6 <HAL_RCC_OscConfig+0x92e>
 80015c8:	4b87      	ldr	r3, [pc, #540]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 80015ca:	6a1b      	ldr	r3, [r3, #32]
 80015cc:	4a86      	ldr	r2, [pc, #536]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 80015ce:	f043 0301 	orr.w	r3, r3, #1
 80015d2:	6213      	str	r3, [r2, #32]
 80015d4:	e035      	b.n	8001642 <HAL_RCC_OscConfig+0x99a>
 80015d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015da:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	689b      	ldr	r3, [r3, #8]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d10c      	bne.n	8001600 <HAL_RCC_OscConfig+0x958>
 80015e6:	4b80      	ldr	r3, [pc, #512]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 80015e8:	6a1b      	ldr	r3, [r3, #32]
 80015ea:	4a7f      	ldr	r2, [pc, #508]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 80015ec:	f023 0301 	bic.w	r3, r3, #1
 80015f0:	6213      	str	r3, [r2, #32]
 80015f2:	4b7d      	ldr	r3, [pc, #500]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 80015f4:	6a1b      	ldr	r3, [r3, #32]
 80015f6:	4a7c      	ldr	r2, [pc, #496]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 80015f8:	f023 0304 	bic.w	r3, r3, #4
 80015fc:	6213      	str	r3, [r2, #32]
 80015fe:	e020      	b.n	8001642 <HAL_RCC_OscConfig+0x99a>
 8001600:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001604:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	2b05      	cmp	r3, #5
 800160e:	d10c      	bne.n	800162a <HAL_RCC_OscConfig+0x982>
 8001610:	4b75      	ldr	r3, [pc, #468]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 8001612:	6a1b      	ldr	r3, [r3, #32]
 8001614:	4a74      	ldr	r2, [pc, #464]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 8001616:	f043 0304 	orr.w	r3, r3, #4
 800161a:	6213      	str	r3, [r2, #32]
 800161c:	4b72      	ldr	r3, [pc, #456]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	4a71      	ldr	r2, [pc, #452]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 8001622:	f043 0301 	orr.w	r3, r3, #1
 8001626:	6213      	str	r3, [r2, #32]
 8001628:	e00b      	b.n	8001642 <HAL_RCC_OscConfig+0x99a>
 800162a:	4b6f      	ldr	r3, [pc, #444]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 800162c:	6a1b      	ldr	r3, [r3, #32]
 800162e:	4a6e      	ldr	r2, [pc, #440]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 8001630:	f023 0301 	bic.w	r3, r3, #1
 8001634:	6213      	str	r3, [r2, #32]
 8001636:	4b6c      	ldr	r3, [pc, #432]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 8001638:	6a1b      	ldr	r3, [r3, #32]
 800163a:	4a6b      	ldr	r2, [pc, #428]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 800163c:	f023 0304 	bic.w	r3, r3, #4
 8001640:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001642:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001646:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689b      	ldr	r3, [r3, #8]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8081 	beq.w	8001756 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001654:	f7ff f868 	bl	8000728 <HAL_GetTick>
 8001658:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800165c:	e00b      	b.n	8001676 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800165e:	f7ff f863 	bl	8000728 <HAL_GetTick>
 8001662:	4602      	mov	r2, r0
 8001664:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001668:	1ad3      	subs	r3, r2, r3
 800166a:	f241 3288 	movw	r2, #5000	; 0x1388
 800166e:	4293      	cmp	r3, r2
 8001670:	d901      	bls.n	8001676 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001672:	2303      	movs	r3, #3
 8001674:	e365      	b.n	8001d42 <HAL_RCC_OscConfig+0x109a>
 8001676:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800167a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800167e:	2202      	movs	r2, #2
 8001680:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001682:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001686:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	fa93 f2a3 	rbit	r2, r3
 8001690:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001694:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016a2:	2202      	movs	r2, #2
 80016a4:	601a      	str	r2, [r3, #0]
 80016a6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016aa:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	fa93 f2a3 	rbit	r2, r3
 80016b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b8:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016bc:	601a      	str	r2, [r3, #0]
  return result;
 80016be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016c6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016c8:	fab3 f383 	clz	r3, r3
 80016cc:	b2db      	uxtb	r3, r3
 80016ce:	095b      	lsrs	r3, r3, #5
 80016d0:	b2db      	uxtb	r3, r3
 80016d2:	f043 0302 	orr.w	r3, r3, #2
 80016d6:	b2db      	uxtb	r3, r3
 80016d8:	2b02      	cmp	r3, #2
 80016da:	d102      	bne.n	80016e2 <HAL_RCC_OscConfig+0xa3a>
 80016dc:	4b42      	ldr	r3, [pc, #264]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 80016de:	6a1b      	ldr	r3, [r3, #32]
 80016e0:	e013      	b.n	800170a <HAL_RCC_OscConfig+0xa62>
 80016e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016ea:	2202      	movs	r2, #2
 80016ec:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016f2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	fa93 f2a3 	rbit	r2, r3
 80016fc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001700:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001704:	601a      	str	r2, [r3, #0]
 8001706:	4b38      	ldr	r3, [pc, #224]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 8001708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800170a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800170e:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 8001712:	2102      	movs	r1, #2
 8001714:	6011      	str	r1, [r2, #0]
 8001716:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800171a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800171e:	6812      	ldr	r2, [r2, #0]
 8001720:	fa92 f1a2 	rbit	r1, r2
 8001724:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001728:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800172c:	6011      	str	r1, [r2, #0]
  return result;
 800172e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001732:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001736:	6812      	ldr	r2, [r2, #0]
 8001738:	fab2 f282 	clz	r2, r2
 800173c:	b2d2      	uxtb	r2, r2
 800173e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	f002 021f 	and.w	r2, r2, #31
 8001748:	2101      	movs	r1, #1
 800174a:	fa01 f202 	lsl.w	r2, r1, r2
 800174e:	4013      	ands	r3, r2
 8001750:	2b00      	cmp	r3, #0
 8001752:	d084      	beq.n	800165e <HAL_RCC_OscConfig+0x9b6>
 8001754:	e083      	b.n	800185e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001756:	f7fe ffe7 	bl	8000728 <HAL_GetTick>
 800175a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800175e:	e00b      	b.n	8001778 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001760:	f7fe ffe2 	bl	8000728 <HAL_GetTick>
 8001764:	4602      	mov	r2, r0
 8001766:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800176a:	1ad3      	subs	r3, r2, r3
 800176c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001770:	4293      	cmp	r3, r2
 8001772:	d901      	bls.n	8001778 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001774:	2303      	movs	r3, #3
 8001776:	e2e4      	b.n	8001d42 <HAL_RCC_OscConfig+0x109a>
 8001778:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001780:	2202      	movs	r2, #2
 8001782:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001784:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001788:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	fa93 f2a3 	rbit	r2, r3
 8001792:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001796:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800179a:	601a      	str	r2, [r3, #0]
 800179c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a0:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017a4:	2202      	movs	r2, #2
 80017a6:	601a      	str	r2, [r3, #0]
 80017a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ac:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	fa93 f2a3 	rbit	r2, r3
 80017b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017ba:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017be:	601a      	str	r2, [r3, #0]
  return result;
 80017c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017c8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017ca:	fab3 f383 	clz	r3, r3
 80017ce:	b2db      	uxtb	r3, r3
 80017d0:	095b      	lsrs	r3, r3, #5
 80017d2:	b2db      	uxtb	r3, r3
 80017d4:	f043 0302 	orr.w	r3, r3, #2
 80017d8:	b2db      	uxtb	r3, r3
 80017da:	2b02      	cmp	r3, #2
 80017dc:	d106      	bne.n	80017ec <HAL_RCC_OscConfig+0xb44>
 80017de:	4b02      	ldr	r3, [pc, #8]	; (80017e8 <HAL_RCC_OscConfig+0xb40>)
 80017e0:	6a1b      	ldr	r3, [r3, #32]
 80017e2:	e017      	b.n	8001814 <HAL_RCC_OscConfig+0xb6c>
 80017e4:	40007000 	.word	0x40007000
 80017e8:	40021000 	.word	0x40021000
 80017ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80017f4:	2202      	movs	r2, #2
 80017f6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017f8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017fc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	fa93 f2a3 	rbit	r2, r3
 8001806:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800180a:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	4bb3      	ldr	r3, [pc, #716]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 8001812:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001814:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001818:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 800181c:	2102      	movs	r1, #2
 800181e:	6011      	str	r1, [r2, #0]
 8001820:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001824:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001828:	6812      	ldr	r2, [r2, #0]
 800182a:	fa92 f1a2 	rbit	r1, r2
 800182e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001832:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001836:	6011      	str	r1, [r2, #0]
  return result;
 8001838:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800183c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001840:	6812      	ldr	r2, [r2, #0]
 8001842:	fab2 f282 	clz	r2, r2
 8001846:	b2d2      	uxtb	r2, r2
 8001848:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800184c:	b2d2      	uxtb	r2, r2
 800184e:	f002 021f 	and.w	r2, r2, #31
 8001852:	2101      	movs	r1, #1
 8001854:	fa01 f202 	lsl.w	r2, r1, r2
 8001858:	4013      	ands	r3, r2
 800185a:	2b00      	cmp	r3, #0
 800185c:	d180      	bne.n	8001760 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800185e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001862:	2b01      	cmp	r3, #1
 8001864:	d105      	bne.n	8001872 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001866:	4b9e      	ldr	r3, [pc, #632]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 8001868:	69db      	ldr	r3, [r3, #28]
 800186a:	4a9d      	ldr	r2, [pc, #628]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 800186c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001870:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001876:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800187a:	681b      	ldr	r3, [r3, #0]
 800187c:	699b      	ldr	r3, [r3, #24]
 800187e:	2b00      	cmp	r3, #0
 8001880:	f000 825e 	beq.w	8001d40 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001884:	4b96      	ldr	r3, [pc, #600]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 8001886:	685b      	ldr	r3, [r3, #4]
 8001888:	f003 030c 	and.w	r3, r3, #12
 800188c:	2b08      	cmp	r3, #8
 800188e:	f000 821f 	beq.w	8001cd0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001892:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001896:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	699b      	ldr	r3, [r3, #24]
 800189e:	2b02      	cmp	r3, #2
 80018a0:	f040 8170 	bne.w	8001b84 <HAL_RCC_OscConfig+0xedc>
 80018a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a8:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018ac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018b0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018b6:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	fa93 f2a3 	rbit	r2, r3
 80018c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018c8:	601a      	str	r2, [r3, #0]
  return result;
 80018ca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ce:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018d2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80018d4:	fab3 f383 	clz	r3, r3
 80018d8:	b2db      	uxtb	r3, r3
 80018da:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80018de:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80018e2:	009b      	lsls	r3, r3, #2
 80018e4:	461a      	mov	r2, r3
 80018e6:	2300      	movs	r3, #0
 80018e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018ea:	f7fe ff1d 	bl	8000728 <HAL_GetTick>
 80018ee:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018f2:	e009      	b.n	8001908 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80018f4:	f7fe ff18 	bl	8000728 <HAL_GetTick>
 80018f8:	4602      	mov	r2, r0
 80018fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80018fe:	1ad3      	subs	r3, r2, r3
 8001900:	2b02      	cmp	r3, #2
 8001902:	d901      	bls.n	8001908 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001904:	2303      	movs	r3, #3
 8001906:	e21c      	b.n	8001d42 <HAL_RCC_OscConfig+0x109a>
 8001908:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800190c:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 8001910:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001914:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001916:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800191a:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	fa93 f2a3 	rbit	r2, r3
 8001924:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001928:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 800192c:	601a      	str	r2, [r3, #0]
  return result;
 800192e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001932:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001936:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001938:	fab3 f383 	clz	r3, r3
 800193c:	b2db      	uxtb	r3, r3
 800193e:	095b      	lsrs	r3, r3, #5
 8001940:	b2db      	uxtb	r3, r3
 8001942:	f043 0301 	orr.w	r3, r3, #1
 8001946:	b2db      	uxtb	r3, r3
 8001948:	2b01      	cmp	r3, #1
 800194a:	d102      	bne.n	8001952 <HAL_RCC_OscConfig+0xcaa>
 800194c:	4b64      	ldr	r3, [pc, #400]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	e027      	b.n	80019a2 <HAL_RCC_OscConfig+0xcfa>
 8001952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001956:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 800195a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800195e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001960:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001964:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	fa93 f2a3 	rbit	r2, r3
 800196e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001972:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001976:	601a      	str	r2, [r3, #0]
 8001978:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800197c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001980:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001984:	601a      	str	r2, [r3, #0]
 8001986:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800198a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	fa93 f2a3 	rbit	r2, r3
 8001994:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001998:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	4b50      	ldr	r3, [pc, #320]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 80019a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019a2:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019a6:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019aa:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019ae:	6011      	str	r1, [r2, #0]
 80019b0:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019b4:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	fa92 f1a2 	rbit	r1, r2
 80019be:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019c2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019c6:	6011      	str	r1, [r2, #0]
  return result;
 80019c8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019cc:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019d0:	6812      	ldr	r2, [r2, #0]
 80019d2:	fab2 f282 	clz	r2, r2
 80019d6:	b2d2      	uxtb	r2, r2
 80019d8:	f042 0220 	orr.w	r2, r2, #32
 80019dc:	b2d2      	uxtb	r2, r2
 80019de:	f002 021f 	and.w	r2, r2, #31
 80019e2:	2101      	movs	r1, #1
 80019e4:	fa01 f202 	lsl.w	r2, r1, r2
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d182      	bne.n	80018f4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80019ee:	4b3c      	ldr	r3, [pc, #240]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 80019f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80019f2:	f023 020f 	bic.w	r2, r3, #15
 80019f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fa:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a02:	4937      	ldr	r1, [pc, #220]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 8001a04:	4313      	orrs	r3, r2
 8001a06:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a08:	4b35      	ldr	r3, [pc, #212]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a14:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	6a19      	ldr	r1, [r3, #32]
 8001a1c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a20:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	69db      	ldr	r3, [r3, #28]
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	492d      	ldr	r1, [pc, #180]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
 8001a30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a34:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a38:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a3c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a3e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a42:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	fa93 f2a3 	rbit	r2, r3
 8001a4c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a50:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a54:	601a      	str	r2, [r3, #0]
  return result;
 8001a56:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a5e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a60:	fab3 f383 	clz	r3, r3
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a6a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	461a      	mov	r2, r3
 8001a72:	2301      	movs	r3, #1
 8001a74:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a76:	f7fe fe57 	bl	8000728 <HAL_GetTick>
 8001a7a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a7e:	e009      	b.n	8001a94 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001a80:	f7fe fe52 	bl	8000728 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	2b02      	cmp	r3, #2
 8001a8e:	d901      	bls.n	8001a94 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001a90:	2303      	movs	r3, #3
 8001a92:	e156      	b.n	8001d42 <HAL_RCC_OscConfig+0x109a>
 8001a94:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a98:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001a9c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001aa0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001aa2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aa6:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	fa93 f2a3 	rbit	r2, r3
 8001ab0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ab4:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ab8:	601a      	str	r2, [r3, #0]
  return result;
 8001aba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001abe:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ac2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ac4:	fab3 f383 	clz	r3, r3
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	095b      	lsrs	r3, r3, #5
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	f043 0301 	orr.w	r3, r3, #1
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	2b01      	cmp	r3, #1
 8001ad6:	d105      	bne.n	8001ae4 <HAL_RCC_OscConfig+0xe3c>
 8001ad8:	4b01      	ldr	r3, [pc, #4]	; (8001ae0 <HAL_RCC_OscConfig+0xe38>)
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	e02a      	b.n	8001b34 <HAL_RCC_OscConfig+0xe8c>
 8001ade:	bf00      	nop
 8001ae0:	40021000 	.word	0x40021000
 8001ae4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001aec:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001af0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001af2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001afa:	681b      	ldr	r3, [r3, #0]
 8001afc:	fa93 f2a3 	rbit	r2, r3
 8001b00:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b04:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b08:	601a      	str	r2, [r3, #0]
 8001b0a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b0e:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b12:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b16:	601a      	str	r2, [r3, #0]
 8001b18:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b1c:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b20:	681b      	ldr	r3, [r3, #0]
 8001b22:	fa93 f2a3 	rbit	r2, r3
 8001b26:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b2a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001b2e:	601a      	str	r2, [r3, #0]
 8001b30:	4b86      	ldr	r3, [pc, #536]	; (8001d4c <HAL_RCC_OscConfig+0x10a4>)
 8001b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b34:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b38:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b3c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b40:	6011      	str	r1, [r2, #0]
 8001b42:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b46:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b4a:	6812      	ldr	r2, [r2, #0]
 8001b4c:	fa92 f1a2 	rbit	r1, r2
 8001b50:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b54:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b58:	6011      	str	r1, [r2, #0]
  return result;
 8001b5a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b5e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b62:	6812      	ldr	r2, [r2, #0]
 8001b64:	fab2 f282 	clz	r2, r2
 8001b68:	b2d2      	uxtb	r2, r2
 8001b6a:	f042 0220 	orr.w	r2, r2, #32
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	f002 021f 	and.w	r2, r2, #31
 8001b74:	2101      	movs	r1, #1
 8001b76:	fa01 f202 	lsl.w	r2, r1, r2
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	f43f af7f 	beq.w	8001a80 <HAL_RCC_OscConfig+0xdd8>
 8001b82:	e0dd      	b.n	8001d40 <HAL_RCC_OscConfig+0x1098>
 8001b84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b88:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b8c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b90:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b96:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	fa93 f2a3 	rbit	r2, r3
 8001ba0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ba4:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001ba8:	601a      	str	r2, [r3, #0]
  return result;
 8001baa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bae:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bb2:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001bb4:	fab3 f383 	clz	r3, r3
 8001bb8:	b2db      	uxtb	r3, r3
 8001bba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bbe:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bc2:	009b      	lsls	r3, r3, #2
 8001bc4:	461a      	mov	r2, r3
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bca:	f7fe fdad 	bl	8000728 <HAL_GetTick>
 8001bce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bd2:	e009      	b.n	8001be8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001bd4:	f7fe fda8 	bl	8000728 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001bde:	1ad3      	subs	r3, r2, r3
 8001be0:	2b02      	cmp	r3, #2
 8001be2:	d901      	bls.n	8001be8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001be4:	2303      	movs	r3, #3
 8001be6:	e0ac      	b.n	8001d42 <HAL_RCC_OscConfig+0x109a>
 8001be8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bec:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bf0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bf6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfa:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	fa93 f2a3 	rbit	r2, r3
 8001c04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c08:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c0c:	601a      	str	r2, [r3, #0]
  return result;
 8001c0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c12:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c18:	fab3 f383 	clz	r3, r3
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	095b      	lsrs	r3, r3, #5
 8001c20:	b2db      	uxtb	r3, r3
 8001c22:	f043 0301 	orr.w	r3, r3, #1
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	2b01      	cmp	r3, #1
 8001c2a:	d102      	bne.n	8001c32 <HAL_RCC_OscConfig+0xf8a>
 8001c2c:	4b47      	ldr	r3, [pc, #284]	; (8001d4c <HAL_RCC_OscConfig+0x10a4>)
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	e027      	b.n	8001c82 <HAL_RCC_OscConfig+0xfda>
 8001c32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c36:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c44:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	fa93 f2a3 	rbit	r2, r3
 8001c4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c52:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c56:	601a      	str	r2, [r3, #0]
 8001c58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c5c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c64:	601a      	str	r2, [r3, #0]
 8001c66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c6a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	fa93 f2a3 	rbit	r2, r3
 8001c74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c78:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001c7c:	601a      	str	r2, [r3, #0]
 8001c7e:	4b33      	ldr	r3, [pc, #204]	; (8001d4c <HAL_RCC_OscConfig+0x10a4>)
 8001c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c86:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c8e:	6011      	str	r1, [r2, #0]
 8001c90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c94:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001c98:	6812      	ldr	r2, [r2, #0]
 8001c9a:	fa92 f1a2 	rbit	r1, r2
 8001c9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001ca2:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001ca6:	6011      	str	r1, [r2, #0]
  return result;
 8001ca8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cac:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001cb0:	6812      	ldr	r2, [r2, #0]
 8001cb2:	fab2 f282 	clz	r2, r2
 8001cb6:	b2d2      	uxtb	r2, r2
 8001cb8:	f042 0220 	orr.w	r2, r2, #32
 8001cbc:	b2d2      	uxtb	r2, r2
 8001cbe:	f002 021f 	and.w	r2, r2, #31
 8001cc2:	2101      	movs	r1, #1
 8001cc4:	fa01 f202 	lsl.w	r2, r1, r2
 8001cc8:	4013      	ands	r3, r2
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d182      	bne.n	8001bd4 <HAL_RCC_OscConfig+0xf2c>
 8001cce:	e037      	b.n	8001d40 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cd0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cd4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	699b      	ldr	r3, [r3, #24]
 8001cdc:	2b01      	cmp	r3, #1
 8001cde:	d101      	bne.n	8001ce4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001ce0:	2301      	movs	r3, #1
 8001ce2:	e02e      	b.n	8001d42 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001ce4:	4b19      	ldr	r3, [pc, #100]	; (8001d4c <HAL_RCC_OscConfig+0x10a4>)
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001cec:	4b17      	ldr	r3, [pc, #92]	; (8001d4c <HAL_RCC_OscConfig+0x10a4>)
 8001cee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001cf4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001cf8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	69db      	ldr	r3, [r3, #28]
 8001d08:	429a      	cmp	r2, r3
 8001d0a:	d117      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d0c:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d10:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d18:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d10b      	bne.n	8001d3c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d24:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d28:	f003 020f 	and.w	r2, r3, #15
 8001d2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d38:	429a      	cmp	r2, r3
 8001d3a:	d001      	beq.n	8001d40 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d3c:	2301      	movs	r3, #1
 8001d3e:	e000      	b.n	8001d42 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001d40:	2300      	movs	r3, #0
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d48:	46bd      	mov	sp, r7
 8001d4a:	bd80      	pop	{r7, pc}
 8001d4c:	40021000 	.word	0x40021000

08001d50 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b09e      	sub	sp, #120	; 0x78
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d101      	bne.n	8001d68 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d64:	2301      	movs	r3, #1
 8001d66:	e162      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d68:	4b90      	ldr	r3, [pc, #576]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d6a:	681b      	ldr	r3, [r3, #0]
 8001d6c:	f003 0307 	and.w	r3, r3, #7
 8001d70:	683a      	ldr	r2, [r7, #0]
 8001d72:	429a      	cmp	r2, r3
 8001d74:	d910      	bls.n	8001d98 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d76:	4b8d      	ldr	r3, [pc, #564]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f023 0207 	bic.w	r2, r3, #7
 8001d7e:	498b      	ldr	r1, [pc, #556]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d80:	683b      	ldr	r3, [r7, #0]
 8001d82:	4313      	orrs	r3, r2
 8001d84:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001d86:	4b89      	ldr	r3, [pc, #548]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 0307 	and.w	r3, r3, #7
 8001d8e:	683a      	ldr	r2, [r7, #0]
 8001d90:	429a      	cmp	r2, r3
 8001d92:	d001      	beq.n	8001d98 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001d94:	2301      	movs	r3, #1
 8001d96:	e14a      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	f003 0302 	and.w	r3, r3, #2
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d008      	beq.n	8001db6 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001da4:	4b82      	ldr	r3, [pc, #520]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	689b      	ldr	r3, [r3, #8]
 8001db0:	497f      	ldr	r1, [pc, #508]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001db2:	4313      	orrs	r3, r2
 8001db4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	f003 0301 	and.w	r3, r3, #1
 8001dbe:	2b00      	cmp	r3, #0
 8001dc0:	f000 80dc 	beq.w	8001f7c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	2b01      	cmp	r3, #1
 8001dca:	d13c      	bne.n	8001e46 <HAL_RCC_ClockConfig+0xf6>
 8001dcc:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dd0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dd2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001dd4:	fa93 f3a3 	rbit	r3, r3
 8001dd8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001dda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ddc:	fab3 f383 	clz	r3, r3
 8001de0:	b2db      	uxtb	r3, r3
 8001de2:	095b      	lsrs	r3, r3, #5
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	f043 0301 	orr.w	r3, r3, #1
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d102      	bne.n	8001df6 <HAL_RCC_ClockConfig+0xa6>
 8001df0:	4b6f      	ldr	r3, [pc, #444]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	e00f      	b.n	8001e16 <HAL_RCC_ClockConfig+0xc6>
 8001df6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfa:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001dfe:	fa93 f3a3 	rbit	r3, r3
 8001e02:	667b      	str	r3, [r7, #100]	; 0x64
 8001e04:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e08:	663b      	str	r3, [r7, #96]	; 0x60
 8001e0a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e0c:	fa93 f3a3 	rbit	r3, r3
 8001e10:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e12:	4b67      	ldr	r3, [pc, #412]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e16:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e1a:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e1c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e1e:	fa92 f2a2 	rbit	r2, r2
 8001e22:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e24:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e26:	fab2 f282 	clz	r2, r2
 8001e2a:	b2d2      	uxtb	r2, r2
 8001e2c:	f042 0220 	orr.w	r2, r2, #32
 8001e30:	b2d2      	uxtb	r2, r2
 8001e32:	f002 021f 	and.w	r2, r2, #31
 8001e36:	2101      	movs	r1, #1
 8001e38:	fa01 f202 	lsl.w	r2, r1, r2
 8001e3c:	4013      	ands	r3, r2
 8001e3e:	2b00      	cmp	r3, #0
 8001e40:	d17b      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e42:	2301      	movs	r3, #1
 8001e44:	e0f3      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	2b02      	cmp	r3, #2
 8001e4c:	d13c      	bne.n	8001ec8 <HAL_RCC_ClockConfig+0x178>
 8001e4e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e52:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e54:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e56:	fa93 f3a3 	rbit	r3, r3
 8001e5a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e5c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e5e:	fab3 f383 	clz	r3, r3
 8001e62:	b2db      	uxtb	r3, r3
 8001e64:	095b      	lsrs	r3, r3, #5
 8001e66:	b2db      	uxtb	r3, r3
 8001e68:	f043 0301 	orr.w	r3, r3, #1
 8001e6c:	b2db      	uxtb	r3, r3
 8001e6e:	2b01      	cmp	r3, #1
 8001e70:	d102      	bne.n	8001e78 <HAL_RCC_ClockConfig+0x128>
 8001e72:	4b4f      	ldr	r3, [pc, #316]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	e00f      	b.n	8001e98 <HAL_RCC_ClockConfig+0x148>
 8001e78:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e7e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001e80:	fa93 f3a3 	rbit	r3, r3
 8001e84:	647b      	str	r3, [r7, #68]	; 0x44
 8001e86:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e8a:	643b      	str	r3, [r7, #64]	; 0x40
 8001e8c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001e8e:	fa93 f3a3 	rbit	r3, r3
 8001e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001e94:	4b46      	ldr	r3, [pc, #280]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e98:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001e9c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001e9e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ea0:	fa92 f2a2 	rbit	r2, r2
 8001ea4:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ea6:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ea8:	fab2 f282 	clz	r2, r2
 8001eac:	b2d2      	uxtb	r2, r2
 8001eae:	f042 0220 	orr.w	r2, r2, #32
 8001eb2:	b2d2      	uxtb	r2, r2
 8001eb4:	f002 021f 	and.w	r2, r2, #31
 8001eb8:	2101      	movs	r1, #1
 8001eba:	fa01 f202 	lsl.w	r2, r1, r2
 8001ebe:	4013      	ands	r3, r2
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d13a      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ec4:	2301      	movs	r3, #1
 8001ec6:	e0b2      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
 8001ec8:	2302      	movs	r3, #2
 8001eca:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ecc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ece:	fa93 f3a3 	rbit	r3, r3
 8001ed2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001ed4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed6:	fab3 f383 	clz	r3, r3
 8001eda:	b2db      	uxtb	r3, r3
 8001edc:	095b      	lsrs	r3, r3, #5
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	f043 0301 	orr.w	r3, r3, #1
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	2b01      	cmp	r3, #1
 8001ee8:	d102      	bne.n	8001ef0 <HAL_RCC_ClockConfig+0x1a0>
 8001eea:	4b31      	ldr	r3, [pc, #196]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	e00d      	b.n	8001f0c <HAL_RCC_ClockConfig+0x1bc>
 8001ef0:	2302      	movs	r3, #2
 8001ef2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ef6:	fa93 f3a3 	rbit	r3, r3
 8001efa:	627b      	str	r3, [r7, #36]	; 0x24
 8001efc:	2302      	movs	r3, #2
 8001efe:	623b      	str	r3, [r7, #32]
 8001f00:	6a3b      	ldr	r3, [r7, #32]
 8001f02:	fa93 f3a3 	rbit	r3, r3
 8001f06:	61fb      	str	r3, [r7, #28]
 8001f08:	4b29      	ldr	r3, [pc, #164]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f0c:	2202      	movs	r2, #2
 8001f0e:	61ba      	str	r2, [r7, #24]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	fa92 f2a2 	rbit	r2, r2
 8001f16:	617a      	str	r2, [r7, #20]
  return result;
 8001f18:	697a      	ldr	r2, [r7, #20]
 8001f1a:	fab2 f282 	clz	r2, r2
 8001f1e:	b2d2      	uxtb	r2, r2
 8001f20:	f042 0220 	orr.w	r2, r2, #32
 8001f24:	b2d2      	uxtb	r2, r2
 8001f26:	f002 021f 	and.w	r2, r2, #31
 8001f2a:	2101      	movs	r1, #1
 8001f2c:	fa01 f202 	lsl.w	r2, r1, r2
 8001f30:	4013      	ands	r3, r2
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d101      	bne.n	8001f3a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e079      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f3a:	4b1d      	ldr	r3, [pc, #116]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f3c:	685b      	ldr	r3, [r3, #4]
 8001f3e:	f023 0203 	bic.w	r2, r3, #3
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	685b      	ldr	r3, [r3, #4]
 8001f46:	491a      	ldr	r1, [pc, #104]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f48:	4313      	orrs	r3, r2
 8001f4a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f4c:	f7fe fbec 	bl	8000728 <HAL_GetTick>
 8001f50:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f52:	e00a      	b.n	8001f6a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f54:	f7fe fbe8 	bl	8000728 <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f62:	4293      	cmp	r3, r2
 8001f64:	d901      	bls.n	8001f6a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f66:	2303      	movs	r3, #3
 8001f68:	e061      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f6a:	4b11      	ldr	r3, [pc, #68]	; (8001fb0 <HAL_RCC_ClockConfig+0x260>)
 8001f6c:	685b      	ldr	r3, [r3, #4]
 8001f6e:	f003 020c 	and.w	r2, r3, #12
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d1eb      	bne.n	8001f54 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f7c:	4b0b      	ldr	r3, [pc, #44]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f003 0307 	and.w	r3, r3, #7
 8001f84:	683a      	ldr	r2, [r7, #0]
 8001f86:	429a      	cmp	r2, r3
 8001f88:	d214      	bcs.n	8001fb4 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f8a:	4b08      	ldr	r3, [pc, #32]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f023 0207 	bic.w	r2, r3, #7
 8001f92:	4906      	ldr	r1, [pc, #24]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f94:	683b      	ldr	r3, [r7, #0]
 8001f96:	4313      	orrs	r3, r2
 8001f98:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f9a:	4b04      	ldr	r3, [pc, #16]	; (8001fac <HAL_RCC_ClockConfig+0x25c>)
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f003 0307 	and.w	r3, r3, #7
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d005      	beq.n	8001fb4 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	e040      	b.n	800202e <HAL_RCC_ClockConfig+0x2de>
 8001fac:	40022000 	.word	0x40022000
 8001fb0:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d008      	beq.n	8001fd2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fc0:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fc2:	685b      	ldr	r3, [r3, #4]
 8001fc4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68db      	ldr	r3, [r3, #12]
 8001fcc:	491a      	ldr	r1, [pc, #104]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fce:	4313      	orrs	r3, r2
 8001fd0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	f003 0308 	and.w	r3, r3, #8
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d009      	beq.n	8001ff2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fe0:	685b      	ldr	r3, [r3, #4]
 8001fe2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	691b      	ldr	r3, [r3, #16]
 8001fea:	00db      	lsls	r3, r3, #3
 8001fec:	4912      	ldr	r1, [pc, #72]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	4313      	orrs	r3, r2
 8001ff0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 8001ff2:	f000 f829 	bl	8002048 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4601      	mov	r1, r0
 8001ff8:	4b0f      	ldr	r3, [pc, #60]	; (8002038 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002000:	22f0      	movs	r2, #240	; 0xf0
 8002002:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002004:	693a      	ldr	r2, [r7, #16]
 8002006:	fa92 f2a2 	rbit	r2, r2
 800200a:	60fa      	str	r2, [r7, #12]
  return result;
 800200c:	68fa      	ldr	r2, [r7, #12]
 800200e:	fab2 f282 	clz	r2, r2
 8002012:	b2d2      	uxtb	r2, r2
 8002014:	40d3      	lsrs	r3, r2
 8002016:	4a09      	ldr	r2, [pc, #36]	; (800203c <HAL_RCC_ClockConfig+0x2ec>)
 8002018:	5cd3      	ldrb	r3, [r2, r3]
 800201a:	fa21 f303 	lsr.w	r3, r1, r3
 800201e:	4a08      	ldr	r2, [pc, #32]	; (8002040 <HAL_RCC_ClockConfig+0x2f0>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002022:	4b08      	ldr	r3, [pc, #32]	; (8002044 <HAL_RCC_ClockConfig+0x2f4>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fb3a 	bl	80006a0 <HAL_InitTick>
  
  return HAL_OK;
 800202c:	2300      	movs	r3, #0
}
 800202e:	4618      	mov	r0, r3
 8002030:	3778      	adds	r7, #120	; 0x78
 8002032:	46bd      	mov	sp, r7
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	40021000 	.word	0x40021000
 800203c:	080039cc 	.word	0x080039cc
 8002040:	20000000 	.word	0x20000000
 8002044:	20000004 	.word	0x20000004

08002048 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002048:	b480      	push	{r7}
 800204a:	b08b      	sub	sp, #44	; 0x2c
 800204c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
 8002052:	2300      	movs	r3, #0
 8002054:	61bb      	str	r3, [r7, #24]
 8002056:	2300      	movs	r3, #0
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
 800205a:	2300      	movs	r3, #0
 800205c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800205e:	2300      	movs	r3, #0
 8002060:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002062:	4b2a      	ldr	r3, [pc, #168]	; (800210c <HAL_RCC_GetSysClockFreq+0xc4>)
 8002064:	685b      	ldr	r3, [r3, #4]
 8002066:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	f003 030c 	and.w	r3, r3, #12
 800206e:	2b04      	cmp	r3, #4
 8002070:	d002      	beq.n	8002078 <HAL_RCC_GetSysClockFreq+0x30>
 8002072:	2b08      	cmp	r3, #8
 8002074:	d003      	beq.n	800207e <HAL_RCC_GetSysClockFreq+0x36>
 8002076:	e03f      	b.n	80020f8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002078:	4b25      	ldr	r3, [pc, #148]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc8>)
 800207a:	623b      	str	r3, [r7, #32]
      break;
 800207c:	e03f      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002084:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002088:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800208a:	68ba      	ldr	r2, [r7, #8]
 800208c:	fa92 f2a2 	rbit	r2, r2
 8002090:	607a      	str	r2, [r7, #4]
  return result;
 8002092:	687a      	ldr	r2, [r7, #4]
 8002094:	fab2 f282 	clz	r2, r2
 8002098:	b2d2      	uxtb	r2, r2
 800209a:	40d3      	lsrs	r3, r2
 800209c:	4a1d      	ldr	r2, [pc, #116]	; (8002114 <HAL_RCC_GetSysClockFreq+0xcc>)
 800209e:	5cd3      	ldrb	r3, [r2, r3]
 80020a0:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020a2:	4b1a      	ldr	r3, [pc, #104]	; (800210c <HAL_RCC_GetSysClockFreq+0xc4>)
 80020a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	220f      	movs	r2, #15
 80020ac:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020ae:	693a      	ldr	r2, [r7, #16]
 80020b0:	fa92 f2a2 	rbit	r2, r2
 80020b4:	60fa      	str	r2, [r7, #12]
  return result;
 80020b6:	68fa      	ldr	r2, [r7, #12]
 80020b8:	fab2 f282 	clz	r2, r2
 80020bc:	b2d2      	uxtb	r2, r2
 80020be:	40d3      	lsrs	r3, r2
 80020c0:	4a15      	ldr	r2, [pc, #84]	; (8002118 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020c2:	5cd3      	ldrb	r3, [r2, r3]
 80020c4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020c6:	69fb      	ldr	r3, [r7, #28]
 80020c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d008      	beq.n	80020e2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020d0:	4a0f      	ldr	r2, [pc, #60]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	fbb2 f2f3 	udiv	r2, r2, r3
 80020d8:	697b      	ldr	r3, [r7, #20]
 80020da:	fb02 f303 	mul.w	r3, r2, r3
 80020de:	627b      	str	r3, [r7, #36]	; 0x24
 80020e0:	e007      	b.n	80020f2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020e2:	4a0b      	ldr	r2, [pc, #44]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020e4:	69bb      	ldr	r3, [r7, #24]
 80020e6:	fbb2 f2f3 	udiv	r2, r2, r3
 80020ea:	697b      	ldr	r3, [r7, #20]
 80020ec:	fb02 f303 	mul.w	r3, r2, r3
 80020f0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80020f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f4:	623b      	str	r3, [r7, #32]
      break;
 80020f6:	e002      	b.n	80020fe <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <HAL_RCC_GetSysClockFreq+0xc8>)
 80020fa:	623b      	str	r3, [r7, #32]
      break;
 80020fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80020fe:	6a3b      	ldr	r3, [r7, #32]
}
 8002100:	4618      	mov	r0, r3
 8002102:	372c      	adds	r7, #44	; 0x2c
 8002104:	46bd      	mov	sp, r7
 8002106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800210a:	4770      	bx	lr
 800210c:	40021000 	.word	0x40021000
 8002110:	007a1200 	.word	0x007a1200
 8002114:	080039dc 	.word	0x080039dc
 8002118:	080039ec 	.word	0x080039ec

0800211c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800211c:	b580      	push	{r7, lr}
 800211e:	b092      	sub	sp, #72	; 0x48
 8002120:	af00      	add	r7, sp, #0
 8002122:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002124:	2300      	movs	r3, #0
 8002126:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002128:	2300      	movs	r3, #0
 800212a:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 800212c:	2300      	movs	r3, #0
 800212e:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800213a:	2b00      	cmp	r3, #0
 800213c:	f000 80d4 	beq.w	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002140:	4b4e      	ldr	r3, [pc, #312]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002142:	69db      	ldr	r3, [r3, #28]
 8002144:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002148:	2b00      	cmp	r3, #0
 800214a:	d10e      	bne.n	800216a <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800214c:	4b4b      	ldr	r3, [pc, #300]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800214e:	69db      	ldr	r3, [r3, #28]
 8002150:	4a4a      	ldr	r2, [pc, #296]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002152:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002156:	61d3      	str	r3, [r2, #28]
 8002158:	4b48      	ldr	r3, [pc, #288]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800215a:	69db      	ldr	r3, [r3, #28]
 800215c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002160:	60bb      	str	r3, [r7, #8]
 8002162:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002164:	2301      	movs	r3, #1
 8002166:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216a:	4b45      	ldr	r3, [pc, #276]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800216c:	681b      	ldr	r3, [r3, #0]
 800216e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002172:	2b00      	cmp	r3, #0
 8002174:	d118      	bne.n	80021a8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002176:	4b42      	ldr	r3, [pc, #264]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	4a41      	ldr	r2, [pc, #260]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800217c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002180:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002182:	f7fe fad1 	bl	8000728 <HAL_GetTick>
 8002186:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002188:	e008      	b.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218a:	f7fe facd 	bl	8000728 <HAL_GetTick>
 800218e:	4602      	mov	r2, r0
 8002190:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002192:	1ad3      	subs	r3, r2, r3
 8002194:	2b64      	cmp	r3, #100	; 0x64
 8002196:	d901      	bls.n	800219c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002198:	2303      	movs	r3, #3
 800219a:	e1d6      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800219c:	4b38      	ldr	r3, [pc, #224]	; (8002280 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d0f0      	beq.n	800218a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021a8:	4b34      	ldr	r3, [pc, #208]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021aa:	6a1b      	ldr	r3, [r3, #32]
 80021ac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021b0:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021b2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f000 8084 	beq.w	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	685b      	ldr	r3, [r3, #4]
 80021be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021c2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021c4:	429a      	cmp	r2, r3
 80021c6:	d07c      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021c8:	4b2c      	ldr	r3, [pc, #176]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021ca:	6a1b      	ldr	r3, [r3, #32]
 80021cc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021d0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021d2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021d6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021d8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80021da:	fa93 f3a3 	rbit	r3, r3
 80021de:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 80021e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021e2:	fab3 f383 	clz	r3, r3
 80021e6:	b2db      	uxtb	r3, r3
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b26      	ldr	r3, [pc, #152]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 80021ec:	4413      	add	r3, r2
 80021ee:	009b      	lsls	r3, r3, #2
 80021f0:	461a      	mov	r2, r3
 80021f2:	2301      	movs	r3, #1
 80021f4:	6013      	str	r3, [r2, #0]
 80021f6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80021fe:	fa93 f3a3 	rbit	r3, r3
 8002202:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002204:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002206:	fab3 f383 	clz	r3, r3
 800220a:	b2db      	uxtb	r3, r3
 800220c:	461a      	mov	r2, r3
 800220e:	4b1d      	ldr	r3, [pc, #116]	; (8002284 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002210:	4413      	add	r3, r2
 8002212:	009b      	lsls	r3, r3, #2
 8002214:	461a      	mov	r2, r3
 8002216:	2300      	movs	r3, #0
 8002218:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800221a:	4a18      	ldr	r2, [pc, #96]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800221c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800221e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8002220:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002222:	f003 0301 	and.w	r3, r3, #1
 8002226:	2b00      	cmp	r3, #0
 8002228:	d04b      	beq.n	80022c2 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800222a:	f7fe fa7d 	bl	8000728 <HAL_GetTick>
 800222e:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002230:	e00a      	b.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002232:	f7fe fa79 	bl	8000728 <HAL_GetTick>
 8002236:	4602      	mov	r2, r0
 8002238:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800223a:	1ad3      	subs	r3, r2, r3
 800223c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002240:	4293      	cmp	r3, r2
 8002242:	d901      	bls.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002244:	2303      	movs	r3, #3
 8002246:	e180      	b.n	800254a <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002248:	2302      	movs	r3, #2
 800224a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800224c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800224e:	fa93 f3a3 	rbit	r3, r3
 8002252:	627b      	str	r3, [r7, #36]	; 0x24
 8002254:	2302      	movs	r3, #2
 8002256:	623b      	str	r3, [r7, #32]
 8002258:	6a3b      	ldr	r3, [r7, #32]
 800225a:	fa93 f3a3 	rbit	r3, r3
 800225e:	61fb      	str	r3, [r7, #28]
  return result;
 8002260:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002262:	fab3 f383 	clz	r3, r3
 8002266:	b2db      	uxtb	r3, r3
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	b2db      	uxtb	r3, r3
 800226c:	f043 0302 	orr.w	r3, r3, #2
 8002270:	b2db      	uxtb	r3, r3
 8002272:	2b02      	cmp	r3, #2
 8002274:	d108      	bne.n	8002288 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8002276:	4b01      	ldr	r3, [pc, #4]	; (800227c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002278:	6a1b      	ldr	r3, [r3, #32]
 800227a:	e00d      	b.n	8002298 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 800227c:	40021000 	.word	0x40021000
 8002280:	40007000 	.word	0x40007000
 8002284:	10908100 	.word	0x10908100
 8002288:	2302      	movs	r3, #2
 800228a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800228c:	69bb      	ldr	r3, [r7, #24]
 800228e:	fa93 f3a3 	rbit	r3, r3
 8002292:	617b      	str	r3, [r7, #20]
 8002294:	4b9a      	ldr	r3, [pc, #616]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002296:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002298:	2202      	movs	r2, #2
 800229a:	613a      	str	r2, [r7, #16]
 800229c:	693a      	ldr	r2, [r7, #16]
 800229e:	fa92 f2a2 	rbit	r2, r2
 80022a2:	60fa      	str	r2, [r7, #12]
  return result;
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	fab2 f282 	clz	r2, r2
 80022aa:	b2d2      	uxtb	r2, r2
 80022ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022b0:	b2d2      	uxtb	r2, r2
 80022b2:	f002 021f 	and.w	r2, r2, #31
 80022b6:	2101      	movs	r1, #1
 80022b8:	fa01 f202 	lsl.w	r2, r1, r2
 80022bc:	4013      	ands	r3, r2
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0b7      	beq.n	8002232 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022c2:	4b8f      	ldr	r3, [pc, #572]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022c4:	6a1b      	ldr	r3, [r3, #32]
 80022c6:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	685b      	ldr	r3, [r3, #4]
 80022ce:	498c      	ldr	r1, [pc, #560]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022d0:	4313      	orrs	r3, r2
 80022d2:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80022d4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d105      	bne.n	80022e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022dc:	4b88      	ldr	r3, [pc, #544]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022de:	69db      	ldr	r3, [r3, #28]
 80022e0:	4a87      	ldr	r2, [pc, #540]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022e2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022e6:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	f003 0301 	and.w	r3, r3, #1
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d008      	beq.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80022f4:	4b82      	ldr	r3, [pc, #520]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022f8:	f023 0203 	bic.w	r2, r3, #3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	689b      	ldr	r3, [r3, #8]
 8002300:	497f      	ldr	r1, [pc, #508]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002302:	4313      	orrs	r3, r2
 8002304:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f003 0302 	and.w	r3, r3, #2
 800230e:	2b00      	cmp	r3, #0
 8002310:	d008      	beq.n	8002324 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002312:	4b7b      	ldr	r3, [pc, #492]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002314:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002316:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	68db      	ldr	r3, [r3, #12]
 800231e:	4978      	ldr	r1, [pc, #480]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002320:	4313      	orrs	r3, r2
 8002322:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	f003 0304 	and.w	r3, r3, #4
 800232c:	2b00      	cmp	r3, #0
 800232e:	d008      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002330:	4b73      	ldr	r3, [pc, #460]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002334:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	691b      	ldr	r3, [r3, #16]
 800233c:	4970      	ldr	r1, [pc, #448]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800233e:	4313      	orrs	r3, r2
 8002340:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f003 0320 	and.w	r3, r3, #32
 800234a:	2b00      	cmp	r3, #0
 800234c:	d008      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800234e:	4b6c      	ldr	r3, [pc, #432]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f023 0210 	bic.w	r2, r3, #16
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	69db      	ldr	r3, [r3, #28]
 800235a:	4969      	ldr	r1, [pc, #420]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800235c:	4313      	orrs	r3, r2
 800235e:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d008      	beq.n	800237e <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 800236c:	4b64      	ldr	r3, [pc, #400]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002378:	4961      	ldr	r1, [pc, #388]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800237a:	4313      	orrs	r3, r2
 800237c:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002386:	2b00      	cmp	r3, #0
 8002388:	d008      	beq.n	800239c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800238a:	4b5d      	ldr	r3, [pc, #372]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800238c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800238e:	f023 0220 	bic.w	r2, r3, #32
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	6a1b      	ldr	r3, [r3, #32]
 8002396:	495a      	ldr	r1, [pc, #360]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002398:	4313      	orrs	r3, r2
 800239a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d008      	beq.n	80023ba <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023a8:	4b55      	ldr	r3, [pc, #340]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ac:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023b4:	4952      	ldr	r1, [pc, #328]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	681b      	ldr	r3, [r3, #0]
 80023be:	f003 0308 	and.w	r3, r3, #8
 80023c2:	2b00      	cmp	r3, #0
 80023c4:	d008      	beq.n	80023d8 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023c6:	4b4e      	ldr	r3, [pc, #312]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	695b      	ldr	r3, [r3, #20]
 80023d2:	494b      	ldr	r1, [pc, #300]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d4:	4313      	orrs	r3, r2
 80023d6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f003 0310 	and.w	r3, r3, #16
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d008      	beq.n	80023f6 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80023e4:	4b46      	ldr	r3, [pc, #280]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023e8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	699b      	ldr	r3, [r3, #24]
 80023f0:	4943      	ldr	r1, [pc, #268]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023f2:	4313      	orrs	r3, r2
 80023f4:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d008      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002402:	4b3f      	ldr	r3, [pc, #252]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800240e:	493c      	ldr	r1, [pc, #240]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002410:	4313      	orrs	r3, r2
 8002412:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800241c:	2b00      	cmp	r3, #0
 800241e:	d008      	beq.n	8002432 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8002420:	4b37      	ldr	r3, [pc, #220]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002422:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002424:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800242c:	4934      	ldr	r1, [pc, #208]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800242e:	4313      	orrs	r3, r2
 8002430:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	2b00      	cmp	r3, #0
 800243c:	d008      	beq.n	8002450 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800243e:	4b30      	ldr	r3, [pc, #192]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002440:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002442:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800244a:	492d      	ldr	r1, [pc, #180]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244c:	4313      	orrs	r3, r2
 800244e:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002458:	2b00      	cmp	r3, #0
 800245a:	d008      	beq.n	800246e <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 800245c:	4b28      	ldr	r3, [pc, #160]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002460:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002468:	4925      	ldr	r1, [pc, #148]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800246a:	4313      	orrs	r3, r2
 800246c:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d008      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 800247a:	4b21      	ldr	r3, [pc, #132]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800247c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800247e:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002486:	491e      	ldr	r1, [pc, #120]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002488:	4313      	orrs	r3, r2
 800248a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d008      	beq.n	80024aa <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002498:	4b19      	ldr	r3, [pc, #100]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800249a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024a4:	4916      	ldr	r1, [pc, #88]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a6:	4313      	orrs	r3, r2
 80024a8:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d008      	beq.n	80024c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024b6:	4b12      	ldr	r3, [pc, #72]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024c2:	490f      	ldr	r1, [pc, #60]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c4:	4313      	orrs	r3, r2
 80024c6:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d008      	beq.n	80024e6 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80024d4:	4b0a      	ldr	r3, [pc, #40]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d8:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024e0:	4907      	ldr	r1, [pc, #28]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d00c      	beq.n	800250c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 80024f2:	4b03      	ldr	r3, [pc, #12]	; (8002500 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	e002      	b.n	8002504 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 80024fe:	bf00      	nop
 8002500:	40021000 	.word	0x40021000
 8002504:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002506:	4913      	ldr	r1, [pc, #76]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002508:	4313      	orrs	r3, r2
 800250a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d008      	beq.n	800252a <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002518:	4b0e      	ldr	r3, [pc, #56]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800251a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800251c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002524:	490b      	ldr	r1, [pc, #44]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002526:	4313      	orrs	r3, r2
 8002528:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	681b      	ldr	r3, [r3, #0]
 800252e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002532:	2b00      	cmp	r3, #0
 8002534:	d008      	beq.n	8002548 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002536:	4b07      	ldr	r3, [pc, #28]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800253a:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002542:	4904      	ldr	r1, [pc, #16]	; (8002554 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002544:	4313      	orrs	r3, r2
 8002546:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002548:	2300      	movs	r3, #0
}
 800254a:	4618      	mov	r0, r3
 800254c:	3748      	adds	r7, #72	; 0x48
 800254e:	46bd      	mov	sp, r7
 8002550:	bd80      	pop	{r7, pc}
 8002552:	bf00      	nop
 8002554:	40021000 	.word	0x40021000

08002558 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b082      	sub	sp, #8
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	2b00      	cmp	r3, #0
 8002564:	d101      	bne.n	800256a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002566:	2301      	movs	r3, #1
 8002568:	e049      	b.n	80025fe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fd ffb0 	bl	80004e4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2202      	movs	r2, #2
 8002588:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	681a      	ldr	r2, [r3, #0]
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	3304      	adds	r3, #4
 8002594:	4619      	mov	r1, r3
 8002596:	4610      	mov	r0, r2
 8002598:	f000 fcd2 	bl	8002f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2201      	movs	r2, #1
 80025a0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	2201      	movs	r2, #1
 80025a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	2201      	movs	r2, #1
 80025b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2201      	movs	r2, #1
 80025b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	2201      	movs	r2, #1
 80025c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	2201      	movs	r2, #1
 80025c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2201      	movs	r2, #1
 80025d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	2201      	movs	r2, #1
 80025d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	2201      	movs	r2, #1
 80025e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2201      	movs	r2, #1
 80025e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2201      	movs	r2, #1
 80025f0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2201      	movs	r2, #1
 80025f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80025fc:	2300      	movs	r3, #0
}
 80025fe:	4618      	mov	r0, r3
 8002600:	3708      	adds	r7, #8
 8002602:	46bd      	mov	sp, r7
 8002604:	bd80      	pop	{r7, pc}

08002606 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002606:	b580      	push	{r7, lr}
 8002608:	b082      	sub	sp, #8
 800260a:	af00      	add	r7, sp, #0
 800260c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	2b00      	cmp	r3, #0
 8002612:	d101      	bne.n	8002618 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002614:	2301      	movs	r3, #1
 8002616:	e049      	b.n	80026ac <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800261e:	b2db      	uxtb	r3, r3
 8002620:	2b00      	cmp	r3, #0
 8002622:	d106      	bne.n	8002632 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	2200      	movs	r2, #0
 8002628:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800262c:	6878      	ldr	r0, [r7, #4]
 800262e:	f000 f841 	bl	80026b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	2202      	movs	r2, #2
 8002636:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681a      	ldr	r2, [r3, #0]
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	3304      	adds	r3, #4
 8002642:	4619      	mov	r1, r3
 8002644:	4610      	mov	r0, r2
 8002646:	f000 fc7b 	bl	8002f40 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	2201      	movs	r2, #1
 800264e:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	2201      	movs	r2, #1
 8002656:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	2201      	movs	r2, #1
 800265e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	2201      	movs	r2, #1
 8002666:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	2201      	movs	r2, #1
 800266e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2201      	movs	r2, #1
 8002676:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2201      	movs	r2, #1
 800267e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2201      	movs	r2, #1
 8002686:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2201      	movs	r2, #1
 800268e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	2201      	movs	r2, #1
 8002696:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2201      	movs	r2, #1
 800269e:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2201      	movs	r2, #1
 80026a6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80026aa:	2300      	movs	r3, #0
}
 80026ac:	4618      	mov	r0, r3
 80026ae:	3708      	adds	r7, #8
 80026b0:	46bd      	mov	sp, r7
 80026b2:	bd80      	pop	{r7, pc}

080026b4 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80026b4:	b480      	push	{r7}
 80026b6:	b083      	sub	sp, #12
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80026bc:	bf00      	nop
 80026be:	370c      	adds	r7, #12
 80026c0:	46bd      	mov	sp, r7
 80026c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c6:	4770      	bx	lr

080026c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80026c8:	b580      	push	{r7, lr}
 80026ca:	b084      	sub	sp, #16
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d109      	bne.n	80026ec <HAL_TIM_PWM_Start+0x24>
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b01      	cmp	r3, #1
 80026e2:	bf14      	ite	ne
 80026e4:	2301      	movne	r3, #1
 80026e6:	2300      	moveq	r3, #0
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	e03c      	b.n	8002766 <HAL_TIM_PWM_Start+0x9e>
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	2b04      	cmp	r3, #4
 80026f0:	d109      	bne.n	8002706 <HAL_TIM_PWM_Start+0x3e>
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80026f8:	b2db      	uxtb	r3, r3
 80026fa:	2b01      	cmp	r3, #1
 80026fc:	bf14      	ite	ne
 80026fe:	2301      	movne	r3, #1
 8002700:	2300      	moveq	r3, #0
 8002702:	b2db      	uxtb	r3, r3
 8002704:	e02f      	b.n	8002766 <HAL_TIM_PWM_Start+0x9e>
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	2b08      	cmp	r3, #8
 800270a:	d109      	bne.n	8002720 <HAL_TIM_PWM_Start+0x58>
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002712:	b2db      	uxtb	r3, r3
 8002714:	2b01      	cmp	r3, #1
 8002716:	bf14      	ite	ne
 8002718:	2301      	movne	r3, #1
 800271a:	2300      	moveq	r3, #0
 800271c:	b2db      	uxtb	r3, r3
 800271e:	e022      	b.n	8002766 <HAL_TIM_PWM_Start+0x9e>
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	2b0c      	cmp	r3, #12
 8002724:	d109      	bne.n	800273a <HAL_TIM_PWM_Start+0x72>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800272c:	b2db      	uxtb	r3, r3
 800272e:	2b01      	cmp	r3, #1
 8002730:	bf14      	ite	ne
 8002732:	2301      	movne	r3, #1
 8002734:	2300      	moveq	r3, #0
 8002736:	b2db      	uxtb	r3, r3
 8002738:	e015      	b.n	8002766 <HAL_TIM_PWM_Start+0x9e>
 800273a:	683b      	ldr	r3, [r7, #0]
 800273c:	2b10      	cmp	r3, #16
 800273e:	d109      	bne.n	8002754 <HAL_TIM_PWM_Start+0x8c>
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002746:	b2db      	uxtb	r3, r3
 8002748:	2b01      	cmp	r3, #1
 800274a:	bf14      	ite	ne
 800274c:	2301      	movne	r3, #1
 800274e:	2300      	moveq	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e008      	b.n	8002766 <HAL_TIM_PWM_Start+0x9e>
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800275a:	b2db      	uxtb	r3, r3
 800275c:	2b01      	cmp	r3, #1
 800275e:	bf14      	ite	ne
 8002760:	2301      	movne	r3, #1
 8002762:	2300      	moveq	r3, #0
 8002764:	b2db      	uxtb	r3, r3
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0a1      	b.n	80028b2 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	2b00      	cmp	r3, #0
 8002772:	d104      	bne.n	800277e <HAL_TIM_PWM_Start+0xb6>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2202      	movs	r2, #2
 8002778:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800277c:	e023      	b.n	80027c6 <HAL_TIM_PWM_Start+0xfe>
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	2b04      	cmp	r3, #4
 8002782:	d104      	bne.n	800278e <HAL_TIM_PWM_Start+0xc6>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2202      	movs	r2, #2
 8002788:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800278c:	e01b      	b.n	80027c6 <HAL_TIM_PWM_Start+0xfe>
 800278e:	683b      	ldr	r3, [r7, #0]
 8002790:	2b08      	cmp	r3, #8
 8002792:	d104      	bne.n	800279e <HAL_TIM_PWM_Start+0xd6>
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2202      	movs	r2, #2
 8002798:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800279c:	e013      	b.n	80027c6 <HAL_TIM_PWM_Start+0xfe>
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	2b0c      	cmp	r3, #12
 80027a2:	d104      	bne.n	80027ae <HAL_TIM_PWM_Start+0xe6>
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	2202      	movs	r2, #2
 80027a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80027ac:	e00b      	b.n	80027c6 <HAL_TIM_PWM_Start+0xfe>
 80027ae:	683b      	ldr	r3, [r7, #0]
 80027b0:	2b10      	cmp	r3, #16
 80027b2:	d104      	bne.n	80027be <HAL_TIM_PWM_Start+0xf6>
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	2202      	movs	r2, #2
 80027b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027bc:	e003      	b.n	80027c6 <HAL_TIM_PWM_Start+0xfe>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2202      	movs	r2, #2
 80027c2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2201      	movs	r2, #1
 80027cc:	6839      	ldr	r1, [r7, #0]
 80027ce:	4618      	mov	r0, r3
 80027d0:	f000 fff4 	bl	80037bc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a38      	ldr	r2, [pc, #224]	; (80028bc <HAL_TIM_PWM_Start+0x1f4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d018      	beq.n	8002810 <HAL_TIM_PWM_Start+0x148>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	4a37      	ldr	r2, [pc, #220]	; (80028c0 <HAL_TIM_PWM_Start+0x1f8>)
 80027e4:	4293      	cmp	r3, r2
 80027e6:	d013      	beq.n	8002810 <HAL_TIM_PWM_Start+0x148>
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a35      	ldr	r2, [pc, #212]	; (80028c4 <HAL_TIM_PWM_Start+0x1fc>)
 80027ee:	4293      	cmp	r3, r2
 80027f0:	d00e      	beq.n	8002810 <HAL_TIM_PWM_Start+0x148>
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4a34      	ldr	r2, [pc, #208]	; (80028c8 <HAL_TIM_PWM_Start+0x200>)
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d009      	beq.n	8002810 <HAL_TIM_PWM_Start+0x148>
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a32      	ldr	r2, [pc, #200]	; (80028cc <HAL_TIM_PWM_Start+0x204>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d004      	beq.n	8002810 <HAL_TIM_PWM_Start+0x148>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a31      	ldr	r2, [pc, #196]	; (80028d0 <HAL_TIM_PWM_Start+0x208>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d101      	bne.n	8002814 <HAL_TIM_PWM_Start+0x14c>
 8002810:	2301      	movs	r3, #1
 8002812:	e000      	b.n	8002816 <HAL_TIM_PWM_Start+0x14e>
 8002814:	2300      	movs	r3, #0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d007      	beq.n	800282a <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002828:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a23      	ldr	r2, [pc, #140]	; (80028bc <HAL_TIM_PWM_Start+0x1f4>)
 8002830:	4293      	cmp	r3, r2
 8002832:	d01d      	beq.n	8002870 <HAL_TIM_PWM_Start+0x1a8>
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800283c:	d018      	beq.n	8002870 <HAL_TIM_PWM_Start+0x1a8>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a24      	ldr	r2, [pc, #144]	; (80028d4 <HAL_TIM_PWM_Start+0x20c>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d013      	beq.n	8002870 <HAL_TIM_PWM_Start+0x1a8>
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	4a22      	ldr	r2, [pc, #136]	; (80028d8 <HAL_TIM_PWM_Start+0x210>)
 800284e:	4293      	cmp	r3, r2
 8002850:	d00e      	beq.n	8002870 <HAL_TIM_PWM_Start+0x1a8>
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4a1a      	ldr	r2, [pc, #104]	; (80028c0 <HAL_TIM_PWM_Start+0x1f8>)
 8002858:	4293      	cmp	r3, r2
 800285a:	d009      	beq.n	8002870 <HAL_TIM_PWM_Start+0x1a8>
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a18      	ldr	r2, [pc, #96]	; (80028c4 <HAL_TIM_PWM_Start+0x1fc>)
 8002862:	4293      	cmp	r3, r2
 8002864:	d004      	beq.n	8002870 <HAL_TIM_PWM_Start+0x1a8>
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	4a19      	ldr	r2, [pc, #100]	; (80028d0 <HAL_TIM_PWM_Start+0x208>)
 800286c:	4293      	cmp	r3, r2
 800286e:	d115      	bne.n	800289c <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	689a      	ldr	r2, [r3, #8]
 8002876:	4b19      	ldr	r3, [pc, #100]	; (80028dc <HAL_TIM_PWM_Start+0x214>)
 8002878:	4013      	ands	r3, r2
 800287a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2b06      	cmp	r3, #6
 8002880:	d015      	beq.n	80028ae <HAL_TIM_PWM_Start+0x1e6>
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002888:	d011      	beq.n	80028ae <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	681a      	ldr	r2, [r3, #0]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	f042 0201 	orr.w	r2, r2, #1
 8002898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800289a:	e008      	b.n	80028ae <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f042 0201 	orr.w	r2, r2, #1
 80028aa:	601a      	str	r2, [r3, #0]
 80028ac:	e000      	b.n	80028b0 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80028ae:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	3710      	adds	r7, #16
 80028b6:	46bd      	mov	sp, r7
 80028b8:	bd80      	pop	{r7, pc}
 80028ba:	bf00      	nop
 80028bc:	40012c00 	.word	0x40012c00
 80028c0:	40013400 	.word	0x40013400
 80028c4:	40014000 	.word	0x40014000
 80028c8:	40014400 	.word	0x40014400
 80028cc:	40014800 	.word	0x40014800
 80028d0:	40015000 	.word	0x40015000
 80028d4:	40000400 	.word	0x40000400
 80028d8:	40000800 	.word	0x40000800
 80028dc:	00010007 	.word	0x00010007

080028e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	f003 0302 	and.w	r3, r3, #2
 80028f2:	2b02      	cmp	r3, #2
 80028f4:	d122      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	68db      	ldr	r3, [r3, #12]
 80028fc:	f003 0302 	and.w	r3, r3, #2
 8002900:	2b02      	cmp	r3, #2
 8002902:	d11b      	bne.n	800293c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	f06f 0202 	mvn.w	r2, #2
 800290c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	2201      	movs	r2, #1
 8002912:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	699b      	ldr	r3, [r3, #24]
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	2b00      	cmp	r3, #0
 8002920:	d003      	beq.n	800292a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f000 faed 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002928:	e005      	b.n	8002936 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fadf 	bl	8002eee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002930:	6878      	ldr	r0, [r7, #4]
 8002932:	f000 faf0 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	2200      	movs	r2, #0
 800293a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	691b      	ldr	r3, [r3, #16]
 8002942:	f003 0304 	and.w	r3, r3, #4
 8002946:	2b04      	cmp	r3, #4
 8002948:	d122      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	68db      	ldr	r3, [r3, #12]
 8002950:	f003 0304 	and.w	r3, r3, #4
 8002954:	2b04      	cmp	r3, #4
 8002956:	d11b      	bne.n	8002990 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f06f 0204 	mvn.w	r2, #4
 8002960:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	2202      	movs	r2, #2
 8002966:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	699b      	ldr	r3, [r3, #24]
 800296e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002972:	2b00      	cmp	r3, #0
 8002974:	d003      	beq.n	800297e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002976:	6878      	ldr	r0, [r7, #4]
 8002978:	f000 fac3 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 800297c:	e005      	b.n	800298a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f000 fab5 	bl	8002eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 fac6 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	2200      	movs	r2, #0
 800298e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	f003 0308 	and.w	r3, r3, #8
 800299a:	2b08      	cmp	r3, #8
 800299c:	d122      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68db      	ldr	r3, [r3, #12]
 80029a4:	f003 0308 	and.w	r3, r3, #8
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d11b      	bne.n	80029e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f06f 0208 	mvn.w	r2, #8
 80029b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	2204      	movs	r2, #4
 80029ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	69db      	ldr	r3, [r3, #28]
 80029c2:	f003 0303 	and.w	r3, r3, #3
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d003      	beq.n	80029d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80029ca:	6878      	ldr	r0, [r7, #4]
 80029cc:	f000 fa99 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 80029d0:	e005      	b.n	80029de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80029d2:	6878      	ldr	r0, [r7, #4]
 80029d4:	f000 fa8b 	bl	8002eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80029d8:	6878      	ldr	r0, [r7, #4]
 80029da:	f000 fa9c 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	691b      	ldr	r3, [r3, #16]
 80029ea:	f003 0310 	and.w	r3, r3, #16
 80029ee:	2b10      	cmp	r3, #16
 80029f0:	d122      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	68db      	ldr	r3, [r3, #12]
 80029f8:	f003 0310 	and.w	r3, r3, #16
 80029fc:	2b10      	cmp	r3, #16
 80029fe:	d11b      	bne.n	8002a38 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	f06f 0210 	mvn.w	r2, #16
 8002a08:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2208      	movs	r2, #8
 8002a0e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	69db      	ldr	r3, [r3, #28]
 8002a16:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d003      	beq.n	8002a26 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002a1e:	6878      	ldr	r0, [r7, #4]
 8002a20:	f000 fa6f 	bl	8002f02 <HAL_TIM_IC_CaptureCallback>
 8002a24:	e005      	b.n	8002a32 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002a26:	6878      	ldr	r0, [r7, #4]
 8002a28:	f000 fa61 	bl	8002eee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002a2c:	6878      	ldr	r0, [r7, #4]
 8002a2e:	f000 fa72 	bl	8002f16 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2200      	movs	r2, #0
 8002a36:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	691b      	ldr	r3, [r3, #16]
 8002a3e:	f003 0301 	and.w	r3, r3, #1
 8002a42:	2b01      	cmp	r3, #1
 8002a44:	d10e      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	68db      	ldr	r3, [r3, #12]
 8002a4c:	f003 0301 	and.w	r3, r3, #1
 8002a50:	2b01      	cmp	r3, #1
 8002a52:	d107      	bne.n	8002a64 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	f06f 0201 	mvn.w	r2, #1
 8002a5c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fa3b 	bl	8002eda <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	691b      	ldr	r3, [r3, #16]
 8002a6a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a6e:	2b80      	cmp	r3, #128	; 0x80
 8002a70:	d10e      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002a7c:	2b80      	cmp	r3, #128	; 0x80
 8002a7e:	d107      	bne.n	8002a90 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	681b      	ldr	r3, [r3, #0]
 8002a84:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002a88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f000 ff52 	bl	8003934 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002a9e:	d10e      	bne.n	8002abe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	68db      	ldr	r3, [r3, #12]
 8002aa6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aaa:	2b80      	cmp	r3, #128	; 0x80
 8002aac:	d107      	bne.n	8002abe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002ab6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002ab8:	6878      	ldr	r0, [r7, #4]
 8002aba:	f000 ff45 	bl	8003948 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	691b      	ldr	r3, [r3, #16]
 8002ac4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ac8:	2b40      	cmp	r3, #64	; 0x40
 8002aca:	d10e      	bne.n	8002aea <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	68db      	ldr	r3, [r3, #12]
 8002ad2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad6:	2b40      	cmp	r3, #64	; 0x40
 8002ad8:	d107      	bne.n	8002aea <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ae2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ae4:	6878      	ldr	r0, [r7, #4]
 8002ae6:	f000 fa20 	bl	8002f2a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	691b      	ldr	r3, [r3, #16]
 8002af0:	f003 0320 	and.w	r3, r3, #32
 8002af4:	2b20      	cmp	r3, #32
 8002af6:	d10e      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f003 0320 	and.w	r3, r3, #32
 8002b02:	2b20      	cmp	r3, #32
 8002b04:	d107      	bne.n	8002b16 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f06f 0220 	mvn.w	r2, #32
 8002b0e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002b10:	6878      	ldr	r0, [r7, #4]
 8002b12:	f000 ff05 	bl	8003920 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002b16:	bf00      	nop
 8002b18:	3708      	adds	r7, #8
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
	...

08002b20 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b086      	sub	sp, #24
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	60f8      	str	r0, [r7, #12]
 8002b28:	60b9      	str	r1, [r7, #8]
 8002b2a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b30:	68fb      	ldr	r3, [r7, #12]
 8002b32:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b36:	2b01      	cmp	r3, #1
 8002b38:	d101      	bne.n	8002b3e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002b3a:	2302      	movs	r3, #2
 8002b3c:	e0ff      	b.n	8002d3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	2201      	movs	r2, #1
 8002b42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b14      	cmp	r3, #20
 8002b4a:	f200 80f0 	bhi.w	8002d2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002b4e:	a201      	add	r2, pc, #4	; (adr r2, 8002b54 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002b50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b54:	08002ba9 	.word	0x08002ba9
 8002b58:	08002d2f 	.word	0x08002d2f
 8002b5c:	08002d2f 	.word	0x08002d2f
 8002b60:	08002d2f 	.word	0x08002d2f
 8002b64:	08002be9 	.word	0x08002be9
 8002b68:	08002d2f 	.word	0x08002d2f
 8002b6c:	08002d2f 	.word	0x08002d2f
 8002b70:	08002d2f 	.word	0x08002d2f
 8002b74:	08002c2b 	.word	0x08002c2b
 8002b78:	08002d2f 	.word	0x08002d2f
 8002b7c:	08002d2f 	.word	0x08002d2f
 8002b80:	08002d2f 	.word	0x08002d2f
 8002b84:	08002c6b 	.word	0x08002c6b
 8002b88:	08002d2f 	.word	0x08002d2f
 8002b8c:	08002d2f 	.word	0x08002d2f
 8002b90:	08002d2f 	.word	0x08002d2f
 8002b94:	08002cad 	.word	0x08002cad
 8002b98:	08002d2f 	.word	0x08002d2f
 8002b9c:	08002d2f 	.word	0x08002d2f
 8002ba0:	08002d2f 	.word	0x08002d2f
 8002ba4:	08002ced 	.word	0x08002ced
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	68b9      	ldr	r1, [r7, #8]
 8002bae:	4618      	mov	r0, r3
 8002bb0:	f000 fa64 	bl	800307c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	699a      	ldr	r2, [r3, #24]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f042 0208 	orr.w	r2, r2, #8
 8002bc2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002bc4:	68fb      	ldr	r3, [r7, #12]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	699a      	ldr	r2, [r3, #24]
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	f022 0204 	bic.w	r2, r2, #4
 8002bd2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	6999      	ldr	r1, [r3, #24]
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	691a      	ldr	r2, [r3, #16]
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	430a      	orrs	r2, r1
 8002be4:	619a      	str	r2, [r3, #24]
      break;
 8002be6:	e0a5      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002be8:	68fb      	ldr	r3, [r7, #12]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	68b9      	ldr	r1, [r7, #8]
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f000 fade 	bl	80031b0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	699a      	ldr	r2, [r3, #24]
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	699a      	ldr	r2, [r3, #24]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002c14:	68fb      	ldr	r3, [r7, #12]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6999      	ldr	r1, [r3, #24]
 8002c1a:	68bb      	ldr	r3, [r7, #8]
 8002c1c:	691b      	ldr	r3, [r3, #16]
 8002c1e:	021a      	lsls	r2, r3, #8
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	430a      	orrs	r2, r1
 8002c26:	619a      	str	r2, [r3, #24]
      break;
 8002c28:	e084      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	68b9      	ldr	r1, [r7, #8]
 8002c30:	4618      	mov	r0, r3
 8002c32:	f000 fb51 	bl	80032d8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002c36:	68fb      	ldr	r3, [r7, #12]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	69da      	ldr	r2, [r3, #28]
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 0208 	orr.w	r2, r2, #8
 8002c44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002c46:	68fb      	ldr	r3, [r7, #12]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	69da      	ldr	r2, [r3, #28]
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f022 0204 	bic.w	r2, r2, #4
 8002c54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	69d9      	ldr	r1, [r3, #28]
 8002c5c:	68bb      	ldr	r3, [r7, #8]
 8002c5e:	691a      	ldr	r2, [r3, #16]
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	430a      	orrs	r2, r1
 8002c66:	61da      	str	r2, [r3, #28]
      break;
 8002c68:	e064      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68b9      	ldr	r1, [r7, #8]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f000 fbc3 	bl	80033fc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	69da      	ldr	r2, [r3, #28]
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002c86:	68fb      	ldr	r3, [r7, #12]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	69da      	ldr	r2, [r3, #28]
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002c94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	69d9      	ldr	r1, [r3, #28]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
 8002c9e:	691b      	ldr	r3, [r3, #16]
 8002ca0:	021a      	lsls	r2, r3, #8
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	61da      	str	r2, [r3, #28]
      break;
 8002caa:	e043      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	68b9      	ldr	r1, [r7, #8]
 8002cb2:	4618      	mov	r0, r3
 8002cb4:	f000 fc12 	bl	80034dc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	f042 0208 	orr.w	r2, r2, #8
 8002cc6:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f022 0204 	bic.w	r2, r2, #4
 8002cd6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002cde:	68bb      	ldr	r3, [r7, #8]
 8002ce0:	691a      	ldr	r2, [r3, #16]
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	430a      	orrs	r2, r1
 8002ce8:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002cea:	e023      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	68b9      	ldr	r1, [r7, #8]
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f000 fc5c 	bl	80035b0 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d06:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002d0e:	68fb      	ldr	r3, [r7, #12]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002d16:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002d1e:	68bb      	ldr	r3, [r7, #8]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	021a      	lsls	r2, r3, #8
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	430a      	orrs	r2, r1
 8002d2a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002d2c:	e002      	b.n	8002d34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002d2e:	2301      	movs	r3, #1
 8002d30:	75fb      	strb	r3, [r7, #23]
      break;
 8002d32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3718      	adds	r7, #24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bd80      	pop	{r7, pc}
 8002d46:	bf00      	nop

08002d48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002d48:	b580      	push	{r7, lr}
 8002d4a:	b084      	sub	sp, #16
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002d52:	2300      	movs	r3, #0
 8002d54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d5c:	2b01      	cmp	r3, #1
 8002d5e:	d101      	bne.n	8002d64 <HAL_TIM_ConfigClockSource+0x1c>
 8002d60:	2302      	movs	r3, #2
 8002d62:	e0b6      	b.n	8002ed2 <HAL_TIM_ConfigClockSource+0x18a>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	2201      	movs	r2, #1
 8002d68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002d6c:	687b      	ldr	r3, [r7, #4]
 8002d6e:	2202      	movs	r2, #2
 8002d70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	689b      	ldr	r3, [r3, #8]
 8002d7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002d7c:	68bb      	ldr	r3, [r7, #8]
 8002d7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002d86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	68ba      	ldr	r2, [r7, #8]
 8002d96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da0:	d03e      	beq.n	8002e20 <HAL_TIM_ConfigClockSource+0xd8>
 8002da2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002da6:	f200 8087 	bhi.w	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002daa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002dae:	f000 8086 	beq.w	8002ebe <HAL_TIM_ConfigClockSource+0x176>
 8002db2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002db6:	d87f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002db8:	2b70      	cmp	r3, #112	; 0x70
 8002dba:	d01a      	beq.n	8002df2 <HAL_TIM_ConfigClockSource+0xaa>
 8002dbc:	2b70      	cmp	r3, #112	; 0x70
 8002dbe:	d87b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002dc0:	2b60      	cmp	r3, #96	; 0x60
 8002dc2:	d050      	beq.n	8002e66 <HAL_TIM_ConfigClockSource+0x11e>
 8002dc4:	2b60      	cmp	r3, #96	; 0x60
 8002dc6:	d877      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002dc8:	2b50      	cmp	r3, #80	; 0x50
 8002dca:	d03c      	beq.n	8002e46 <HAL_TIM_ConfigClockSource+0xfe>
 8002dcc:	2b50      	cmp	r3, #80	; 0x50
 8002dce:	d873      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002dd0:	2b40      	cmp	r3, #64	; 0x40
 8002dd2:	d058      	beq.n	8002e86 <HAL_TIM_ConfigClockSource+0x13e>
 8002dd4:	2b40      	cmp	r3, #64	; 0x40
 8002dd6:	d86f      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002dd8:	2b30      	cmp	r3, #48	; 0x30
 8002dda:	d064      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8002ddc:	2b30      	cmp	r3, #48	; 0x30
 8002dde:	d86b      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002de0:	2b20      	cmp	r3, #32
 8002de2:	d060      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8002de4:	2b20      	cmp	r3, #32
 8002de6:	d867      	bhi.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d05c      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d05a      	beq.n	8002ea6 <HAL_TIM_ConfigClockSource+0x15e>
 8002df0:	e062      	b.n	8002eb8 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	6818      	ldr	r0, [r3, #0]
 8002df6:	683b      	ldr	r3, [r7, #0]
 8002df8:	6899      	ldr	r1, [r3, #8]
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	685a      	ldr	r2, [r3, #4]
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	68db      	ldr	r3, [r3, #12]
 8002e02:	f000 fcbb 	bl	800377c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	681b      	ldr	r3, [r3, #0]
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002e0e:	68bb      	ldr	r3, [r7, #8]
 8002e10:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002e14:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	68ba      	ldr	r2, [r7, #8]
 8002e1c:	609a      	str	r2, [r3, #8]
      break;
 8002e1e:	e04f      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	6818      	ldr	r0, [r3, #0]
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	6899      	ldr	r1, [r3, #8]
 8002e28:	683b      	ldr	r3, [r7, #0]
 8002e2a:	685a      	ldr	r2, [r3, #4]
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	68db      	ldr	r3, [r3, #12]
 8002e30:	f000 fca4 	bl	800377c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	689a      	ldr	r2, [r3, #8]
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002e42:	609a      	str	r2, [r3, #8]
      break;
 8002e44:	e03c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6818      	ldr	r0, [r3, #0]
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	6859      	ldr	r1, [r3, #4]
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	68db      	ldr	r3, [r3, #12]
 8002e52:	461a      	mov	r2, r3
 8002e54:	f000 fc18 	bl	8003688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2150      	movs	r1, #80	; 0x50
 8002e5e:	4618      	mov	r0, r3
 8002e60:	f000 fc71 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8002e64:	e02c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	6818      	ldr	r0, [r3, #0]
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	6859      	ldr	r1, [r3, #4]
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	68db      	ldr	r3, [r3, #12]
 8002e72:	461a      	mov	r2, r3
 8002e74:	f000 fc37 	bl	80036e6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2160      	movs	r1, #96	; 0x60
 8002e7e:	4618      	mov	r0, r3
 8002e80:	f000 fc61 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8002e84:	e01c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	6818      	ldr	r0, [r3, #0]
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	6859      	ldr	r1, [r3, #4]
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	68db      	ldr	r3, [r3, #12]
 8002e92:	461a      	mov	r2, r3
 8002e94:	f000 fbf8 	bl	8003688 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	2140      	movs	r1, #64	; 0x40
 8002e9e:	4618      	mov	r0, r3
 8002ea0:	f000 fc51 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8002ea4:	e00c      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681a      	ldr	r2, [r3, #0]
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4619      	mov	r1, r3
 8002eb0:	4610      	mov	r0, r2
 8002eb2:	f000 fc48 	bl	8003746 <TIM_ITRx_SetConfig>
      break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002eb8:	2301      	movs	r3, #1
 8002eba:	73fb      	strb	r3, [r7, #15]
      break;
 8002ebc:	e000      	b.n	8002ec0 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ebe:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ed0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3710      	adds	r7, #16
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eda:	b480      	push	{r7}
 8002edc:	b083      	sub	sp, #12
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002ee2:	bf00      	nop
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002ef6:	bf00      	nop
 8002ef8:	370c      	adds	r7, #12
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002f02:	b480      	push	{r7}
 8002f04:	b083      	sub	sp, #12
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002f0a:	bf00      	nop
 8002f0c:	370c      	adds	r7, #12
 8002f0e:	46bd      	mov	sp, r7
 8002f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f14:	4770      	bx	lr

08002f16 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002f16:	b480      	push	{r7}
 8002f18:	b083      	sub	sp, #12
 8002f1a:	af00      	add	r7, sp, #0
 8002f1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002f1e:	bf00      	nop
 8002f20:	370c      	adds	r7, #12
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	b083      	sub	sp, #12
 8002f2e:	af00      	add	r7, sp, #0
 8002f30:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002f32:	bf00      	nop
 8002f34:	370c      	adds	r7, #12
 8002f36:	46bd      	mov	sp, r7
 8002f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3c:	4770      	bx	lr
	...

08002f40 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
 8002f48:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4a42      	ldr	r2, [pc, #264]	; (800305c <TIM_Base_SetConfig+0x11c>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d013      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002f5e:	d00f      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a3f      	ldr	r2, [pc, #252]	; (8003060 <TIM_Base_SetConfig+0x120>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d00b      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	4a3e      	ldr	r2, [pc, #248]	; (8003064 <TIM_Base_SetConfig+0x124>)
 8002f6c:	4293      	cmp	r3, r2
 8002f6e:	d007      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	4a3d      	ldr	r2, [pc, #244]	; (8003068 <TIM_Base_SetConfig+0x128>)
 8002f74:	4293      	cmp	r3, r2
 8002f76:	d003      	beq.n	8002f80 <TIM_Base_SetConfig+0x40>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	4a3c      	ldr	r2, [pc, #240]	; (800306c <TIM_Base_SetConfig+0x12c>)
 8002f7c:	4293      	cmp	r3, r2
 8002f7e:	d108      	bne.n	8002f92 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f86:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002f88:	683b      	ldr	r3, [r7, #0]
 8002f8a:	685b      	ldr	r3, [r3, #4]
 8002f8c:	68fa      	ldr	r2, [r7, #12]
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	4a31      	ldr	r2, [pc, #196]	; (800305c <TIM_Base_SetConfig+0x11c>)
 8002f96:	4293      	cmp	r3, r2
 8002f98:	d01f      	beq.n	8002fda <TIM_Base_SetConfig+0x9a>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa0:	d01b      	beq.n	8002fda <TIM_Base_SetConfig+0x9a>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	4a2e      	ldr	r2, [pc, #184]	; (8003060 <TIM_Base_SetConfig+0x120>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d017      	beq.n	8002fda <TIM_Base_SetConfig+0x9a>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	4a2d      	ldr	r2, [pc, #180]	; (8003064 <TIM_Base_SetConfig+0x124>)
 8002fae:	4293      	cmp	r3, r2
 8002fb0:	d013      	beq.n	8002fda <TIM_Base_SetConfig+0x9a>
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	4a2c      	ldr	r2, [pc, #176]	; (8003068 <TIM_Base_SetConfig+0x128>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d00f      	beq.n	8002fda <TIM_Base_SetConfig+0x9a>
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4a2c      	ldr	r2, [pc, #176]	; (8003070 <TIM_Base_SetConfig+0x130>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d00b      	beq.n	8002fda <TIM_Base_SetConfig+0x9a>
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	4a2b      	ldr	r2, [pc, #172]	; (8003074 <TIM_Base_SetConfig+0x134>)
 8002fc6:	4293      	cmp	r3, r2
 8002fc8:	d007      	beq.n	8002fda <TIM_Base_SetConfig+0x9a>
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	4a2a      	ldr	r2, [pc, #168]	; (8003078 <TIM_Base_SetConfig+0x138>)
 8002fce:	4293      	cmp	r3, r2
 8002fd0:	d003      	beq.n	8002fda <TIM_Base_SetConfig+0x9a>
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	4a25      	ldr	r2, [pc, #148]	; (800306c <TIM_Base_SetConfig+0x12c>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d108      	bne.n	8002fec <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fe0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	68fa      	ldr	r2, [r7, #12]
 8002fe8:	4313      	orrs	r3, r2
 8002fea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	695b      	ldr	r3, [r3, #20]
 8002ff6:	4313      	orrs	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	68fa      	ldr	r2, [r7, #12]
 8002ffe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003000:	683b      	ldr	r3, [r7, #0]
 8003002:	689a      	ldr	r2, [r3, #8]
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003008:	683b      	ldr	r3, [r7, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a12      	ldr	r2, [pc, #72]	; (800305c <TIM_Base_SetConfig+0x11c>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d013      	beq.n	8003040 <TIM_Base_SetConfig+0x100>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a13      	ldr	r2, [pc, #76]	; (8003068 <TIM_Base_SetConfig+0x128>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d00f      	beq.n	8003040 <TIM_Base_SetConfig+0x100>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a13      	ldr	r2, [pc, #76]	; (8003070 <TIM_Base_SetConfig+0x130>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d00b      	beq.n	8003040 <TIM_Base_SetConfig+0x100>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a12      	ldr	r2, [pc, #72]	; (8003074 <TIM_Base_SetConfig+0x134>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d007      	beq.n	8003040 <TIM_Base_SetConfig+0x100>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a11      	ldr	r2, [pc, #68]	; (8003078 <TIM_Base_SetConfig+0x138>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d003      	beq.n	8003040 <TIM_Base_SetConfig+0x100>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a0c      	ldr	r2, [pc, #48]	; (800306c <TIM_Base_SetConfig+0x12c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d103      	bne.n	8003048 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	691a      	ldr	r2, [r3, #16]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	2201      	movs	r2, #1
 800304c:	615a      	str	r2, [r3, #20]
}
 800304e:	bf00      	nop
 8003050:	3714      	adds	r7, #20
 8003052:	46bd      	mov	sp, r7
 8003054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	40012c00 	.word	0x40012c00
 8003060:	40000400 	.word	0x40000400
 8003064:	40000800 	.word	0x40000800
 8003068:	40013400 	.word	0x40013400
 800306c:	40015000 	.word	0x40015000
 8003070:	40014000 	.word	0x40014000
 8003074:	40014400 	.word	0x40014400
 8003078:	40014800 	.word	0x40014800

0800307c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800307c:	b480      	push	{r7}
 800307e:	b087      	sub	sp, #28
 8003080:	af00      	add	r7, sp, #0
 8003082:	6078      	str	r0, [r7, #4]
 8003084:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	6a1b      	ldr	r3, [r3, #32]
 800308a:	f023 0201 	bic.w	r2, r3, #1
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a1b      	ldr	r3, [r3, #32]
 8003096:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	699b      	ldr	r3, [r3, #24]
 80030a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80030ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	f023 0303 	bic.w	r3, r3, #3
 80030b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	68fa      	ldr	r2, [r7, #12]
 80030be:	4313      	orrs	r3, r2
 80030c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80030c2:	697b      	ldr	r3, [r7, #20]
 80030c4:	f023 0302 	bic.w	r3, r3, #2
 80030c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	689b      	ldr	r3, [r3, #8]
 80030ce:	697a      	ldr	r2, [r7, #20]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	4a30      	ldr	r2, [pc, #192]	; (8003198 <TIM_OC1_SetConfig+0x11c>)
 80030d8:	4293      	cmp	r3, r2
 80030da:	d013      	beq.n	8003104 <TIM_OC1_SetConfig+0x88>
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	4a2f      	ldr	r2, [pc, #188]	; (800319c <TIM_OC1_SetConfig+0x120>)
 80030e0:	4293      	cmp	r3, r2
 80030e2:	d00f      	beq.n	8003104 <TIM_OC1_SetConfig+0x88>
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	4a2e      	ldr	r2, [pc, #184]	; (80031a0 <TIM_OC1_SetConfig+0x124>)
 80030e8:	4293      	cmp	r3, r2
 80030ea:	d00b      	beq.n	8003104 <TIM_OC1_SetConfig+0x88>
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	4a2d      	ldr	r2, [pc, #180]	; (80031a4 <TIM_OC1_SetConfig+0x128>)
 80030f0:	4293      	cmp	r3, r2
 80030f2:	d007      	beq.n	8003104 <TIM_OC1_SetConfig+0x88>
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	4a2c      	ldr	r2, [pc, #176]	; (80031a8 <TIM_OC1_SetConfig+0x12c>)
 80030f8:	4293      	cmp	r3, r2
 80030fa:	d003      	beq.n	8003104 <TIM_OC1_SetConfig+0x88>
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	4a2b      	ldr	r2, [pc, #172]	; (80031ac <TIM_OC1_SetConfig+0x130>)
 8003100:	4293      	cmp	r3, r2
 8003102:	d10c      	bne.n	800311e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f023 0308 	bic.w	r3, r3, #8
 800310a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800310c:	683b      	ldr	r3, [r7, #0]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	4313      	orrs	r3, r2
 8003114:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	f023 0304 	bic.w	r3, r3, #4
 800311c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <TIM_OC1_SetConfig+0x11c>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d013      	beq.n	800314e <TIM_OC1_SetConfig+0xd2>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	4a1c      	ldr	r2, [pc, #112]	; (800319c <TIM_OC1_SetConfig+0x120>)
 800312a:	4293      	cmp	r3, r2
 800312c:	d00f      	beq.n	800314e <TIM_OC1_SetConfig+0xd2>
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	4a1b      	ldr	r2, [pc, #108]	; (80031a0 <TIM_OC1_SetConfig+0x124>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d00b      	beq.n	800314e <TIM_OC1_SetConfig+0xd2>
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	4a1a      	ldr	r2, [pc, #104]	; (80031a4 <TIM_OC1_SetConfig+0x128>)
 800313a:	4293      	cmp	r3, r2
 800313c:	d007      	beq.n	800314e <TIM_OC1_SetConfig+0xd2>
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	4a19      	ldr	r2, [pc, #100]	; (80031a8 <TIM_OC1_SetConfig+0x12c>)
 8003142:	4293      	cmp	r3, r2
 8003144:	d003      	beq.n	800314e <TIM_OC1_SetConfig+0xd2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	4a18      	ldr	r2, [pc, #96]	; (80031ac <TIM_OC1_SetConfig+0x130>)
 800314a:	4293      	cmp	r3, r2
 800314c:	d111      	bne.n	8003172 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800314e:	693b      	ldr	r3, [r7, #16]
 8003150:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003154:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003156:	693b      	ldr	r3, [r7, #16]
 8003158:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800315c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	695b      	ldr	r3, [r3, #20]
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	4313      	orrs	r3, r2
 8003166:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003168:	683b      	ldr	r3, [r7, #0]
 800316a:	699b      	ldr	r3, [r3, #24]
 800316c:	693a      	ldr	r2, [r7, #16]
 800316e:	4313      	orrs	r3, r2
 8003170:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	693a      	ldr	r2, [r7, #16]
 8003176:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685a      	ldr	r2, [r3, #4]
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	697a      	ldr	r2, [r7, #20]
 800318a:	621a      	str	r2, [r3, #32]
}
 800318c:	bf00      	nop
 800318e:	371c      	adds	r7, #28
 8003190:	46bd      	mov	sp, r7
 8003192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003196:	4770      	bx	lr
 8003198:	40012c00 	.word	0x40012c00
 800319c:	40013400 	.word	0x40013400
 80031a0:	40014000 	.word	0x40014000
 80031a4:	40014400 	.word	0x40014400
 80031a8:	40014800 	.word	0x40014800
 80031ac:	40015000 	.word	0x40015000

080031b0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b0:	b480      	push	{r7}
 80031b2:	b087      	sub	sp, #28
 80031b4:	af00      	add	r7, sp, #0
 80031b6:	6078      	str	r0, [r7, #4]
 80031b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	6a1b      	ldr	r3, [r3, #32]
 80031be:	f023 0210 	bic.w	r2, r3, #16
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a1b      	ldr	r3, [r3, #32]
 80031ca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	699b      	ldr	r3, [r3, #24]
 80031d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80031de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80031e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80031ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	021b      	lsls	r3, r3, #8
 80031f2:	68fa      	ldr	r2, [r7, #12]
 80031f4:	4313      	orrs	r3, r2
 80031f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031f8:	697b      	ldr	r3, [r7, #20]
 80031fa:	f023 0320 	bic.w	r3, r3, #32
 80031fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	689b      	ldr	r3, [r3, #8]
 8003204:	011b      	lsls	r3, r3, #4
 8003206:	697a      	ldr	r2, [r7, #20]
 8003208:	4313      	orrs	r3, r2
 800320a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	4a2c      	ldr	r2, [pc, #176]	; (80032c0 <TIM_OC2_SetConfig+0x110>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d007      	beq.n	8003224 <TIM_OC2_SetConfig+0x74>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <TIM_OC2_SetConfig+0x114>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d003      	beq.n	8003224 <TIM_OC2_SetConfig+0x74>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <TIM_OC2_SetConfig+0x118>)
 8003220:	4293      	cmp	r3, r2
 8003222:	d10d      	bne.n	8003240 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003224:	697b      	ldr	r3, [r7, #20]
 8003226:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800322a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	011b      	lsls	r3, r3, #4
 8003232:	697a      	ldr	r2, [r7, #20]
 8003234:	4313      	orrs	r3, r2
 8003236:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800323e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	4a1f      	ldr	r2, [pc, #124]	; (80032c0 <TIM_OC2_SetConfig+0x110>)
 8003244:	4293      	cmp	r3, r2
 8003246:	d013      	beq.n	8003270 <TIM_OC2_SetConfig+0xc0>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	4a1e      	ldr	r2, [pc, #120]	; (80032c4 <TIM_OC2_SetConfig+0x114>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d00f      	beq.n	8003270 <TIM_OC2_SetConfig+0xc0>
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	4a1e      	ldr	r2, [pc, #120]	; (80032cc <TIM_OC2_SetConfig+0x11c>)
 8003254:	4293      	cmp	r3, r2
 8003256:	d00b      	beq.n	8003270 <TIM_OC2_SetConfig+0xc0>
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	4a1d      	ldr	r2, [pc, #116]	; (80032d0 <TIM_OC2_SetConfig+0x120>)
 800325c:	4293      	cmp	r3, r2
 800325e:	d007      	beq.n	8003270 <TIM_OC2_SetConfig+0xc0>
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a1c      	ldr	r2, [pc, #112]	; (80032d4 <TIM_OC2_SetConfig+0x124>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d003      	beq.n	8003270 <TIM_OC2_SetConfig+0xc0>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a17      	ldr	r2, [pc, #92]	; (80032c8 <TIM_OC2_SetConfig+0x118>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d113      	bne.n	8003298 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003276:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003278:	693b      	ldr	r3, [r7, #16]
 800327a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800327e:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	695b      	ldr	r3, [r3, #20]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	693a      	ldr	r2, [r7, #16]
 8003288:	4313      	orrs	r3, r2
 800328a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	699b      	ldr	r3, [r3, #24]
 8003290:	009b      	lsls	r3, r3, #2
 8003292:	693a      	ldr	r2, [r7, #16]
 8003294:	4313      	orrs	r3, r2
 8003296:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	693a      	ldr	r2, [r7, #16]
 800329c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	68fa      	ldr	r2, [r7, #12]
 80032a2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032bc:	4770      	bx	lr
 80032be:	bf00      	nop
 80032c0:	40012c00 	.word	0x40012c00
 80032c4:	40013400 	.word	0x40013400
 80032c8:	40015000 	.word	0x40015000
 80032cc:	40014000 	.word	0x40014000
 80032d0:	40014400 	.word	0x40014400
 80032d4:	40014800 	.word	0x40014800

080032d8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032d8:	b480      	push	{r7}
 80032da:	b087      	sub	sp, #28
 80032dc:	af00      	add	r7, sp, #0
 80032de:	6078      	str	r0, [r7, #4]
 80032e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	69db      	ldr	r3, [r3, #28]
 80032fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003306:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800330a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	f023 0303 	bic.w	r3, r3, #3
 8003312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	68fa      	ldr	r2, [r7, #12]
 800331a:	4313      	orrs	r3, r2
 800331c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800331e:	697b      	ldr	r3, [r7, #20]
 8003320:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003324:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003326:	683b      	ldr	r3, [r7, #0]
 8003328:	689b      	ldr	r3, [r3, #8]
 800332a:	021b      	lsls	r3, r3, #8
 800332c:	697a      	ldr	r2, [r7, #20]
 800332e:	4313      	orrs	r3, r2
 8003330:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	4a2b      	ldr	r2, [pc, #172]	; (80033e4 <TIM_OC3_SetConfig+0x10c>)
 8003336:	4293      	cmp	r3, r2
 8003338:	d007      	beq.n	800334a <TIM_OC3_SetConfig+0x72>
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	4a2a      	ldr	r2, [pc, #168]	; (80033e8 <TIM_OC3_SetConfig+0x110>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d003      	beq.n	800334a <TIM_OC3_SetConfig+0x72>
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	4a29      	ldr	r2, [pc, #164]	; (80033ec <TIM_OC3_SetConfig+0x114>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d10d      	bne.n	8003366 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800334a:	697b      	ldr	r3, [r7, #20]
 800334c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003350:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003352:	683b      	ldr	r3, [r7, #0]
 8003354:	68db      	ldr	r3, [r3, #12]
 8003356:	021b      	lsls	r3, r3, #8
 8003358:	697a      	ldr	r2, [r7, #20]
 800335a:	4313      	orrs	r3, r2
 800335c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003364:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	4a1e      	ldr	r2, [pc, #120]	; (80033e4 <TIM_OC3_SetConfig+0x10c>)
 800336a:	4293      	cmp	r3, r2
 800336c:	d013      	beq.n	8003396 <TIM_OC3_SetConfig+0xbe>
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <TIM_OC3_SetConfig+0x110>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d00f      	beq.n	8003396 <TIM_OC3_SetConfig+0xbe>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1d      	ldr	r2, [pc, #116]	; (80033f0 <TIM_OC3_SetConfig+0x118>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00b      	beq.n	8003396 <TIM_OC3_SetConfig+0xbe>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1c      	ldr	r2, [pc, #112]	; (80033f4 <TIM_OC3_SetConfig+0x11c>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d007      	beq.n	8003396 <TIM_OC3_SetConfig+0xbe>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1b      	ldr	r2, [pc, #108]	; (80033f8 <TIM_OC3_SetConfig+0x120>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d003      	beq.n	8003396 <TIM_OC3_SetConfig+0xbe>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a16      	ldr	r2, [pc, #88]	; (80033ec <TIM_OC3_SetConfig+0x114>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d113      	bne.n	80033be <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800339c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80033a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	011b      	lsls	r3, r3, #4
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	4313      	orrs	r3, r2
 80033b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80033b2:	683b      	ldr	r3, [r7, #0]
 80033b4:	699b      	ldr	r3, [r3, #24]
 80033b6:	011b      	lsls	r3, r3, #4
 80033b8:	693a      	ldr	r2, [r7, #16]
 80033ba:	4313      	orrs	r3, r2
 80033bc:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	693a      	ldr	r2, [r7, #16]
 80033c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	68fa      	ldr	r2, [r7, #12]
 80033c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	685a      	ldr	r2, [r3, #4]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	697a      	ldr	r2, [r7, #20]
 80033d6:	621a      	str	r2, [r3, #32]
}
 80033d8:	bf00      	nop
 80033da:	371c      	adds	r7, #28
 80033dc:	46bd      	mov	sp, r7
 80033de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e2:	4770      	bx	lr
 80033e4:	40012c00 	.word	0x40012c00
 80033e8:	40013400 	.word	0x40013400
 80033ec:	40015000 	.word	0x40015000
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40014400 	.word	0x40014400
 80033f8:	40014800 	.word	0x40014800

080033fc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	6078      	str	r0, [r7, #4]
 8003404:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	6a1b      	ldr	r3, [r3, #32]
 8003416:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	69db      	ldr	r3, [r3, #28]
 8003422:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800342e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003436:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003438:	683b      	ldr	r3, [r7, #0]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	021b      	lsls	r3, r3, #8
 800343e:	68fa      	ldr	r2, [r7, #12]
 8003440:	4313      	orrs	r3, r2
 8003442:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003444:	693b      	ldr	r3, [r7, #16]
 8003446:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800344a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800344c:	683b      	ldr	r3, [r7, #0]
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	031b      	lsls	r3, r3, #12
 8003452:	693a      	ldr	r2, [r7, #16]
 8003454:	4313      	orrs	r3, r2
 8003456:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	4a1a      	ldr	r2, [pc, #104]	; (80034c4 <TIM_OC4_SetConfig+0xc8>)
 800345c:	4293      	cmp	r3, r2
 800345e:	d013      	beq.n	8003488 <TIM_OC4_SetConfig+0x8c>
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	4a19      	ldr	r2, [pc, #100]	; (80034c8 <TIM_OC4_SetConfig+0xcc>)
 8003464:	4293      	cmp	r3, r2
 8003466:	d00f      	beq.n	8003488 <TIM_OC4_SetConfig+0x8c>
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	4a18      	ldr	r2, [pc, #96]	; (80034cc <TIM_OC4_SetConfig+0xd0>)
 800346c:	4293      	cmp	r3, r2
 800346e:	d00b      	beq.n	8003488 <TIM_OC4_SetConfig+0x8c>
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	4a17      	ldr	r2, [pc, #92]	; (80034d0 <TIM_OC4_SetConfig+0xd4>)
 8003474:	4293      	cmp	r3, r2
 8003476:	d007      	beq.n	8003488 <TIM_OC4_SetConfig+0x8c>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	4a16      	ldr	r2, [pc, #88]	; (80034d4 <TIM_OC4_SetConfig+0xd8>)
 800347c:	4293      	cmp	r3, r2
 800347e:	d003      	beq.n	8003488 <TIM_OC4_SetConfig+0x8c>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	4a15      	ldr	r2, [pc, #84]	; (80034d8 <TIM_OC4_SetConfig+0xdc>)
 8003484:	4293      	cmp	r3, r2
 8003486:	d109      	bne.n	800349c <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800348e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003490:	683b      	ldr	r3, [r7, #0]
 8003492:	695b      	ldr	r3, [r3, #20]
 8003494:	019b      	lsls	r3, r3, #6
 8003496:	697a      	ldr	r2, [r7, #20]
 8003498:	4313      	orrs	r3, r2
 800349a:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	697a      	ldr	r2, [r7, #20]
 80034a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	68fa      	ldr	r2, [r7, #12]
 80034a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685a      	ldr	r2, [r3, #4]
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	693a      	ldr	r2, [r7, #16]
 80034b4:	621a      	str	r2, [r3, #32]
}
 80034b6:	bf00      	nop
 80034b8:	371c      	adds	r7, #28
 80034ba:	46bd      	mov	sp, r7
 80034bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c0:	4770      	bx	lr
 80034c2:	bf00      	nop
 80034c4:	40012c00 	.word	0x40012c00
 80034c8:	40013400 	.word	0x40013400
 80034cc:	40014000 	.word	0x40014000
 80034d0:	40014400 	.word	0x40014400
 80034d4:	40014800 	.word	0x40014800
 80034d8:	40015000 	.word	0x40015000

080034dc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80034dc:	b480      	push	{r7}
 80034de:	b087      	sub	sp, #28
 80034e0:	af00      	add	r7, sp, #0
 80034e2:	6078      	str	r0, [r7, #4]
 80034e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6a1b      	ldr	r3, [r3, #32]
 80034ea:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6a1b      	ldr	r3, [r3, #32]
 80034f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	685b      	ldr	r3, [r3, #4]
 80034fc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003502:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800350a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800350e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003510:	683b      	ldr	r3, [r7, #0]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	68fa      	ldr	r2, [r7, #12]
 8003516:	4313      	orrs	r3, r2
 8003518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003520:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	041b      	lsls	r3, r3, #16
 8003528:	693a      	ldr	r2, [r7, #16]
 800352a:	4313      	orrs	r3, r2
 800352c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	4a19      	ldr	r2, [pc, #100]	; (8003598 <TIM_OC5_SetConfig+0xbc>)
 8003532:	4293      	cmp	r3, r2
 8003534:	d013      	beq.n	800355e <TIM_OC5_SetConfig+0x82>
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	4a18      	ldr	r2, [pc, #96]	; (800359c <TIM_OC5_SetConfig+0xc0>)
 800353a:	4293      	cmp	r3, r2
 800353c:	d00f      	beq.n	800355e <TIM_OC5_SetConfig+0x82>
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	4a17      	ldr	r2, [pc, #92]	; (80035a0 <TIM_OC5_SetConfig+0xc4>)
 8003542:	4293      	cmp	r3, r2
 8003544:	d00b      	beq.n	800355e <TIM_OC5_SetConfig+0x82>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	4a16      	ldr	r2, [pc, #88]	; (80035a4 <TIM_OC5_SetConfig+0xc8>)
 800354a:	4293      	cmp	r3, r2
 800354c:	d007      	beq.n	800355e <TIM_OC5_SetConfig+0x82>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	4a15      	ldr	r2, [pc, #84]	; (80035a8 <TIM_OC5_SetConfig+0xcc>)
 8003552:	4293      	cmp	r3, r2
 8003554:	d003      	beq.n	800355e <TIM_OC5_SetConfig+0x82>
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	4a14      	ldr	r2, [pc, #80]	; (80035ac <TIM_OC5_SetConfig+0xd0>)
 800355a:	4293      	cmp	r3, r2
 800355c:	d109      	bne.n	8003572 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003564:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	695b      	ldr	r3, [r3, #20]
 800356a:	021b      	lsls	r3, r3, #8
 800356c:	697a      	ldr	r2, [r7, #20]
 800356e:	4313      	orrs	r3, r2
 8003570:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	697a      	ldr	r2, [r7, #20]
 8003576:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	68fa      	ldr	r2, [r7, #12]
 800357c:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	685a      	ldr	r2, [r3, #4]
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	621a      	str	r2, [r3, #32]
}
 800358c:	bf00      	nop
 800358e:	371c      	adds	r7, #28
 8003590:	46bd      	mov	sp, r7
 8003592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003596:	4770      	bx	lr
 8003598:	40012c00 	.word	0x40012c00
 800359c:	40013400 	.word	0x40013400
 80035a0:	40014000 	.word	0x40014000
 80035a4:	40014400 	.word	0x40014400
 80035a8:	40014800 	.word	0x40014800
 80035ac:	40015000 	.word	0x40015000

080035b0 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80035b0:	b480      	push	{r7}
 80035b2:	b087      	sub	sp, #28
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	6a1b      	ldr	r3, [r3, #32]
 80035be:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6a1b      	ldr	r3, [r3, #32]
 80035ca:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	685b      	ldr	r3, [r3, #4]
 80035d0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	021b      	lsls	r3, r3, #8
 80035ea:	68fa      	ldr	r2, [r7, #12]
 80035ec:	4313      	orrs	r3, r2
 80035ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80035f0:	693b      	ldr	r3, [r7, #16]
 80035f2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80035f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	051b      	lsls	r3, r3, #20
 80035fe:	693a      	ldr	r2, [r7, #16]
 8003600:	4313      	orrs	r3, r2
 8003602:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	4a1a      	ldr	r2, [pc, #104]	; (8003670 <TIM_OC6_SetConfig+0xc0>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d013      	beq.n	8003634 <TIM_OC6_SetConfig+0x84>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a19      	ldr	r2, [pc, #100]	; (8003674 <TIM_OC6_SetConfig+0xc4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d00f      	beq.n	8003634 <TIM_OC6_SetConfig+0x84>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a18      	ldr	r2, [pc, #96]	; (8003678 <TIM_OC6_SetConfig+0xc8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d00b      	beq.n	8003634 <TIM_OC6_SetConfig+0x84>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	4a17      	ldr	r2, [pc, #92]	; (800367c <TIM_OC6_SetConfig+0xcc>)
 8003620:	4293      	cmp	r3, r2
 8003622:	d007      	beq.n	8003634 <TIM_OC6_SetConfig+0x84>
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	4a16      	ldr	r2, [pc, #88]	; (8003680 <TIM_OC6_SetConfig+0xd0>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d003      	beq.n	8003634 <TIM_OC6_SetConfig+0x84>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	4a15      	ldr	r2, [pc, #84]	; (8003684 <TIM_OC6_SetConfig+0xd4>)
 8003630:	4293      	cmp	r3, r2
 8003632:	d109      	bne.n	8003648 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800363a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	695b      	ldr	r3, [r3, #20]
 8003640:	029b      	lsls	r3, r3, #10
 8003642:	697a      	ldr	r2, [r7, #20]
 8003644:	4313      	orrs	r3, r2
 8003646:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	697a      	ldr	r2, [r7, #20]
 800364c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	68fa      	ldr	r2, [r7, #12]
 8003652:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003654:	683b      	ldr	r3, [r7, #0]
 8003656:	685a      	ldr	r2, [r3, #4]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	621a      	str	r2, [r3, #32]
}
 8003662:	bf00      	nop
 8003664:	371c      	adds	r7, #28
 8003666:	46bd      	mov	sp, r7
 8003668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800366c:	4770      	bx	lr
 800366e:	bf00      	nop
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40013400 	.word	0x40013400
 8003678:	40014000 	.word	0x40014000
 800367c:	40014400 	.word	0x40014400
 8003680:	40014800 	.word	0x40014800
 8003684:	40015000 	.word	0x40015000

08003688 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003688:	b480      	push	{r7}
 800368a:	b087      	sub	sp, #28
 800368c:	af00      	add	r7, sp, #0
 800368e:	60f8      	str	r0, [r7, #12]
 8003690:	60b9      	str	r1, [r7, #8]
 8003692:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	6a1b      	ldr	r3, [r3, #32]
 8003698:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a1b      	ldr	r3, [r3, #32]
 800369e:	f023 0201 	bic.w	r2, r3, #1
 80036a2:	68fb      	ldr	r3, [r7, #12]
 80036a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	699b      	ldr	r3, [r3, #24]
 80036aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80036ac:	693b      	ldr	r3, [r7, #16]
 80036ae:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80036b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	011b      	lsls	r3, r3, #4
 80036b8:	693a      	ldr	r2, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 030a 	bic.w	r3, r3, #10
 80036c4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80036c6:	697a      	ldr	r2, [r7, #20]
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	4313      	orrs	r3, r2
 80036cc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	693a      	ldr	r2, [r7, #16]
 80036d2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	621a      	str	r2, [r3, #32]
}
 80036da:	bf00      	nop
 80036dc:	371c      	adds	r7, #28
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr

080036e6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80036e6:	b480      	push	{r7}
 80036e8:	b087      	sub	sp, #28
 80036ea:	af00      	add	r7, sp, #0
 80036ec:	60f8      	str	r0, [r7, #12]
 80036ee:	60b9      	str	r1, [r7, #8]
 80036f0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	6a1b      	ldr	r3, [r3, #32]
 80036f6:	f023 0210 	bic.w	r2, r3, #16
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	699b      	ldr	r3, [r3, #24]
 8003702:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	6a1b      	ldr	r3, [r3, #32]
 8003708:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800370a:	697b      	ldr	r3, [r7, #20]
 800370c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003710:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	031b      	lsls	r3, r3, #12
 8003716:	697a      	ldr	r2, [r7, #20]
 8003718:	4313      	orrs	r3, r2
 800371a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003722:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003724:	68bb      	ldr	r3, [r7, #8]
 8003726:	011b      	lsls	r3, r3, #4
 8003728:	693a      	ldr	r2, [r7, #16]
 800372a:	4313      	orrs	r3, r2
 800372c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	697a      	ldr	r2, [r7, #20]
 8003732:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	621a      	str	r2, [r3, #32]
}
 800373a:	bf00      	nop
 800373c:	371c      	adds	r7, #28
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr

08003746 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003746:	b480      	push	{r7}
 8003748:	b085      	sub	sp, #20
 800374a:	af00      	add	r7, sp, #0
 800374c:	6078      	str	r0, [r7, #4]
 800374e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800375e:	683a      	ldr	r2, [r7, #0]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4313      	orrs	r3, r2
 8003764:	f043 0307 	orr.w	r3, r3, #7
 8003768:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	68fa      	ldr	r2, [r7, #12]
 800376e:	609a      	str	r2, [r3, #8]
}
 8003770:	bf00      	nop
 8003772:	3714      	adds	r7, #20
 8003774:	46bd      	mov	sp, r7
 8003776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377a:	4770      	bx	lr

0800377c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800377c:	b480      	push	{r7}
 800377e:	b087      	sub	sp, #28
 8003780:	af00      	add	r7, sp, #0
 8003782:	60f8      	str	r0, [r7, #12]
 8003784:	60b9      	str	r1, [r7, #8]
 8003786:	607a      	str	r2, [r7, #4]
 8003788:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003790:	697b      	ldr	r3, [r7, #20]
 8003792:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003796:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	021a      	lsls	r2, r3, #8
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	431a      	orrs	r2, r3
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	697a      	ldr	r2, [r7, #20]
 80037a6:	4313      	orrs	r3, r2
 80037a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	697a      	ldr	r2, [r7, #20]
 80037ae:	609a      	str	r2, [r3, #8]
}
 80037b0:	bf00      	nop
 80037b2:	371c      	adds	r7, #28
 80037b4:	46bd      	mov	sp, r7
 80037b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ba:	4770      	bx	lr

080037bc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80037bc:	b480      	push	{r7}
 80037be:	b087      	sub	sp, #28
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	f003 031f 	and.w	r3, r3, #31
 80037ce:	2201      	movs	r2, #1
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6a1a      	ldr	r2, [r3, #32]
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	43db      	mvns	r3, r3
 80037de:	401a      	ands	r2, r3
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80037e4:	68fb      	ldr	r3, [r7, #12]
 80037e6:	6a1a      	ldr	r2, [r3, #32]
 80037e8:	68bb      	ldr	r3, [r7, #8]
 80037ea:	f003 031f 	and.w	r3, r3, #31
 80037ee:	6879      	ldr	r1, [r7, #4]
 80037f0:	fa01 f303 	lsl.w	r3, r1, r3
 80037f4:	431a      	orrs	r2, r3
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	621a      	str	r2, [r3, #32]
}
 80037fa:	bf00      	nop
 80037fc:	371c      	adds	r7, #28
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr
	...

08003808 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]
 8003810:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003818:	2b01      	cmp	r3, #1
 800381a:	d101      	bne.n	8003820 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800381c:	2302      	movs	r3, #2
 800381e:	e06d      	b.n	80038fc <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2202      	movs	r2, #2
 800382c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	685b      	ldr	r3, [r3, #4]
 8003836:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	689b      	ldr	r3, [r3, #8]
 800383e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a30      	ldr	r2, [pc, #192]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d009      	beq.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	4a2f      	ldr	r2, [pc, #188]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d004      	beq.n	800385e <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a2d      	ldr	r2, [pc, #180]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d108      	bne.n	8003870 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003864:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	685b      	ldr	r3, [r3, #4]
 800386a:	68fa      	ldr	r2, [r7, #12]
 800386c:	4313      	orrs	r3, r2
 800386e:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003876:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	68fa      	ldr	r2, [r7, #12]
 800387e:	4313      	orrs	r3, r2
 8003880:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	68fa      	ldr	r2, [r7, #12]
 8003888:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	4a1e      	ldr	r2, [pc, #120]	; (8003908 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d01d      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800389c:	d018      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a1c      	ldr	r2, [pc, #112]	; (8003914 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d013      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	4a1a      	ldr	r2, [pc, #104]	; (8003918 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d00e      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	4a15      	ldr	r2, [pc, #84]	; (800390c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d009      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	4a16      	ldr	r2, [pc, #88]	; (800391c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80038c2:	4293      	cmp	r3, r2
 80038c4:	d004      	beq.n	80038d0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	4a11      	ldr	r2, [pc, #68]	; (8003910 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80038cc:	4293      	cmp	r3, r2
 80038ce:	d10c      	bne.n	80038ea <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80038d6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80038d8:	683b      	ldr	r3, [r7, #0]
 80038da:	689b      	ldr	r3, [r3, #8]
 80038dc:	68ba      	ldr	r2, [r7, #8]
 80038de:	4313      	orrs	r3, r2
 80038e0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	68ba      	ldr	r2, [r7, #8]
 80038e8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	2201      	movs	r2, #1
 80038ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	2200      	movs	r2, #0
 80038f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80038fa:	2300      	movs	r3, #0
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	3714      	adds	r7, #20
 8003900:	46bd      	mov	sp, r7
 8003902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003906:	4770      	bx	lr
 8003908:	40012c00 	.word	0x40012c00
 800390c:	40013400 	.word	0x40013400
 8003910:	40015000 	.word	0x40015000
 8003914:	40000400 	.word	0x40000400
 8003918:	40000800 	.word	0x40000800
 800391c:	40014000 	.word	0x40014000

08003920 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003920:	b480      	push	{r7}
 8003922:	b083      	sub	sp, #12
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr

08003934 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003934:	b480      	push	{r7}
 8003936:	b083      	sub	sp, #12
 8003938:	af00      	add	r7, sp, #0
 800393a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800393c:	bf00      	nop
 800393e:	370c      	adds	r7, #12
 8003940:	46bd      	mov	sp, r7
 8003942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003946:	4770      	bx	lr

08003948 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003948:	b480      	push	{r7}
 800394a:	b083      	sub	sp, #12
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003950:	bf00      	nop
 8003952:	370c      	adds	r7, #12
 8003954:	46bd      	mov	sp, r7
 8003956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800395a:	4770      	bx	lr

0800395c <__libc_init_array>:
 800395c:	b570      	push	{r4, r5, r6, lr}
 800395e:	4d0d      	ldr	r5, [pc, #52]	; (8003994 <__libc_init_array+0x38>)
 8003960:	4c0d      	ldr	r4, [pc, #52]	; (8003998 <__libc_init_array+0x3c>)
 8003962:	1b64      	subs	r4, r4, r5
 8003964:	10a4      	asrs	r4, r4, #2
 8003966:	2600      	movs	r6, #0
 8003968:	42a6      	cmp	r6, r4
 800396a:	d109      	bne.n	8003980 <__libc_init_array+0x24>
 800396c:	4d0b      	ldr	r5, [pc, #44]	; (800399c <__libc_init_array+0x40>)
 800396e:	4c0c      	ldr	r4, [pc, #48]	; (80039a0 <__libc_init_array+0x44>)
 8003970:	f000 f820 	bl	80039b4 <_init>
 8003974:	1b64      	subs	r4, r4, r5
 8003976:	10a4      	asrs	r4, r4, #2
 8003978:	2600      	movs	r6, #0
 800397a:	42a6      	cmp	r6, r4
 800397c:	d105      	bne.n	800398a <__libc_init_array+0x2e>
 800397e:	bd70      	pop	{r4, r5, r6, pc}
 8003980:	f855 3b04 	ldr.w	r3, [r5], #4
 8003984:	4798      	blx	r3
 8003986:	3601      	adds	r6, #1
 8003988:	e7ee      	b.n	8003968 <__libc_init_array+0xc>
 800398a:	f855 3b04 	ldr.w	r3, [r5], #4
 800398e:	4798      	blx	r3
 8003990:	3601      	adds	r6, #1
 8003992:	e7f2      	b.n	800397a <__libc_init_array+0x1e>
 8003994:	080039fc 	.word	0x080039fc
 8003998:	080039fc 	.word	0x080039fc
 800399c:	080039fc 	.word	0x080039fc
 80039a0:	08003a00 	.word	0x08003a00

080039a4 <memset>:
 80039a4:	4402      	add	r2, r0
 80039a6:	4603      	mov	r3, r0
 80039a8:	4293      	cmp	r3, r2
 80039aa:	d100      	bne.n	80039ae <memset+0xa>
 80039ac:	4770      	bx	lr
 80039ae:	f803 1b01 	strb.w	r1, [r3], #1
 80039b2:	e7f9      	b.n	80039a8 <memset+0x4>

080039b4 <_init>:
 80039b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039b6:	bf00      	nop
 80039b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039ba:	bc08      	pop	{r3}
 80039bc:	469e      	mov	lr, r3
 80039be:	4770      	bx	lr

080039c0 <_fini>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr
