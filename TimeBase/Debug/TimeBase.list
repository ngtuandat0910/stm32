
TimeBase.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002dd4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08002f68  08002f68  00012f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f98  08002f98  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  08002f98  08002f98  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f98  08002f98  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f98  08002f98  00012f98  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f9c  08002f9c  00012f9c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002fa0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          00000070  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000007c  2000007c  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a13f  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001796  00000000  00000000  0002a17b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  0002b918  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 000008e0  00000000  00000000  0002c2b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001f386  00000000  00000000  0002cb90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000b8e1  00000000  00000000  0004bf16  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c12a3  00000000  00000000  000577f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00118a9a  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000279c  00000000  00000000  00118aec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08002f50 	.word	0x08002f50

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08002f50 	.word	0x08002f50

080001d4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	Count++;
 80001dc:	4b0d      	ldr	r3, [pc, #52]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	4b0b      	ldr	r3, [pc, #44]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001e6:	701a      	strb	r2, [r3, #0]
	if(htim->Instance == TIM2)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001f0:	d109      	bne.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x32>
	{
		  if (Count == 10)
 80001f2:	4b08      	ldr	r3, [pc, #32]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x40>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b0a      	cmp	r3, #10
 80001f8:	d105      	bne.n	8000206 <HAL_TIM_PeriodElapsedCallback+0x32>
		  {
			  StartLedFlag =1;
 80001fa:	4b07      	ldr	r3, [pc, #28]	; (8000218 <HAL_TIM_PeriodElapsedCallback+0x44>)
 80001fc:	2201      	movs	r2, #1
 80001fe:	701a      	strb	r2, [r3, #0]
			  Count = 0;
 8000200:	4b04      	ldr	r3, [pc, #16]	; (8000214 <HAL_TIM_PeriodElapsedCallback+0x40>)
 8000202:	2200      	movs	r2, #0
 8000204:	701a      	strb	r2, [r3, #0]
		  }
	}


}
 8000206:	bf00      	nop
 8000208:	370c      	adds	r7, #12
 800020a:	46bd      	mov	sp, r7
 800020c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000210:	4770      	bx	lr
 8000212:	bf00      	nop
 8000214:	20000075 	.word	0x20000075
 8000218:	20000074 	.word	0x20000074

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fa00 	bl	8000624 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f81c 	bl	8000260 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 f8c6 	bl	80003b8 <MX_GPIO_Init>
  MX_TIM2_Init();
 800022c:	f000 f876 	bl	800031c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 8000230:	4809      	ldr	r0, [pc, #36]	; (8000258 <main+0x3c>)
 8000232:	f002 f9ff 	bl	8002634 <HAL_TIM_Base_Start_IT>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if (StartLedFlag == 1) {
 8000236:	4b09      	ldr	r3, [pc, #36]	; (800025c <main+0x40>)
 8000238:	781b      	ldrb	r3, [r3, #0]
 800023a:	2b01      	cmp	r3, #1
 800023c:	d1fb      	bne.n	8000236 <main+0x1a>
		HAL_GPIO_TogglePin(GPIOA, LD2_Pin);
 800023e:	2120      	movs	r1, #32
 8000240:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000244:	f000 fd2c 	bl	8000ca0 <HAL_GPIO_TogglePin>
		HAL_Delay(50);
 8000248:	2032      	movs	r0, #50	; 0x32
 800024a:	f000 fa51 	bl	80006f0 <HAL_Delay>
		StartLedFlag = 0;
 800024e:	4b03      	ldr	r3, [pc, #12]	; (800025c <main+0x40>)
 8000250:	2200      	movs	r2, #0
 8000252:	701a      	strb	r2, [r3, #0]
	  if (StartLedFlag == 1) {
 8000254:	e7ef      	b.n	8000236 <main+0x1a>
 8000256:	bf00      	nop
 8000258:	20000028 	.word	0x20000028
 800025c:	20000074 	.word	0x20000074

08000260 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000260:	b580      	push	{r7, lr}
 8000262:	b0a6      	sub	sp, #152	; 0x98
 8000264:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000266:	f107 0370 	add.w	r3, r7, #112	; 0x70
 800026a:	2228      	movs	r2, #40	; 0x28
 800026c:	2100      	movs	r1, #0
 800026e:	4618      	mov	r0, r3
 8000270:	f002 fe66 	bl	8002f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000274:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000278:	2200      	movs	r2, #0
 800027a:	601a      	str	r2, [r3, #0]
 800027c:	605a      	str	r2, [r3, #4]
 800027e:	609a      	str	r2, [r3, #8]
 8000280:	60da      	str	r2, [r3, #12]
 8000282:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000284:	1d3b      	adds	r3, r7, #4
 8000286:	2258      	movs	r2, #88	; 0x58
 8000288:	2100      	movs	r1, #0
 800028a:	4618      	mov	r0, r3
 800028c:	f002 fe58 	bl	8002f40 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000290:	2302      	movs	r3, #2
 8000292:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000294:	2301      	movs	r3, #1
 8000296:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000298:	2310      	movs	r3, #16
 800029a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800029e:	2302      	movs	r3, #2
 80002a0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002a4:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002a8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002ac:	2300      	movs	r3, #0
 80002ae:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002b2:	2300      	movs	r3, #0
 80002b4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002b8:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002bc:	4618      	mov	r0, r3
 80002be:	f000 fd09 	bl	8000cd4 <HAL_RCC_OscConfig>
 80002c2:	4603      	mov	r3, r0
 80002c4:	2b00      	cmp	r3, #0
 80002c6:	d001      	beq.n	80002cc <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002c8:	f000 f8ee 	bl	80004a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002cc:	230f      	movs	r3, #15
 80002ce:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d0:	2302      	movs	r3, #2
 80002d2:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002d4:	2380      	movs	r3, #128	; 0x80
 80002d6:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80002d8:	f44f 63a0 	mov.w	r3, #1280	; 0x500
 80002dc:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002de:	2300      	movs	r3, #0
 80002e0:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002e2:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002e6:	2100      	movs	r1, #0
 80002e8:	4618      	mov	r0, r3
 80002ea:	f001 fd47 	bl	8001d7c <HAL_RCC_ClockConfig>
 80002ee:	4603      	mov	r3, r0
 80002f0:	2b00      	cmp	r3, #0
 80002f2:	d001      	beq.n	80002f8 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002f4:	f000 f8d8 	bl	80004a8 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM2;
 80002f8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80002fc:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 80002fe:	2300      	movs	r3, #0
 8000300:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000302:	1d3b      	adds	r3, r7, #4
 8000304:	4618      	mov	r0, r3
 8000306:	f001 ff1f 	bl	8002148 <HAL_RCCEx_PeriphCLKConfig>
 800030a:	4603      	mov	r3, r0
 800030c:	2b00      	cmp	r3, #0
 800030e:	d001      	beq.n	8000314 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000310:	f000 f8ca 	bl	80004a8 <Error_Handler>
  }
}
 8000314:	bf00      	nop
 8000316:	3798      	adds	r7, #152	; 0x98
 8000318:	46bd      	mov	sp, r7
 800031a:	bd80      	pop	{r7, pc}

0800031c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800031c:	b580      	push	{r7, lr}
 800031e:	b088      	sub	sp, #32
 8000320:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000322:	f107 0310 	add.w	r3, r7, #16
 8000326:	2200      	movs	r2, #0
 8000328:	601a      	str	r2, [r3, #0]
 800032a:	605a      	str	r2, [r3, #4]
 800032c:	609a      	str	r2, [r3, #8]
 800032e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000330:	1d3b      	adds	r3, r7, #4
 8000332:	2200      	movs	r2, #0
 8000334:	601a      	str	r2, [r3, #0]
 8000336:	605a      	str	r2, [r3, #4]
 8000338:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800033a:	4b1e      	ldr	r3, [pc, #120]	; (80003b4 <MX_TIM2_Init+0x98>)
 800033c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000340:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000342:	4b1c      	ldr	r3, [pc, #112]	; (80003b4 <MX_TIM2_Init+0x98>)
 8000344:	f641 723f 	movw	r2, #7999	; 0x1f3f
 8000348:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800034a:	4b1a      	ldr	r3, [pc, #104]	; (80003b4 <MX_TIM2_Init+0x98>)
 800034c:	2200      	movs	r2, #0
 800034e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000350:	4b18      	ldr	r3, [pc, #96]	; (80003b4 <MX_TIM2_Init+0x98>)
 8000352:	2263      	movs	r2, #99	; 0x63
 8000354:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000356:	4b17      	ldr	r3, [pc, #92]	; (80003b4 <MX_TIM2_Init+0x98>)
 8000358:	2200      	movs	r2, #0
 800035a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 800035c:	4b15      	ldr	r3, [pc, #84]	; (80003b4 <MX_TIM2_Init+0x98>)
 800035e:	2280      	movs	r2, #128	; 0x80
 8000360:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000362:	4814      	ldr	r0, [pc, #80]	; (80003b4 <MX_TIM2_Init+0x98>)
 8000364:	f002 f90e 	bl	8002584 <HAL_TIM_Base_Init>
 8000368:	4603      	mov	r3, r0
 800036a:	2b00      	cmp	r3, #0
 800036c:	d001      	beq.n	8000372 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 800036e:	f000 f89b 	bl	80004a8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000372:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000376:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000378:	f107 0310 	add.w	r3, r7, #16
 800037c:	4619      	mov	r1, r3
 800037e:	480d      	ldr	r0, [pc, #52]	; (80003b4 <MX_TIM2_Init+0x98>)
 8000380:	f002 fae7 	bl	8002952 <HAL_TIM_ConfigClockSource>
 8000384:	4603      	mov	r3, r0
 8000386:	2b00      	cmp	r3, #0
 8000388:	d001      	beq.n	800038e <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 800038a:	f000 f88d 	bl	80004a8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800038e:	2300      	movs	r3, #0
 8000390:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000392:	2300      	movs	r3, #0
 8000394:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000396:	1d3b      	adds	r3, r7, #4
 8000398:	4619      	mov	r1, r3
 800039a:	4806      	ldr	r0, [pc, #24]	; (80003b4 <MX_TIM2_Init+0x98>)
 800039c:	f002 fd02 	bl	8002da4 <HAL_TIMEx_MasterConfigSynchronization>
 80003a0:	4603      	mov	r3, r0
 80003a2:	2b00      	cmp	r3, #0
 80003a4:	d001      	beq.n	80003aa <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80003a6:	f000 f87f 	bl	80004a8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80003aa:	bf00      	nop
 80003ac:	3720      	adds	r7, #32
 80003ae:	46bd      	mov	sp, r7
 80003b0:	bd80      	pop	{r7, pc}
 80003b2:	bf00      	nop
 80003b4:	20000028 	.word	0x20000028

080003b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80003b8:	b580      	push	{r7, lr}
 80003ba:	b08a      	sub	sp, #40	; 0x28
 80003bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80003be:	f107 0314 	add.w	r3, r7, #20
 80003c2:	2200      	movs	r2, #0
 80003c4:	601a      	str	r2, [r3, #0]
 80003c6:	605a      	str	r2, [r3, #4]
 80003c8:	609a      	str	r2, [r3, #8]
 80003ca:	60da      	str	r2, [r3, #12]
 80003cc:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80003ce:	4b34      	ldr	r3, [pc, #208]	; (80004a0 <MX_GPIO_Init+0xe8>)
 80003d0:	695b      	ldr	r3, [r3, #20]
 80003d2:	4a33      	ldr	r2, [pc, #204]	; (80004a0 <MX_GPIO_Init+0xe8>)
 80003d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80003d8:	6153      	str	r3, [r2, #20]
 80003da:	4b31      	ldr	r3, [pc, #196]	; (80004a0 <MX_GPIO_Init+0xe8>)
 80003dc:	695b      	ldr	r3, [r3, #20]
 80003de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80003e2:	613b      	str	r3, [r7, #16]
 80003e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80003e6:	4b2e      	ldr	r3, [pc, #184]	; (80004a0 <MX_GPIO_Init+0xe8>)
 80003e8:	695b      	ldr	r3, [r3, #20]
 80003ea:	4a2d      	ldr	r2, [pc, #180]	; (80004a0 <MX_GPIO_Init+0xe8>)
 80003ec:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80003f0:	6153      	str	r3, [r2, #20]
 80003f2:	4b2b      	ldr	r3, [pc, #172]	; (80004a0 <MX_GPIO_Init+0xe8>)
 80003f4:	695b      	ldr	r3, [r3, #20]
 80003f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80003fa:	60fb      	str	r3, [r7, #12]
 80003fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003fe:	4b28      	ldr	r3, [pc, #160]	; (80004a0 <MX_GPIO_Init+0xe8>)
 8000400:	695b      	ldr	r3, [r3, #20]
 8000402:	4a27      	ldr	r2, [pc, #156]	; (80004a0 <MX_GPIO_Init+0xe8>)
 8000404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000408:	6153      	str	r3, [r2, #20]
 800040a:	4b25      	ldr	r3, [pc, #148]	; (80004a0 <MX_GPIO_Init+0xe8>)
 800040c:	695b      	ldr	r3, [r3, #20]
 800040e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000412:	60bb      	str	r3, [r7, #8]
 8000414:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000416:	4b22      	ldr	r3, [pc, #136]	; (80004a0 <MX_GPIO_Init+0xe8>)
 8000418:	695b      	ldr	r3, [r3, #20]
 800041a:	4a21      	ldr	r2, [pc, #132]	; (80004a0 <MX_GPIO_Init+0xe8>)
 800041c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000420:	6153      	str	r3, [r2, #20]
 8000422:	4b1f      	ldr	r3, [pc, #124]	; (80004a0 <MX_GPIO_Init+0xe8>)
 8000424:	695b      	ldr	r3, [r3, #20]
 8000426:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800042a:	607b      	str	r3, [r7, #4]
 800042c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800042e:	2200      	movs	r2, #0
 8000430:	2120      	movs	r1, #32
 8000432:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000436:	f000 fc1b 	bl	8000c70 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800043a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800043e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000440:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000444:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000446:	2300      	movs	r3, #0
 8000448:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800044a:	f107 0314 	add.w	r3, r7, #20
 800044e:	4619      	mov	r1, r3
 8000450:	4814      	ldr	r0, [pc, #80]	; (80004a4 <MX_GPIO_Init+0xec>)
 8000452:	f000 fa83 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000456:	230c      	movs	r3, #12
 8000458:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800045a:	2302      	movs	r3, #2
 800045c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800045e:	2300      	movs	r3, #0
 8000460:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000462:	2300      	movs	r3, #0
 8000464:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000466:	2307      	movs	r3, #7
 8000468:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800046a:	f107 0314 	add.w	r3, r7, #20
 800046e:	4619      	mov	r1, r3
 8000470:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000474:	f000 fa72 	bl	800095c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000478:	2320      	movs	r3, #32
 800047a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800047c:	2301      	movs	r3, #1
 800047e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000480:	2300      	movs	r3, #0
 8000482:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000484:	2300      	movs	r3, #0
 8000486:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000488:	f107 0314 	add.w	r3, r7, #20
 800048c:	4619      	mov	r1, r3
 800048e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000492:	f000 fa63 	bl	800095c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000496:	bf00      	nop
 8000498:	3728      	adds	r7, #40	; 0x28
 800049a:	46bd      	mov	sp, r7
 800049c:	bd80      	pop	{r7, pc}
 800049e:	bf00      	nop
 80004a0:	40021000 	.word	0x40021000
 80004a4:	48000800 	.word	0x48000800

080004a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80004a8:	b480      	push	{r7}
 80004aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80004ac:	b672      	cpsid	i
}
 80004ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80004b0:	e7fe      	b.n	80004b0 <Error_Handler+0x8>
	...

080004b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80004b4:	b580      	push	{r7, lr}
 80004b6:	b082      	sub	sp, #8
 80004b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80004ba:	4b0f      	ldr	r3, [pc, #60]	; (80004f8 <HAL_MspInit+0x44>)
 80004bc:	699b      	ldr	r3, [r3, #24]
 80004be:	4a0e      	ldr	r2, [pc, #56]	; (80004f8 <HAL_MspInit+0x44>)
 80004c0:	f043 0301 	orr.w	r3, r3, #1
 80004c4:	6193      	str	r3, [r2, #24]
 80004c6:	4b0c      	ldr	r3, [pc, #48]	; (80004f8 <HAL_MspInit+0x44>)
 80004c8:	699b      	ldr	r3, [r3, #24]
 80004ca:	f003 0301 	and.w	r3, r3, #1
 80004ce:	607b      	str	r3, [r7, #4]
 80004d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80004d2:	4b09      	ldr	r3, [pc, #36]	; (80004f8 <HAL_MspInit+0x44>)
 80004d4:	69db      	ldr	r3, [r3, #28]
 80004d6:	4a08      	ldr	r2, [pc, #32]	; (80004f8 <HAL_MspInit+0x44>)
 80004d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80004dc:	61d3      	str	r3, [r2, #28]
 80004de:	4b06      	ldr	r3, [pc, #24]	; (80004f8 <HAL_MspInit+0x44>)
 80004e0:	69db      	ldr	r3, [r3, #28]
 80004e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80004e6:	603b      	str	r3, [r7, #0]
 80004e8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80004ea:	2007      	movs	r0, #7
 80004ec:	f000 f9f4 	bl	80008d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80004f0:	bf00      	nop
 80004f2:	3708      	adds	r7, #8
 80004f4:	46bd      	mov	sp, r7
 80004f6:	bd80      	pop	{r7, pc}
 80004f8:	40021000 	.word	0x40021000

080004fc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	681b      	ldr	r3, [r3, #0]
 8000508:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800050c:	d113      	bne.n	8000536 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800050e:	4b0c      	ldr	r3, [pc, #48]	; (8000540 <HAL_TIM_Base_MspInit+0x44>)
 8000510:	69db      	ldr	r3, [r3, #28]
 8000512:	4a0b      	ldr	r2, [pc, #44]	; (8000540 <HAL_TIM_Base_MspInit+0x44>)
 8000514:	f043 0301 	orr.w	r3, r3, #1
 8000518:	61d3      	str	r3, [r2, #28]
 800051a:	4b09      	ldr	r3, [pc, #36]	; (8000540 <HAL_TIM_Base_MspInit+0x44>)
 800051c:	69db      	ldr	r3, [r3, #28]
 800051e:	f003 0301 	and.w	r3, r3, #1
 8000522:	60fb      	str	r3, [r7, #12]
 8000524:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000526:	2200      	movs	r2, #0
 8000528:	2100      	movs	r1, #0
 800052a:	201c      	movs	r0, #28
 800052c:	f000 f9df 	bl	80008ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000530:	201c      	movs	r0, #28
 8000532:	f000 f9f8 	bl	8000926 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000536:	bf00      	nop
 8000538:	3710      	adds	r7, #16
 800053a:	46bd      	mov	sp, r7
 800053c:	bd80      	pop	{r7, pc}
 800053e:	bf00      	nop
 8000540:	40021000 	.word	0x40021000

08000544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000544:	b480      	push	{r7}
 8000546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000548:	e7fe      	b.n	8000548 <NMI_Handler+0x4>

0800054a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800054a:	b480      	push	{r7}
 800054c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800054e:	e7fe      	b.n	800054e <HardFault_Handler+0x4>

08000550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000550:	b480      	push	{r7}
 8000552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000554:	e7fe      	b.n	8000554 <MemManage_Handler+0x4>

08000556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000556:	b480      	push	{r7}
 8000558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800055a:	e7fe      	b.n	800055a <BusFault_Handler+0x4>

0800055c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000560:	e7fe      	b.n	8000560 <UsageFault_Handler+0x4>

08000562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000562:	b480      	push	{r7}
 8000564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000566:	bf00      	nop
 8000568:	46bd      	mov	sp, r7
 800056a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800056e:	4770      	bx	lr

08000570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000570:	b480      	push	{r7}
 8000572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000574:	bf00      	nop
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr

0800057e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800057e:	b480      	push	{r7}
 8000580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000582:	bf00      	nop
 8000584:	46bd      	mov	sp, r7
 8000586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800058a:	4770      	bx	lr

0800058c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800058c:	b580      	push	{r7, lr}
 800058e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000590:	f000 f88e 	bl	80006b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000594:	bf00      	nop
 8000596:	bd80      	pop	{r7, pc}

08000598 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800059c:	4802      	ldr	r0, [pc, #8]	; (80005a8 <TIM2_IRQHandler+0x10>)
 800059e:	f002 f8b9 	bl	8002714 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80005a2:	bf00      	nop
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000028 	.word	0x20000028

080005ac <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80005b0:	4b06      	ldr	r3, [pc, #24]	; (80005cc <SystemInit+0x20>)
 80005b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80005b6:	4a05      	ldr	r2, [pc, #20]	; (80005cc <SystemInit+0x20>)
 80005b8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80005bc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80005c0:	bf00      	nop
 80005c2:	46bd      	mov	sp, r7
 80005c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005c8:	4770      	bx	lr
 80005ca:	bf00      	nop
 80005cc:	e000ed00 	.word	0xe000ed00

080005d0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80005d0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000608 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80005d4:	f7ff ffea 	bl	80005ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80005d8:	480c      	ldr	r0, [pc, #48]	; (800060c <LoopForever+0x6>)
  ldr r1, =_edata
 80005da:	490d      	ldr	r1, [pc, #52]	; (8000610 <LoopForever+0xa>)
  ldr r2, =_sidata
 80005dc:	4a0d      	ldr	r2, [pc, #52]	; (8000614 <LoopForever+0xe>)
  movs r3, #0
 80005de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80005e0:	e002      	b.n	80005e8 <LoopCopyDataInit>

080005e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80005e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80005e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80005e6:	3304      	adds	r3, #4

080005e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80005e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80005ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80005ec:	d3f9      	bcc.n	80005e2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80005ee:	4a0a      	ldr	r2, [pc, #40]	; (8000618 <LoopForever+0x12>)
  ldr r4, =_ebss
 80005f0:	4c0a      	ldr	r4, [pc, #40]	; (800061c <LoopForever+0x16>)
  movs r3, #0
 80005f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80005f4:	e001      	b.n	80005fa <LoopFillZerobss>

080005f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80005f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80005f8:	3204      	adds	r2, #4

080005fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80005fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80005fc:	d3fb      	bcc.n	80005f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80005fe:	f002 fc7b 	bl	8002ef8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000602:	f7ff fe0b 	bl	800021c <main>

08000606 <LoopForever>:

LoopForever:
    b LoopForever
 8000606:	e7fe      	b.n	8000606 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000608:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800060c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000610:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000614:	08002fa0 	.word	0x08002fa0
  ldr r2, =_sbss
 8000618:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800061c:	2000007c 	.word	0x2000007c

08000620 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000620:	e7fe      	b.n	8000620 <ADC1_2_IRQHandler>
	...

08000624 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000624:	b580      	push	{r7, lr}
 8000626:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000628:	4b08      	ldr	r3, [pc, #32]	; (800064c <HAL_Init+0x28>)
 800062a:	681b      	ldr	r3, [r3, #0]
 800062c:	4a07      	ldr	r2, [pc, #28]	; (800064c <HAL_Init+0x28>)
 800062e:	f043 0310 	orr.w	r3, r3, #16
 8000632:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000634:	2003      	movs	r0, #3
 8000636:	f000 f94f 	bl	80008d8 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800063a:	2000      	movs	r0, #0
 800063c:	f000 f808 	bl	8000650 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000640:	f7ff ff38 	bl	80004b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000644:	2300      	movs	r3, #0
}
 8000646:	4618      	mov	r0, r3
 8000648:	bd80      	pop	{r7, pc}
 800064a:	bf00      	nop
 800064c:	40022000 	.word	0x40022000

08000650 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b082      	sub	sp, #8
 8000654:	af00      	add	r7, sp, #0
 8000656:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000658:	4b12      	ldr	r3, [pc, #72]	; (80006a4 <HAL_InitTick+0x54>)
 800065a:	681a      	ldr	r2, [r3, #0]
 800065c:	4b12      	ldr	r3, [pc, #72]	; (80006a8 <HAL_InitTick+0x58>)
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	4619      	mov	r1, r3
 8000662:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000666:	fbb3 f3f1 	udiv	r3, r3, r1
 800066a:	fbb2 f3f3 	udiv	r3, r2, r3
 800066e:	4618      	mov	r0, r3
 8000670:	f000 f967 	bl	8000942 <HAL_SYSTICK_Config>
 8000674:	4603      	mov	r3, r0
 8000676:	2b00      	cmp	r3, #0
 8000678:	d001      	beq.n	800067e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800067a:	2301      	movs	r3, #1
 800067c:	e00e      	b.n	800069c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800067e:	687b      	ldr	r3, [r7, #4]
 8000680:	2b0f      	cmp	r3, #15
 8000682:	d80a      	bhi.n	800069a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000684:	2200      	movs	r2, #0
 8000686:	6879      	ldr	r1, [r7, #4]
 8000688:	f04f 30ff 	mov.w	r0, #4294967295
 800068c:	f000 f92f 	bl	80008ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000690:	4a06      	ldr	r2, [pc, #24]	; (80006ac <HAL_InitTick+0x5c>)
 8000692:	687b      	ldr	r3, [r7, #4]
 8000694:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8000696:	2300      	movs	r3, #0
 8000698:	e000      	b.n	800069c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800069a:	2301      	movs	r3, #1
}
 800069c:	4618      	mov	r0, r3
 800069e:	3708      	adds	r7, #8
 80006a0:	46bd      	mov	sp, r7
 80006a2:	bd80      	pop	{r7, pc}
 80006a4:	20000000 	.word	0x20000000
 80006a8:	20000008 	.word	0x20000008
 80006ac:	20000004 	.word	0x20000004

080006b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006b4:	4b06      	ldr	r3, [pc, #24]	; (80006d0 <HAL_IncTick+0x20>)
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	461a      	mov	r2, r3
 80006ba:	4b06      	ldr	r3, [pc, #24]	; (80006d4 <HAL_IncTick+0x24>)
 80006bc:	681b      	ldr	r3, [r3, #0]
 80006be:	4413      	add	r3, r2
 80006c0:	4a04      	ldr	r2, [pc, #16]	; (80006d4 <HAL_IncTick+0x24>)
 80006c2:	6013      	str	r3, [r2, #0]
}
 80006c4:	bf00      	nop
 80006c6:	46bd      	mov	sp, r7
 80006c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006cc:	4770      	bx	lr
 80006ce:	bf00      	nop
 80006d0:	20000008 	.word	0x20000008
 80006d4:	20000078 	.word	0x20000078

080006d8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80006d8:	b480      	push	{r7}
 80006da:	af00      	add	r7, sp, #0
  return uwTick;  
 80006dc:	4b03      	ldr	r3, [pc, #12]	; (80006ec <HAL_GetTick+0x14>)
 80006de:	681b      	ldr	r3, [r3, #0]
}
 80006e0:	4618      	mov	r0, r3
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000078 	.word	0x20000078

080006f0 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80006f8:	f7ff ffee 	bl	80006d8 <HAL_GetTick>
 80006fc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000708:	d005      	beq.n	8000716 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800070a:	4b0a      	ldr	r3, [pc, #40]	; (8000734 <HAL_Delay+0x44>)
 800070c:	781b      	ldrb	r3, [r3, #0]
 800070e:	461a      	mov	r2, r3
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	4413      	add	r3, r2
 8000714:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8000716:	bf00      	nop
 8000718:	f7ff ffde 	bl	80006d8 <HAL_GetTick>
 800071c:	4602      	mov	r2, r0
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	1ad3      	subs	r3, r2, r3
 8000722:	68fa      	ldr	r2, [r7, #12]
 8000724:	429a      	cmp	r2, r3
 8000726:	d8f7      	bhi.n	8000718 <HAL_Delay+0x28>
  {
  }
}
 8000728:	bf00      	nop
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	20000008 	.word	0x20000008

08000738 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000738:	b480      	push	{r7}
 800073a:	b085      	sub	sp, #20
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000740:	687b      	ldr	r3, [r7, #4]
 8000742:	f003 0307 	and.w	r3, r3, #7
 8000746:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000748:	4b0c      	ldr	r3, [pc, #48]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800074a:	68db      	ldr	r3, [r3, #12]
 800074c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800074e:	68ba      	ldr	r2, [r7, #8]
 8000750:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000754:	4013      	ands	r3, r2
 8000756:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000758:	68fb      	ldr	r3, [r7, #12]
 800075a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800075c:	68bb      	ldr	r3, [r7, #8]
 800075e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000760:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000764:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000768:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800076a:	4a04      	ldr	r2, [pc, #16]	; (800077c <__NVIC_SetPriorityGrouping+0x44>)
 800076c:	68bb      	ldr	r3, [r7, #8]
 800076e:	60d3      	str	r3, [r2, #12]
}
 8000770:	bf00      	nop
 8000772:	3714      	adds	r7, #20
 8000774:	46bd      	mov	sp, r7
 8000776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800077a:	4770      	bx	lr
 800077c:	e000ed00 	.word	0xe000ed00

08000780 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000780:	b480      	push	{r7}
 8000782:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000784:	4b04      	ldr	r3, [pc, #16]	; (8000798 <__NVIC_GetPriorityGrouping+0x18>)
 8000786:	68db      	ldr	r3, [r3, #12]
 8000788:	0a1b      	lsrs	r3, r3, #8
 800078a:	f003 0307 	and.w	r3, r3, #7
}
 800078e:	4618      	mov	r0, r3
 8000790:	46bd      	mov	sp, r7
 8000792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000796:	4770      	bx	lr
 8000798:	e000ed00 	.word	0xe000ed00

0800079c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800079c:	b480      	push	{r7}
 800079e:	b083      	sub	sp, #12
 80007a0:	af00      	add	r7, sp, #0
 80007a2:	4603      	mov	r3, r0
 80007a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	db0b      	blt.n	80007c6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80007ae:	79fb      	ldrb	r3, [r7, #7]
 80007b0:	f003 021f 	and.w	r2, r3, #31
 80007b4:	4907      	ldr	r1, [pc, #28]	; (80007d4 <__NVIC_EnableIRQ+0x38>)
 80007b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007ba:	095b      	lsrs	r3, r3, #5
 80007bc:	2001      	movs	r0, #1
 80007be:	fa00 f202 	lsl.w	r2, r0, r2
 80007c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007c6:	bf00      	nop
 80007c8:	370c      	adds	r7, #12
 80007ca:	46bd      	mov	sp, r7
 80007cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007d0:	4770      	bx	lr
 80007d2:	bf00      	nop
 80007d4:	e000e100 	.word	0xe000e100

080007d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007d8:	b480      	push	{r7}
 80007da:	b083      	sub	sp, #12
 80007dc:	af00      	add	r7, sp, #0
 80007de:	4603      	mov	r3, r0
 80007e0:	6039      	str	r1, [r7, #0]
 80007e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	db0a      	blt.n	8000802 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007ec:	683b      	ldr	r3, [r7, #0]
 80007ee:	b2da      	uxtb	r2, r3
 80007f0:	490c      	ldr	r1, [pc, #48]	; (8000824 <__NVIC_SetPriority+0x4c>)
 80007f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007f6:	0112      	lsls	r2, r2, #4
 80007f8:	b2d2      	uxtb	r2, r2
 80007fa:	440b      	add	r3, r1
 80007fc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000800:	e00a      	b.n	8000818 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	b2da      	uxtb	r2, r3
 8000806:	4908      	ldr	r1, [pc, #32]	; (8000828 <__NVIC_SetPriority+0x50>)
 8000808:	79fb      	ldrb	r3, [r7, #7]
 800080a:	f003 030f 	and.w	r3, r3, #15
 800080e:	3b04      	subs	r3, #4
 8000810:	0112      	lsls	r2, r2, #4
 8000812:	b2d2      	uxtb	r2, r2
 8000814:	440b      	add	r3, r1
 8000816:	761a      	strb	r2, [r3, #24]
}
 8000818:	bf00      	nop
 800081a:	370c      	adds	r7, #12
 800081c:	46bd      	mov	sp, r7
 800081e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000822:	4770      	bx	lr
 8000824:	e000e100 	.word	0xe000e100
 8000828:	e000ed00 	.word	0xe000ed00

0800082c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800082c:	b480      	push	{r7}
 800082e:	b089      	sub	sp, #36	; 0x24
 8000830:	af00      	add	r7, sp, #0
 8000832:	60f8      	str	r0, [r7, #12]
 8000834:	60b9      	str	r1, [r7, #8]
 8000836:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000838:	68fb      	ldr	r3, [r7, #12]
 800083a:	f003 0307 	and.w	r3, r3, #7
 800083e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000840:	69fb      	ldr	r3, [r7, #28]
 8000842:	f1c3 0307 	rsb	r3, r3, #7
 8000846:	2b04      	cmp	r3, #4
 8000848:	bf28      	it	cs
 800084a:	2304      	movcs	r3, #4
 800084c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800084e:	69fb      	ldr	r3, [r7, #28]
 8000850:	3304      	adds	r3, #4
 8000852:	2b06      	cmp	r3, #6
 8000854:	d902      	bls.n	800085c <NVIC_EncodePriority+0x30>
 8000856:	69fb      	ldr	r3, [r7, #28]
 8000858:	3b03      	subs	r3, #3
 800085a:	e000      	b.n	800085e <NVIC_EncodePriority+0x32>
 800085c:	2300      	movs	r3, #0
 800085e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000860:	f04f 32ff 	mov.w	r2, #4294967295
 8000864:	69bb      	ldr	r3, [r7, #24]
 8000866:	fa02 f303 	lsl.w	r3, r2, r3
 800086a:	43da      	mvns	r2, r3
 800086c:	68bb      	ldr	r3, [r7, #8]
 800086e:	401a      	ands	r2, r3
 8000870:	697b      	ldr	r3, [r7, #20]
 8000872:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000874:	f04f 31ff 	mov.w	r1, #4294967295
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	fa01 f303 	lsl.w	r3, r1, r3
 800087e:	43d9      	mvns	r1, r3
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000884:	4313      	orrs	r3, r2
         );
}
 8000886:	4618      	mov	r0, r3
 8000888:	3724      	adds	r7, #36	; 0x24
 800088a:	46bd      	mov	sp, r7
 800088c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000890:	4770      	bx	lr
	...

08000894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000894:	b580      	push	{r7, lr}
 8000896:	b082      	sub	sp, #8
 8000898:	af00      	add	r7, sp, #0
 800089a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800089c:	687b      	ldr	r3, [r7, #4]
 800089e:	3b01      	subs	r3, #1
 80008a0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80008a4:	d301      	bcc.n	80008aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80008a6:	2301      	movs	r3, #1
 80008a8:	e00f      	b.n	80008ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80008aa:	4a0a      	ldr	r2, [pc, #40]	; (80008d4 <SysTick_Config+0x40>)
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	3b01      	subs	r3, #1
 80008b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80008b2:	210f      	movs	r1, #15
 80008b4:	f04f 30ff 	mov.w	r0, #4294967295
 80008b8:	f7ff ff8e 	bl	80007d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80008bc:	4b05      	ldr	r3, [pc, #20]	; (80008d4 <SysTick_Config+0x40>)
 80008be:	2200      	movs	r2, #0
 80008c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008c2:	4b04      	ldr	r3, [pc, #16]	; (80008d4 <SysTick_Config+0x40>)
 80008c4:	2207      	movs	r2, #7
 80008c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008c8:	2300      	movs	r3, #0
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	3708      	adds	r7, #8
 80008ce:	46bd      	mov	sp, r7
 80008d0:	bd80      	pop	{r7, pc}
 80008d2:	bf00      	nop
 80008d4:	e000e010 	.word	0xe000e010

080008d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008d8:	b580      	push	{r7, lr}
 80008da:	b082      	sub	sp, #8
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008e0:	6878      	ldr	r0, [r7, #4]
 80008e2:	f7ff ff29 	bl	8000738 <__NVIC_SetPriorityGrouping>
}
 80008e6:	bf00      	nop
 80008e8:	3708      	adds	r7, #8
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}

080008ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ee:	b580      	push	{r7, lr}
 80008f0:	b086      	sub	sp, #24
 80008f2:	af00      	add	r7, sp, #0
 80008f4:	4603      	mov	r3, r0
 80008f6:	60b9      	str	r1, [r7, #8]
 80008f8:	607a      	str	r2, [r7, #4]
 80008fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80008fc:	2300      	movs	r3, #0
 80008fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000900:	f7ff ff3e 	bl	8000780 <__NVIC_GetPriorityGrouping>
 8000904:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	68b9      	ldr	r1, [r7, #8]
 800090a:	6978      	ldr	r0, [r7, #20]
 800090c:	f7ff ff8e 	bl	800082c <NVIC_EncodePriority>
 8000910:	4602      	mov	r2, r0
 8000912:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000916:	4611      	mov	r1, r2
 8000918:	4618      	mov	r0, r3
 800091a:	f7ff ff5d 	bl	80007d8 <__NVIC_SetPriority>
}
 800091e:	bf00      	nop
 8000920:	3718      	adds	r7, #24
 8000922:	46bd      	mov	sp, r7
 8000924:	bd80      	pop	{r7, pc}

08000926 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000926:	b580      	push	{r7, lr}
 8000928:	b082      	sub	sp, #8
 800092a:	af00      	add	r7, sp, #0
 800092c:	4603      	mov	r3, r0
 800092e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000930:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000934:	4618      	mov	r0, r3
 8000936:	f7ff ff31 	bl	800079c <__NVIC_EnableIRQ>
}
 800093a:	bf00      	nop
 800093c:	3708      	adds	r7, #8
 800093e:	46bd      	mov	sp, r7
 8000940:	bd80      	pop	{r7, pc}

08000942 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800094a:	6878      	ldr	r0, [r7, #4]
 800094c:	f7ff ffa2 	bl	8000894 <SysTick_Config>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	3708      	adds	r7, #8
 8000956:	46bd      	mov	sp, r7
 8000958:	bd80      	pop	{r7, pc}
	...

0800095c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800095c:	b480      	push	{r7}
 800095e:	b087      	sub	sp, #28
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000966:	2300      	movs	r3, #0
 8000968:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800096a:	e160      	b.n	8000c2e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	681a      	ldr	r2, [r3, #0]
 8000970:	2101      	movs	r1, #1
 8000972:	697b      	ldr	r3, [r7, #20]
 8000974:	fa01 f303 	lsl.w	r3, r1, r3
 8000978:	4013      	ands	r3, r2
 800097a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800097c:	68fb      	ldr	r3, [r7, #12]
 800097e:	2b00      	cmp	r3, #0
 8000980:	f000 8152 	beq.w	8000c28 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000984:	683b      	ldr	r3, [r7, #0]
 8000986:	685b      	ldr	r3, [r3, #4]
 8000988:	f003 0303 	and.w	r3, r3, #3
 800098c:	2b01      	cmp	r3, #1
 800098e:	d005      	beq.n	800099c <HAL_GPIO_Init+0x40>
 8000990:	683b      	ldr	r3, [r7, #0]
 8000992:	685b      	ldr	r3, [r3, #4]
 8000994:	f003 0303 	and.w	r3, r3, #3
 8000998:	2b02      	cmp	r3, #2
 800099a:	d130      	bne.n	80009fe <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	689b      	ldr	r3, [r3, #8]
 80009a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 80009a2:	697b      	ldr	r3, [r7, #20]
 80009a4:	005b      	lsls	r3, r3, #1
 80009a6:	2203      	movs	r2, #3
 80009a8:	fa02 f303 	lsl.w	r3, r2, r3
 80009ac:	43db      	mvns	r3, r3
 80009ae:	693a      	ldr	r2, [r7, #16]
 80009b0:	4013      	ands	r3, r2
 80009b2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80009b4:	683b      	ldr	r3, [r7, #0]
 80009b6:	68da      	ldr	r2, [r3, #12]
 80009b8:	697b      	ldr	r3, [r7, #20]
 80009ba:	005b      	lsls	r3, r3, #1
 80009bc:	fa02 f303 	lsl.w	r3, r2, r3
 80009c0:	693a      	ldr	r2, [r7, #16]
 80009c2:	4313      	orrs	r3, r2
 80009c4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	693a      	ldr	r2, [r7, #16]
 80009ca:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	685b      	ldr	r3, [r3, #4]
 80009d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80009d2:	2201      	movs	r2, #1
 80009d4:	697b      	ldr	r3, [r7, #20]
 80009d6:	fa02 f303 	lsl.w	r3, r2, r3
 80009da:	43db      	mvns	r3, r3
 80009dc:	693a      	ldr	r2, [r7, #16]
 80009de:	4013      	ands	r3, r2
 80009e0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80009e2:	683b      	ldr	r3, [r7, #0]
 80009e4:	685b      	ldr	r3, [r3, #4]
 80009e6:	091b      	lsrs	r3, r3, #4
 80009e8:	f003 0201 	and.w	r2, r3, #1
 80009ec:	697b      	ldr	r3, [r7, #20]
 80009ee:	fa02 f303 	lsl.w	r3, r2, r3
 80009f2:	693a      	ldr	r2, [r7, #16]
 80009f4:	4313      	orrs	r3, r2
 80009f6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	693a      	ldr	r2, [r7, #16]
 80009fc:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80009fe:	683b      	ldr	r3, [r7, #0]
 8000a00:	685b      	ldr	r3, [r3, #4]
 8000a02:	f003 0303 	and.w	r3, r3, #3
 8000a06:	2b03      	cmp	r3, #3
 8000a08:	d017      	beq.n	8000a3a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000a0a:	687b      	ldr	r3, [r7, #4]
 8000a0c:	68db      	ldr	r3, [r3, #12]
 8000a0e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000a10:	697b      	ldr	r3, [r7, #20]
 8000a12:	005b      	lsls	r3, r3, #1
 8000a14:	2203      	movs	r2, #3
 8000a16:	fa02 f303 	lsl.w	r3, r2, r3
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	693a      	ldr	r2, [r7, #16]
 8000a1e:	4013      	ands	r3, r2
 8000a20:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000a22:	683b      	ldr	r3, [r7, #0]
 8000a24:	689a      	ldr	r2, [r3, #8]
 8000a26:	697b      	ldr	r3, [r7, #20]
 8000a28:	005b      	lsls	r3, r3, #1
 8000a2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a2e:	693a      	ldr	r2, [r7, #16]
 8000a30:	4313      	orrs	r3, r2
 8000a32:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	693a      	ldr	r2, [r7, #16]
 8000a38:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	685b      	ldr	r3, [r3, #4]
 8000a3e:	f003 0303 	and.w	r3, r3, #3
 8000a42:	2b02      	cmp	r3, #2
 8000a44:	d123      	bne.n	8000a8e <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000a46:	697b      	ldr	r3, [r7, #20]
 8000a48:	08da      	lsrs	r2, r3, #3
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	3208      	adds	r2, #8
 8000a4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000a52:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	f003 0307 	and.w	r3, r3, #7
 8000a5a:	009b      	lsls	r3, r3, #2
 8000a5c:	220f      	movs	r2, #15
 8000a5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000a62:	43db      	mvns	r3, r3
 8000a64:	693a      	ldr	r2, [r7, #16]
 8000a66:	4013      	ands	r3, r2
 8000a68:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000a6a:	683b      	ldr	r3, [r7, #0]
 8000a6c:	691a      	ldr	r2, [r3, #16]
 8000a6e:	697b      	ldr	r3, [r7, #20]
 8000a70:	f003 0307 	and.w	r3, r3, #7
 8000a74:	009b      	lsls	r3, r3, #2
 8000a76:	fa02 f303 	lsl.w	r3, r2, r3
 8000a7a:	693a      	ldr	r2, [r7, #16]
 8000a7c:	4313      	orrs	r3, r2
 8000a7e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000a80:	697b      	ldr	r3, [r7, #20]
 8000a82:	08da      	lsrs	r2, r3, #3
 8000a84:	687b      	ldr	r3, [r7, #4]
 8000a86:	3208      	adds	r2, #8
 8000a88:	6939      	ldr	r1, [r7, #16]
 8000a8a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000a94:	697b      	ldr	r3, [r7, #20]
 8000a96:	005b      	lsls	r3, r3, #1
 8000a98:	2203      	movs	r2, #3
 8000a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a9e:	43db      	mvns	r3, r3
 8000aa0:	693a      	ldr	r2, [r7, #16]
 8000aa2:	4013      	ands	r3, r2
 8000aa4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000aa6:	683b      	ldr	r3, [r7, #0]
 8000aa8:	685b      	ldr	r3, [r3, #4]
 8000aaa:	f003 0203 	and.w	r2, r3, #3
 8000aae:	697b      	ldr	r3, [r7, #20]
 8000ab0:	005b      	lsls	r3, r3, #1
 8000ab2:	fa02 f303 	lsl.w	r3, r2, r3
 8000ab6:	693a      	ldr	r2, [r7, #16]
 8000ab8:	4313      	orrs	r3, r2
 8000aba:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000abc:	687b      	ldr	r3, [r7, #4]
 8000abe:	693a      	ldr	r2, [r7, #16]
 8000ac0:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000ac2:	683b      	ldr	r3, [r7, #0]
 8000ac4:	685b      	ldr	r3, [r3, #4]
 8000ac6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000aca:	2b00      	cmp	r3, #0
 8000acc:	f000 80ac 	beq.w	8000c28 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000ad0:	4b5e      	ldr	r3, [pc, #376]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000ad2:	699b      	ldr	r3, [r3, #24]
 8000ad4:	4a5d      	ldr	r2, [pc, #372]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000ad6:	f043 0301 	orr.w	r3, r3, #1
 8000ada:	6193      	str	r3, [r2, #24]
 8000adc:	4b5b      	ldr	r3, [pc, #364]	; (8000c4c <HAL_GPIO_Init+0x2f0>)
 8000ade:	699b      	ldr	r3, [r3, #24]
 8000ae0:	f003 0301 	and.w	r3, r3, #1
 8000ae4:	60bb      	str	r3, [r7, #8]
 8000ae6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000ae8:	4a59      	ldr	r2, [pc, #356]	; (8000c50 <HAL_GPIO_Init+0x2f4>)
 8000aea:	697b      	ldr	r3, [r7, #20]
 8000aec:	089b      	lsrs	r3, r3, #2
 8000aee:	3302      	adds	r3, #2
 8000af0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000af4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000af6:	697b      	ldr	r3, [r7, #20]
 8000af8:	f003 0303 	and.w	r3, r3, #3
 8000afc:	009b      	lsls	r3, r3, #2
 8000afe:	220f      	movs	r2, #15
 8000b00:	fa02 f303 	lsl.w	r3, r2, r3
 8000b04:	43db      	mvns	r3, r3
 8000b06:	693a      	ldr	r2, [r7, #16]
 8000b08:	4013      	ands	r3, r2
 8000b0a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b12:	d025      	beq.n	8000b60 <HAL_GPIO_Init+0x204>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	4a4f      	ldr	r2, [pc, #316]	; (8000c54 <HAL_GPIO_Init+0x2f8>)
 8000b18:	4293      	cmp	r3, r2
 8000b1a:	d01f      	beq.n	8000b5c <HAL_GPIO_Init+0x200>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a4e      	ldr	r2, [pc, #312]	; (8000c58 <HAL_GPIO_Init+0x2fc>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d019      	beq.n	8000b58 <HAL_GPIO_Init+0x1fc>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	4a4d      	ldr	r2, [pc, #308]	; (8000c5c <HAL_GPIO_Init+0x300>)
 8000b28:	4293      	cmp	r3, r2
 8000b2a:	d013      	beq.n	8000b54 <HAL_GPIO_Init+0x1f8>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	4a4c      	ldr	r2, [pc, #304]	; (8000c60 <HAL_GPIO_Init+0x304>)
 8000b30:	4293      	cmp	r3, r2
 8000b32:	d00d      	beq.n	8000b50 <HAL_GPIO_Init+0x1f4>
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	4a4b      	ldr	r2, [pc, #300]	; (8000c64 <HAL_GPIO_Init+0x308>)
 8000b38:	4293      	cmp	r3, r2
 8000b3a:	d007      	beq.n	8000b4c <HAL_GPIO_Init+0x1f0>
 8000b3c:	687b      	ldr	r3, [r7, #4]
 8000b3e:	4a4a      	ldr	r2, [pc, #296]	; (8000c68 <HAL_GPIO_Init+0x30c>)
 8000b40:	4293      	cmp	r3, r2
 8000b42:	d101      	bne.n	8000b48 <HAL_GPIO_Init+0x1ec>
 8000b44:	2306      	movs	r3, #6
 8000b46:	e00c      	b.n	8000b62 <HAL_GPIO_Init+0x206>
 8000b48:	2307      	movs	r3, #7
 8000b4a:	e00a      	b.n	8000b62 <HAL_GPIO_Init+0x206>
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	e008      	b.n	8000b62 <HAL_GPIO_Init+0x206>
 8000b50:	2304      	movs	r3, #4
 8000b52:	e006      	b.n	8000b62 <HAL_GPIO_Init+0x206>
 8000b54:	2303      	movs	r3, #3
 8000b56:	e004      	b.n	8000b62 <HAL_GPIO_Init+0x206>
 8000b58:	2302      	movs	r3, #2
 8000b5a:	e002      	b.n	8000b62 <HAL_GPIO_Init+0x206>
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	e000      	b.n	8000b62 <HAL_GPIO_Init+0x206>
 8000b60:	2300      	movs	r3, #0
 8000b62:	697a      	ldr	r2, [r7, #20]
 8000b64:	f002 0203 	and.w	r2, r2, #3
 8000b68:	0092      	lsls	r2, r2, #2
 8000b6a:	4093      	lsls	r3, r2
 8000b6c:	693a      	ldr	r2, [r7, #16]
 8000b6e:	4313      	orrs	r3, r2
 8000b70:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b72:	4937      	ldr	r1, [pc, #220]	; (8000c50 <HAL_GPIO_Init+0x2f4>)
 8000b74:	697b      	ldr	r3, [r7, #20]
 8000b76:	089b      	lsrs	r3, r3, #2
 8000b78:	3302      	adds	r3, #2
 8000b7a:	693a      	ldr	r2, [r7, #16]
 8000b7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000b80:	4b3a      	ldr	r3, [pc, #232]	; (8000c6c <HAL_GPIO_Init+0x310>)
 8000b82:	689b      	ldr	r3, [r3, #8]
 8000b84:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000b86:	68fb      	ldr	r3, [r7, #12]
 8000b88:	43db      	mvns	r3, r3
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4013      	ands	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000b90:	683b      	ldr	r3, [r7, #0]
 8000b92:	685b      	ldr	r3, [r3, #4]
 8000b94:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d003      	beq.n	8000ba4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000b9c:	693a      	ldr	r2, [r7, #16]
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	4313      	orrs	r3, r2
 8000ba2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000ba4:	4a31      	ldr	r2, [pc, #196]	; (8000c6c <HAL_GPIO_Init+0x310>)
 8000ba6:	693b      	ldr	r3, [r7, #16]
 8000ba8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000baa:	4b30      	ldr	r3, [pc, #192]	; (8000c6c <HAL_GPIO_Init+0x310>)
 8000bac:	68db      	ldr	r3, [r3, #12]
 8000bae:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bb0:	68fb      	ldr	r3, [r7, #12]
 8000bb2:	43db      	mvns	r3, r3
 8000bb4:	693a      	ldr	r2, [r7, #16]
 8000bb6:	4013      	ands	r3, r2
 8000bb8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000bba:	683b      	ldr	r3, [r7, #0]
 8000bbc:	685b      	ldr	r3, [r3, #4]
 8000bbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000bc2:	2b00      	cmp	r3, #0
 8000bc4:	d003      	beq.n	8000bce <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000bc6:	693a      	ldr	r2, [r7, #16]
 8000bc8:	68fb      	ldr	r3, [r7, #12]
 8000bca:	4313      	orrs	r3, r2
 8000bcc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000bce:	4a27      	ldr	r2, [pc, #156]	; (8000c6c <HAL_GPIO_Init+0x310>)
 8000bd0:	693b      	ldr	r3, [r7, #16]
 8000bd2:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000bd4:	4b25      	ldr	r3, [pc, #148]	; (8000c6c <HAL_GPIO_Init+0x310>)
 8000bd6:	685b      	ldr	r3, [r3, #4]
 8000bd8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bda:	68fb      	ldr	r3, [r7, #12]
 8000bdc:	43db      	mvns	r3, r3
 8000bde:	693a      	ldr	r2, [r7, #16]
 8000be0:	4013      	ands	r3, r2
 8000be2:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000be4:	683b      	ldr	r3, [r7, #0]
 8000be6:	685b      	ldr	r3, [r3, #4]
 8000be8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d003      	beq.n	8000bf8 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000bf0:	693a      	ldr	r2, [r7, #16]
 8000bf2:	68fb      	ldr	r3, [r7, #12]
 8000bf4:	4313      	orrs	r3, r2
 8000bf6:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000bf8:	4a1c      	ldr	r2, [pc, #112]	; (8000c6c <HAL_GPIO_Init+0x310>)
 8000bfa:	693b      	ldr	r3, [r7, #16]
 8000bfc:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000bfe:	4b1b      	ldr	r3, [pc, #108]	; (8000c6c <HAL_GPIO_Init+0x310>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c04:	68fb      	ldr	r3, [r7, #12]
 8000c06:	43db      	mvns	r3, r3
 8000c08:	693a      	ldr	r2, [r7, #16]
 8000c0a:	4013      	ands	r3, r2
 8000c0c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	685b      	ldr	r3, [r3, #4]
 8000c12:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000c16:	2b00      	cmp	r3, #0
 8000c18:	d003      	beq.n	8000c22 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000c1a:	693a      	ldr	r2, [r7, #16]
 8000c1c:	68fb      	ldr	r3, [r7, #12]
 8000c1e:	4313      	orrs	r3, r2
 8000c20:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000c22:	4a12      	ldr	r2, [pc, #72]	; (8000c6c <HAL_GPIO_Init+0x310>)
 8000c24:	693b      	ldr	r3, [r7, #16]
 8000c26:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	3301      	adds	r3, #1
 8000c2c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c2e:	683b      	ldr	r3, [r7, #0]
 8000c30:	681a      	ldr	r2, [r3, #0]
 8000c32:	697b      	ldr	r3, [r7, #20]
 8000c34:	fa22 f303 	lsr.w	r3, r2, r3
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	f47f ae97 	bne.w	800096c <HAL_GPIO_Init+0x10>
  }
}
 8000c3e:	bf00      	nop
 8000c40:	bf00      	nop
 8000c42:	371c      	adds	r7, #28
 8000c44:	46bd      	mov	sp, r7
 8000c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4a:	4770      	bx	lr
 8000c4c:	40021000 	.word	0x40021000
 8000c50:	40010000 	.word	0x40010000
 8000c54:	48000400 	.word	0x48000400
 8000c58:	48000800 	.word	0x48000800
 8000c5c:	48000c00 	.word	0x48000c00
 8000c60:	48001000 	.word	0x48001000
 8000c64:	48001400 	.word	0x48001400
 8000c68:	48001800 	.word	0x48001800
 8000c6c:	40010400 	.word	0x40010400

08000c70 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c70:	b480      	push	{r7}
 8000c72:	b083      	sub	sp, #12
 8000c74:	af00      	add	r7, sp, #0
 8000c76:	6078      	str	r0, [r7, #4]
 8000c78:	460b      	mov	r3, r1
 8000c7a:	807b      	strh	r3, [r7, #2]
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c80:	787b      	ldrb	r3, [r7, #1]
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d003      	beq.n	8000c8e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000c86:	887a      	ldrh	r2, [r7, #2]
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000c8c:	e002      	b.n	8000c94 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000c8e:	887a      	ldrh	r2, [r7, #2]
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000c94:	bf00      	nop
 8000c96:	370c      	adds	r7, #12
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c9e:	4770      	bx	lr

08000ca0 <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..F) to select the GPIO peripheral for STM32F3 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b085      	sub	sp, #20
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	695b      	ldr	r3, [r3, #20]
 8000cb0:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8000cb2:	887a      	ldrh	r2, [r7, #2]
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4013      	ands	r3, r2
 8000cb8:	041a      	lsls	r2, r3, #16
 8000cba:	68fb      	ldr	r3, [r7, #12]
 8000cbc:	43d9      	mvns	r1, r3
 8000cbe:	887b      	ldrh	r3, [r7, #2]
 8000cc0:	400b      	ands	r3, r1
 8000cc2:	431a      	orrs	r2, r3
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	619a      	str	r2, [r3, #24]
}
 8000cc8:	bf00      	nop
 8000cca:	3714      	adds	r7, #20
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd2:	4770      	bx	lr

08000cd4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000cd4:	b580      	push	{r7, lr}
 8000cd6:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ce0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ce4:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000ce6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cea:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000cee:	681b      	ldr	r3, [r3, #0]
 8000cf0:	2b00      	cmp	r3, #0
 8000cf2:	d102      	bne.n	8000cfa <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000cf4:	2301      	movs	r3, #1
 8000cf6:	f001 b83a 	b.w	8001d6e <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000cfa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000cfe:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	681b      	ldr	r3, [r3, #0]
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	2b00      	cmp	r3, #0
 8000d0c:	f000 816f 	beq.w	8000fee <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000d10:	4bb5      	ldr	r3, [pc, #724]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000d12:	685b      	ldr	r3, [r3, #4]
 8000d14:	f003 030c 	and.w	r3, r3, #12
 8000d18:	2b04      	cmp	r3, #4
 8000d1a:	d00c      	beq.n	8000d36 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000d1c:	4bb2      	ldr	r3, [pc, #712]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000d1e:	685b      	ldr	r3, [r3, #4]
 8000d20:	f003 030c 	and.w	r3, r3, #12
 8000d24:	2b08      	cmp	r3, #8
 8000d26:	d15c      	bne.n	8000de2 <HAL_RCC_OscConfig+0x10e>
 8000d28:	4baf      	ldr	r3, [pc, #700]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000d2a:	685b      	ldr	r3, [r3, #4]
 8000d2c:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000d30:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000d34:	d155      	bne.n	8000de2 <HAL_RCC_OscConfig+0x10e>
 8000d36:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d3a:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d3e:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000d42:	fa93 f3a3 	rbit	r3, r3
 8000d46:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000d4a:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000d4e:	fab3 f383 	clz	r3, r3
 8000d52:	b2db      	uxtb	r3, r3
 8000d54:	095b      	lsrs	r3, r3, #5
 8000d56:	b2db      	uxtb	r3, r3
 8000d58:	f043 0301 	orr.w	r3, r3, #1
 8000d5c:	b2db      	uxtb	r3, r3
 8000d5e:	2b01      	cmp	r3, #1
 8000d60:	d102      	bne.n	8000d68 <HAL_RCC_OscConfig+0x94>
 8000d62:	4ba1      	ldr	r3, [pc, #644]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	e015      	b.n	8000d94 <HAL_RCC_OscConfig+0xc0>
 8000d68:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d6c:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000d70:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000d74:	fa93 f3a3 	rbit	r3, r3
 8000d78:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000d7c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000d80:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000d84:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000d88:	fa93 f3a3 	rbit	r3, r3
 8000d8c:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000d90:	4b95      	ldr	r3, [pc, #596]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000d92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000d94:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000d98:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000d9c:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000da0:	fa92 f2a2 	rbit	r2, r2
 8000da4:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000da8:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000dac:	fab2 f282 	clz	r2, r2
 8000db0:	b2d2      	uxtb	r2, r2
 8000db2:	f042 0220 	orr.w	r2, r2, #32
 8000db6:	b2d2      	uxtb	r2, r2
 8000db8:	f002 021f 	and.w	r2, r2, #31
 8000dbc:	2101      	movs	r1, #1
 8000dbe:	fa01 f202 	lsl.w	r2, r1, r2
 8000dc2:	4013      	ands	r3, r2
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	f000 8111 	beq.w	8000fec <HAL_RCC_OscConfig+0x318>
 8000dca:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000dce:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	f040 8108 	bne.w	8000fec <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	f000 bfc6 	b.w	8001d6e <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000de2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000de6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	685b      	ldr	r3, [r3, #4]
 8000dee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000df2:	d106      	bne.n	8000e02 <HAL_RCC_OscConfig+0x12e>
 8000df4:	4b7c      	ldr	r3, [pc, #496]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a7b      	ldr	r2, [pc, #492]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	e036      	b.n	8000e70 <HAL_RCC_OscConfig+0x19c>
 8000e02:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e06:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	685b      	ldr	r3, [r3, #4]
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d10c      	bne.n	8000e2c <HAL_RCC_OscConfig+0x158>
 8000e12:	4b75      	ldr	r3, [pc, #468]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e14:	681b      	ldr	r3, [r3, #0]
 8000e16:	4a74      	ldr	r2, [pc, #464]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e18:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e1c:	6013      	str	r3, [r2, #0]
 8000e1e:	4b72      	ldr	r3, [pc, #456]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	4a71      	ldr	r2, [pc, #452]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e24:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e28:	6013      	str	r3, [r2, #0]
 8000e2a:	e021      	b.n	8000e70 <HAL_RCC_OscConfig+0x19c>
 8000e2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e30:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	685b      	ldr	r3, [r3, #4]
 8000e38:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000e3c:	d10c      	bne.n	8000e58 <HAL_RCC_OscConfig+0x184>
 8000e3e:	4b6a      	ldr	r3, [pc, #424]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	4a69      	ldr	r2, [pc, #420]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e44:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000e48:	6013      	str	r3, [r2, #0]
 8000e4a:	4b67      	ldr	r3, [pc, #412]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	4a66      	ldr	r2, [pc, #408]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e50:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000e54:	6013      	str	r3, [r2, #0]
 8000e56:	e00b      	b.n	8000e70 <HAL_RCC_OscConfig+0x19c>
 8000e58:	4b63      	ldr	r3, [pc, #396]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a62      	ldr	r2, [pc, #392]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e5e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000e62:	6013      	str	r3, [r2, #0]
 8000e64:	4b60      	ldr	r3, [pc, #384]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a5f      	ldr	r2, [pc, #380]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000e6a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000e6e:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000e70:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e74:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e78:	681b      	ldr	r3, [r3, #0]
 8000e7a:	685b      	ldr	r3, [r3, #4]
 8000e7c:	2b00      	cmp	r3, #0
 8000e7e:	d059      	beq.n	8000f34 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000e80:	f7ff fc2a 	bl	80006d8 <HAL_GetTick>
 8000e84:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000e88:	e00a      	b.n	8000ea0 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000e8a:	f7ff fc25 	bl	80006d8 <HAL_GetTick>
 8000e8e:	4602      	mov	r2, r0
 8000e90:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000e94:	1ad3      	subs	r3, r2, r3
 8000e96:	2b64      	cmp	r3, #100	; 0x64
 8000e98:	d902      	bls.n	8000ea0 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000e9a:	2303      	movs	r3, #3
 8000e9c:	f000 bf67 	b.w	8001d6e <HAL_RCC_OscConfig+0x109a>
 8000ea0:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ea4:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000ea8:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000eac:	fa93 f3a3 	rbit	r3, r3
 8000eb0:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000eb4:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000eb8:	fab3 f383 	clz	r3, r3
 8000ebc:	b2db      	uxtb	r3, r3
 8000ebe:	095b      	lsrs	r3, r3, #5
 8000ec0:	b2db      	uxtb	r3, r3
 8000ec2:	f043 0301 	orr.w	r3, r3, #1
 8000ec6:	b2db      	uxtb	r3, r3
 8000ec8:	2b01      	cmp	r3, #1
 8000eca:	d102      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x1fe>
 8000ecc:	4b46      	ldr	r3, [pc, #280]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000ece:	681b      	ldr	r3, [r3, #0]
 8000ed0:	e015      	b.n	8000efe <HAL_RCC_OscConfig+0x22a>
 8000ed2:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000ed6:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000eda:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000ede:	fa93 f3a3 	rbit	r3, r3
 8000ee2:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000ee6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000eea:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000eee:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000ef2:	fa93 f3a3 	rbit	r3, r3
 8000ef6:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000efa:	4b3b      	ldr	r3, [pc, #236]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000efc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000efe:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000f02:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000f06:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000f0a:	fa92 f2a2 	rbit	r2, r2
 8000f0e:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000f12:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000f16:	fab2 f282 	clz	r2, r2
 8000f1a:	b2d2      	uxtb	r2, r2
 8000f1c:	f042 0220 	orr.w	r2, r2, #32
 8000f20:	b2d2      	uxtb	r2, r2
 8000f22:	f002 021f 	and.w	r2, r2, #31
 8000f26:	2101      	movs	r1, #1
 8000f28:	fa01 f202 	lsl.w	r2, r1, r2
 8000f2c:	4013      	ands	r3, r2
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	d0ab      	beq.n	8000e8a <HAL_RCC_OscConfig+0x1b6>
 8000f32:	e05c      	b.n	8000fee <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fbd0 	bl	80006d8 <HAL_GetTick>
 8000f38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fbcb 	bl	80006d8 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d902      	bls.n	8000f54 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f000 bf0d 	b.w	8001d6e <HAL_RCC_OscConfig+0x109a>
 8000f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f58:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 8000f68:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <HAL_RCC_OscConfig+0x2b2>
 8000f80:	4b19      	ldr	r3, [pc, #100]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	e015      	b.n	8000fb2 <HAL_RCC_OscConfig+0x2de>
 8000f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8a:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 8000f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9e:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8000fa2:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8000fae:	4b0e      	ldr	r3, [pc, #56]	; (8000fe8 <HAL_RCC_OscConfig+0x314>)
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb6:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 8000fba:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8000fbe:	fa92 f2a2 	rbit	r2, r2
 8000fc2:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 8000fc6:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 8000fca:	fab2 f282 	clz	r2, r2
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f002 021f 	and.w	r2, r2, #31
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1ab      	bne.n	8000f3e <HAL_RCC_OscConfig+0x26a>
 8000fe6:	e002      	b.n	8000fee <HAL_RCC_OscConfig+0x31a>
 8000fe8:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ff2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0302 	and.w	r3, r3, #2
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	f000 817f 	beq.w	8001302 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 8001004:	4ba7      	ldr	r3, [pc, #668]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 8001006:	685b      	ldr	r3, [r3, #4]
 8001008:	f003 030c 	and.w	r3, r3, #12
 800100c:	2b00      	cmp	r3, #0
 800100e:	d00c      	beq.n	800102a <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001010:	4ba4      	ldr	r3, [pc, #656]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 8001012:	685b      	ldr	r3, [r3, #4]
 8001014:	f003 030c 	and.w	r3, r3, #12
 8001018:	2b08      	cmp	r3, #8
 800101a:	d173      	bne.n	8001104 <HAL_RCC_OscConfig+0x430>
 800101c:	4ba1      	ldr	r3, [pc, #644]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 800101e:	685b      	ldr	r3, [r3, #4]
 8001020:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8001024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001028:	d16c      	bne.n	8001104 <HAL_RCC_OscConfig+0x430>
 800102a:	2302      	movs	r3, #2
 800102c:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001030:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 8001034:	fa93 f3a3 	rbit	r3, r3
 8001038:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 800103c:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001040:	fab3 f383 	clz	r3, r3
 8001044:	b2db      	uxtb	r3, r3
 8001046:	095b      	lsrs	r3, r3, #5
 8001048:	b2db      	uxtb	r3, r3
 800104a:	f043 0301 	orr.w	r3, r3, #1
 800104e:	b2db      	uxtb	r3, r3
 8001050:	2b01      	cmp	r3, #1
 8001052:	d102      	bne.n	800105a <HAL_RCC_OscConfig+0x386>
 8001054:	4b93      	ldr	r3, [pc, #588]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	e013      	b.n	8001082 <HAL_RCC_OscConfig+0x3ae>
 800105a:	2302      	movs	r3, #2
 800105c:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001060:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001064:	fa93 f3a3 	rbit	r3, r3
 8001068:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 800106c:	2302      	movs	r3, #2
 800106e:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001072:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 8001076:	fa93 f3a3 	rbit	r3, r3
 800107a:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 800107e:	4b89      	ldr	r3, [pc, #548]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 8001080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001082:	2202      	movs	r2, #2
 8001084:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 8001088:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 800108c:	fa92 f2a2 	rbit	r2, r2
 8001090:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001094:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 8001098:	fab2 f282 	clz	r2, r2
 800109c:	b2d2      	uxtb	r2, r2
 800109e:	f042 0220 	orr.w	r2, r2, #32
 80010a2:	b2d2      	uxtb	r2, r2
 80010a4:	f002 021f 	and.w	r2, r2, #31
 80010a8:	2101      	movs	r1, #1
 80010aa:	fa01 f202 	lsl.w	r2, r1, r2
 80010ae:	4013      	ands	r3, r2
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d00a      	beq.n	80010ca <HAL_RCC_OscConfig+0x3f6>
 80010b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010b8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	2b01      	cmp	r3, #1
 80010c2:	d002      	beq.n	80010ca <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80010c4:	2301      	movs	r3, #1
 80010c6:	f000 be52 	b.w	8001d6e <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80010ca:	4b76      	ldr	r3, [pc, #472]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80010d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010d6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	691b      	ldr	r3, [r3, #16]
 80010de:	21f8      	movs	r1, #248	; 0xf8
 80010e0:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e4:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 80010e8:	fa91 f1a1 	rbit	r1, r1
 80010ec:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80010f0:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80010f4:	fab1 f181 	clz	r1, r1
 80010f8:	b2c9      	uxtb	r1, r1
 80010fa:	408b      	lsls	r3, r1
 80010fc:	4969      	ldr	r1, [pc, #420]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 80010fe:	4313      	orrs	r3, r2
 8001100:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001102:	e0fe      	b.n	8001302 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001104:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001108:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	68db      	ldr	r3, [r3, #12]
 8001110:	2b00      	cmp	r3, #0
 8001112:	f000 8088 	beq.w	8001226 <HAL_RCC_OscConfig+0x552>
 8001116:	2301      	movs	r3, #1
 8001118:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800111c:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 8001120:	fa93 f3a3 	rbit	r3, r3
 8001124:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 8001128:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800112c:	fab3 f383 	clz	r3, r3
 8001130:	b2db      	uxtb	r3, r3
 8001132:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001136:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800113a:	009b      	lsls	r3, r3, #2
 800113c:	461a      	mov	r2, r3
 800113e:	2301      	movs	r3, #1
 8001140:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001142:	f7ff fac9 	bl	80006d8 <HAL_GetTick>
 8001146:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800114a:	e00a      	b.n	8001162 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800114c:	f7ff fac4 	bl	80006d8 <HAL_GetTick>
 8001150:	4602      	mov	r2, r0
 8001152:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001156:	1ad3      	subs	r3, r2, r3
 8001158:	2b02      	cmp	r3, #2
 800115a:	d902      	bls.n	8001162 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 800115c:	2303      	movs	r3, #3
 800115e:	f000 be06 	b.w	8001d6e <HAL_RCC_OscConfig+0x109a>
 8001162:	2302      	movs	r3, #2
 8001164:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001168:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 800116c:	fa93 f3a3 	rbit	r3, r3
 8001170:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001174:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001178:	fab3 f383 	clz	r3, r3
 800117c:	b2db      	uxtb	r3, r3
 800117e:	095b      	lsrs	r3, r3, #5
 8001180:	b2db      	uxtb	r3, r3
 8001182:	f043 0301 	orr.w	r3, r3, #1
 8001186:	b2db      	uxtb	r3, r3
 8001188:	2b01      	cmp	r3, #1
 800118a:	d102      	bne.n	8001192 <HAL_RCC_OscConfig+0x4be>
 800118c:	4b45      	ldr	r3, [pc, #276]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	e013      	b.n	80011ba <HAL_RCC_OscConfig+0x4e6>
 8001192:	2302      	movs	r3, #2
 8001194:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 800119c:	fa93 f3a3 	rbit	r3, r3
 80011a0:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 80011a4:	2302      	movs	r3, #2
 80011a6:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 80011aa:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 80011ae:	fa93 f3a3 	rbit	r3, r3
 80011b2:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 80011b6:	4b3b      	ldr	r3, [pc, #236]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 80011b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011ba:	2202      	movs	r2, #2
 80011bc:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 80011c0:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 80011c4:	fa92 f2a2 	rbit	r2, r2
 80011c8:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 80011cc:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 80011d0:	fab2 f282 	clz	r2, r2
 80011d4:	b2d2      	uxtb	r2, r2
 80011d6:	f042 0220 	orr.w	r2, r2, #32
 80011da:	b2d2      	uxtb	r2, r2
 80011dc:	f002 021f 	and.w	r2, r2, #31
 80011e0:	2101      	movs	r1, #1
 80011e2:	fa01 f202 	lsl.w	r2, r1, r2
 80011e6:	4013      	ands	r3, r2
 80011e8:	2b00      	cmp	r3, #0
 80011ea:	d0af      	beq.n	800114c <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80011ec:	4b2d      	ldr	r3, [pc, #180]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80011f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011f8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011fc:	681b      	ldr	r3, [r3, #0]
 80011fe:	691b      	ldr	r3, [r3, #16]
 8001200:	21f8      	movs	r1, #248	; 0xf8
 8001202:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001206:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 800120a:	fa91 f1a1 	rbit	r1, r1
 800120e:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 8001212:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 8001216:	fab1 f181 	clz	r1, r1
 800121a:	b2c9      	uxtb	r1, r1
 800121c:	408b      	lsls	r3, r1
 800121e:	4921      	ldr	r1, [pc, #132]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 8001220:	4313      	orrs	r3, r2
 8001222:	600b      	str	r3, [r1, #0]
 8001224:	e06d      	b.n	8001302 <HAL_RCC_OscConfig+0x62e>
 8001226:	2301      	movs	r3, #1
 8001228:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800122c:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 8001230:	fa93 f3a3 	rbit	r3, r3
 8001234:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 8001238:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800123c:	fab3 f383 	clz	r3, r3
 8001240:	b2db      	uxtb	r3, r3
 8001242:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001246:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800124a:	009b      	lsls	r3, r3, #2
 800124c:	461a      	mov	r2, r3
 800124e:	2300      	movs	r3, #0
 8001250:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001252:	f7ff fa41 	bl	80006d8 <HAL_GetTick>
 8001256:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800125a:	e00a      	b.n	8001272 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800125c:	f7ff fa3c 	bl	80006d8 <HAL_GetTick>
 8001260:	4602      	mov	r2, r0
 8001262:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001266:	1ad3      	subs	r3, r2, r3
 8001268:	2b02      	cmp	r3, #2
 800126a:	d902      	bls.n	8001272 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 800126c:	2303      	movs	r3, #3
 800126e:	f000 bd7e 	b.w	8001d6e <HAL_RCC_OscConfig+0x109a>
 8001272:	2302      	movs	r3, #2
 8001274:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001278:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800127c:	fa93 f3a3 	rbit	r3, r3
 8001280:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001284:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001288:	fab3 f383 	clz	r3, r3
 800128c:	b2db      	uxtb	r3, r3
 800128e:	095b      	lsrs	r3, r3, #5
 8001290:	b2db      	uxtb	r3, r3
 8001292:	f043 0301 	orr.w	r3, r3, #1
 8001296:	b2db      	uxtb	r3, r3
 8001298:	2b01      	cmp	r3, #1
 800129a:	d105      	bne.n	80012a8 <HAL_RCC_OscConfig+0x5d4>
 800129c:	4b01      	ldr	r3, [pc, #4]	; (80012a4 <HAL_RCC_OscConfig+0x5d0>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	e016      	b.n	80012d0 <HAL_RCC_OscConfig+0x5fc>
 80012a2:	bf00      	nop
 80012a4:	40021000 	.word	0x40021000
 80012a8:	2302      	movs	r3, #2
 80012aa:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ae:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 80012b2:	fa93 f3a3 	rbit	r3, r3
 80012b6:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 80012ba:	2302      	movs	r3, #2
 80012bc:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 80012c0:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 80012c4:	fa93 f3a3 	rbit	r3, r3
 80012c8:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 80012cc:	4bbf      	ldr	r3, [pc, #764]	; (80015cc <HAL_RCC_OscConfig+0x8f8>)
 80012ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80012d0:	2202      	movs	r2, #2
 80012d2:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 80012d6:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 80012da:	fa92 f2a2 	rbit	r2, r2
 80012de:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 80012e2:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 80012e6:	fab2 f282 	clz	r2, r2
 80012ea:	b2d2      	uxtb	r2, r2
 80012ec:	f042 0220 	orr.w	r2, r2, #32
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	f002 021f 	and.w	r2, r2, #31
 80012f6:	2101      	movs	r1, #1
 80012f8:	fa01 f202 	lsl.w	r2, r1, r2
 80012fc:	4013      	ands	r3, r2
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d1ac      	bne.n	800125c <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001302:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001306:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	f003 0308 	and.w	r3, r3, #8
 8001312:	2b00      	cmp	r3, #0
 8001314:	f000 8113 	beq.w	800153e <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001318:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800131c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	2b00      	cmp	r3, #0
 8001326:	d07c      	beq.n	8001422 <HAL_RCC_OscConfig+0x74e>
 8001328:	2301      	movs	r3, #1
 800132a:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132e:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 8001332:	fa93 f3a3 	rbit	r3, r3
 8001336:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 800133a:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800133e:	fab3 f383 	clz	r3, r3
 8001342:	b2db      	uxtb	r3, r3
 8001344:	461a      	mov	r2, r3
 8001346:	4ba2      	ldr	r3, [pc, #648]	; (80015d0 <HAL_RCC_OscConfig+0x8fc>)
 8001348:	4413      	add	r3, r2
 800134a:	009b      	lsls	r3, r3, #2
 800134c:	461a      	mov	r2, r3
 800134e:	2301      	movs	r3, #1
 8001350:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001352:	f7ff f9c1 	bl	80006d8 <HAL_GetTick>
 8001356:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800135a:	e00a      	b.n	8001372 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800135c:	f7ff f9bc 	bl	80006d8 <HAL_GetTick>
 8001360:	4602      	mov	r2, r0
 8001362:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001366:	1ad3      	subs	r3, r2, r3
 8001368:	2b02      	cmp	r3, #2
 800136a:	d902      	bls.n	8001372 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	f000 bcfe 	b.w	8001d6e <HAL_RCC_OscConfig+0x109a>
 8001372:	2302      	movs	r3, #2
 8001374:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001378:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 800137c:	fa93 f2a3 	rbit	r2, r3
 8001380:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001384:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800138e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001392:	2202      	movs	r2, #2
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800139a:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	fa93 f2a3 	rbit	r2, r3
 80013a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013a8:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013b2:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013b6:	2202      	movs	r2, #2
 80013b8:	601a      	str	r2, [r3, #0]
 80013ba:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013be:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 80013c2:	681b      	ldr	r3, [r3, #0]
 80013c4:	fa93 f2a3 	rbit	r2, r3
 80013c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013cc:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 80013d0:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80013d2:	4b7e      	ldr	r3, [pc, #504]	; (80015cc <HAL_RCC_OscConfig+0x8f8>)
 80013d4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80013d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013da:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013de:	2102      	movs	r1, #2
 80013e0:	6019      	str	r1, [r3, #0]
 80013e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013e6:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	fa93 f1a3 	rbit	r1, r3
 80013f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013f4:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80013f8:	6019      	str	r1, [r3, #0]
  return result;
 80013fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013fe:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 8001402:	681b      	ldr	r3, [r3, #0]
 8001404:	fab3 f383 	clz	r3, r3
 8001408:	b2db      	uxtb	r3, r3
 800140a:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800140e:	b2db      	uxtb	r3, r3
 8001410:	f003 031f 	and.w	r3, r3, #31
 8001414:	2101      	movs	r1, #1
 8001416:	fa01 f303 	lsl.w	r3, r1, r3
 800141a:	4013      	ands	r3, r2
 800141c:	2b00      	cmp	r3, #0
 800141e:	d09d      	beq.n	800135c <HAL_RCC_OscConfig+0x688>
 8001420:	e08d      	b.n	800153e <HAL_RCC_OscConfig+0x86a>
 8001422:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001426:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 800142a:	2201      	movs	r2, #1
 800142c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001432:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	fa93 f2a3 	rbit	r2, r3
 800143c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001440:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001444:	601a      	str	r2, [r3, #0]
  return result;
 8001446:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144a:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 800144e:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001450:	fab3 f383 	clz	r3, r3
 8001454:	b2db      	uxtb	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4b5d      	ldr	r3, [pc, #372]	; (80015d0 <HAL_RCC_OscConfig+0x8fc>)
 800145a:	4413      	add	r3, r2
 800145c:	009b      	lsls	r3, r3, #2
 800145e:	461a      	mov	r2, r3
 8001460:	2300      	movs	r3, #0
 8001462:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001464:	f7ff f938 	bl	80006d8 <HAL_GetTick>
 8001468:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800146c:	e00a      	b.n	8001484 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800146e:	f7ff f933 	bl	80006d8 <HAL_GetTick>
 8001472:	4602      	mov	r2, r0
 8001474:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001478:	1ad3      	subs	r3, r2, r3
 800147a:	2b02      	cmp	r3, #2
 800147c:	d902      	bls.n	8001484 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800147e:	2303      	movs	r3, #3
 8001480:	f000 bc75 	b.w	8001d6e <HAL_RCC_OscConfig+0x109a>
 8001484:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001488:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800148c:	2202      	movs	r2, #2
 800148e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001490:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001494:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	fa93 f2a3 	rbit	r2, r3
 800149e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a2:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 80014a6:	601a      	str	r2, [r3, #0]
 80014a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ac:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014b0:	2202      	movs	r2, #2
 80014b2:	601a      	str	r2, [r3, #0]
 80014b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b8:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	fa93 f2a3 	rbit	r2, r3
 80014c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014c6:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 80014ca:	601a      	str	r2, [r3, #0]
 80014cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014d0:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014d4:	2202      	movs	r2, #2
 80014d6:	601a      	str	r2, [r3, #0]
 80014d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014dc:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	fa93 f2a3 	rbit	r2, r3
 80014e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014ea:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80014ee:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014f0:	4b36      	ldr	r3, [pc, #216]	; (80015cc <HAL_RCC_OscConfig+0x8f8>)
 80014f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014f4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80014fc:	2102      	movs	r1, #2
 80014fe:	6019      	str	r1, [r3, #0]
 8001500:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001504:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	fa93 f1a3 	rbit	r1, r3
 800150e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001512:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001516:	6019      	str	r1, [r3, #0]
  return result;
 8001518:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800151c:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	fab3 f383 	clz	r3, r3
 8001526:	b2db      	uxtb	r3, r3
 8001528:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 800152c:	b2db      	uxtb	r3, r3
 800152e:	f003 031f 	and.w	r3, r3, #31
 8001532:	2101      	movs	r1, #1
 8001534:	fa01 f303 	lsl.w	r3, r1, r3
 8001538:	4013      	ands	r3, r2
 800153a:	2b00      	cmp	r3, #0
 800153c:	d197      	bne.n	800146e <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001542:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	f003 0304 	and.w	r3, r3, #4
 800154e:	2b00      	cmp	r3, #0
 8001550:	f000 81a5 	beq.w	800189e <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <HAL_RCC_OscConfig+0x8f8>)
 800155c:	69db      	ldr	r3, [r3, #28]
 800155e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001562:	2b00      	cmp	r3, #0
 8001564:	d116      	bne.n	8001594 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001566:	4b19      	ldr	r3, [pc, #100]	; (80015cc <HAL_RCC_OscConfig+0x8f8>)
 8001568:	69db      	ldr	r3, [r3, #28]
 800156a:	4a18      	ldr	r2, [pc, #96]	; (80015cc <HAL_RCC_OscConfig+0x8f8>)
 800156c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001570:	61d3      	str	r3, [r2, #28]
 8001572:	4b16      	ldr	r3, [pc, #88]	; (80015cc <HAL_RCC_OscConfig+0x8f8>)
 8001574:	69db      	ldr	r3, [r3, #28]
 8001576:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800157a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157e:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001582:	601a      	str	r2, [r3, #0]
 8001584:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001588:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 800158c:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800158e:	2301      	movs	r3, #1
 8001590:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001594:	4b0f      	ldr	r3, [pc, #60]	; (80015d4 <HAL_RCC_OscConfig+0x900>)
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800159c:	2b00      	cmp	r3, #0
 800159e:	d121      	bne.n	80015e4 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015a0:	4b0c      	ldr	r3, [pc, #48]	; (80015d4 <HAL_RCC_OscConfig+0x900>)
 80015a2:	681b      	ldr	r3, [r3, #0]
 80015a4:	4a0b      	ldr	r2, [pc, #44]	; (80015d4 <HAL_RCC_OscConfig+0x900>)
 80015a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80015aa:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80015ac:	f7ff f894 	bl	80006d8 <HAL_GetTick>
 80015b0:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015b4:	e010      	b.n	80015d8 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80015b6:	f7ff f88f 	bl	80006d8 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80015c0:	1ad3      	subs	r3, r2, r3
 80015c2:	2b64      	cmp	r3, #100	; 0x64
 80015c4:	d908      	bls.n	80015d8 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80015c6:	2303      	movs	r3, #3
 80015c8:	e3d1      	b.n	8001d6e <HAL_RCC_OscConfig+0x109a>
 80015ca:	bf00      	nop
 80015cc:	40021000 	.word	0x40021000
 80015d0:	10908120 	.word	0x10908120
 80015d4:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015d8:	4b8d      	ldr	r3, [pc, #564]	; (8001810 <HAL_RCC_OscConfig+0xb3c>)
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e0:	2b00      	cmp	r3, #0
 80015e2:	d0e8      	beq.n	80015b6 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80015e4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015e8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	2b01      	cmp	r3, #1
 80015f2:	d106      	bne.n	8001602 <HAL_RCC_OscConfig+0x92e>
 80015f4:	4b87      	ldr	r3, [pc, #540]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 80015f6:	6a1b      	ldr	r3, [r3, #32]
 80015f8:	4a86      	ldr	r2, [pc, #536]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 80015fa:	f043 0301 	orr.w	r3, r3, #1
 80015fe:	6213      	str	r3, [r2, #32]
 8001600:	e035      	b.n	800166e <HAL_RCC_OscConfig+0x99a>
 8001602:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001606:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	2b00      	cmp	r3, #0
 8001610:	d10c      	bne.n	800162c <HAL_RCC_OscConfig+0x958>
 8001612:	4b80      	ldr	r3, [pc, #512]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 8001614:	6a1b      	ldr	r3, [r3, #32]
 8001616:	4a7f      	ldr	r2, [pc, #508]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 8001618:	f023 0301 	bic.w	r3, r3, #1
 800161c:	6213      	str	r3, [r2, #32]
 800161e:	4b7d      	ldr	r3, [pc, #500]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 8001620:	6a1b      	ldr	r3, [r3, #32]
 8001622:	4a7c      	ldr	r2, [pc, #496]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 8001624:	f023 0304 	bic.w	r3, r3, #4
 8001628:	6213      	str	r3, [r2, #32]
 800162a:	e020      	b.n	800166e <HAL_RCC_OscConfig+0x99a>
 800162c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001630:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001634:	681b      	ldr	r3, [r3, #0]
 8001636:	689b      	ldr	r3, [r3, #8]
 8001638:	2b05      	cmp	r3, #5
 800163a:	d10c      	bne.n	8001656 <HAL_RCC_OscConfig+0x982>
 800163c:	4b75      	ldr	r3, [pc, #468]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 800163e:	6a1b      	ldr	r3, [r3, #32]
 8001640:	4a74      	ldr	r2, [pc, #464]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 8001642:	f043 0304 	orr.w	r3, r3, #4
 8001646:	6213      	str	r3, [r2, #32]
 8001648:	4b72      	ldr	r3, [pc, #456]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 800164a:	6a1b      	ldr	r3, [r3, #32]
 800164c:	4a71      	ldr	r2, [pc, #452]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 800164e:	f043 0301 	orr.w	r3, r3, #1
 8001652:	6213      	str	r3, [r2, #32]
 8001654:	e00b      	b.n	800166e <HAL_RCC_OscConfig+0x99a>
 8001656:	4b6f      	ldr	r3, [pc, #444]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 8001658:	6a1b      	ldr	r3, [r3, #32]
 800165a:	4a6e      	ldr	r2, [pc, #440]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 800165c:	f023 0301 	bic.w	r3, r3, #1
 8001660:	6213      	str	r3, [r2, #32]
 8001662:	4b6c      	ldr	r3, [pc, #432]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 8001664:	6a1b      	ldr	r3, [r3, #32]
 8001666:	4a6b      	ldr	r2, [pc, #428]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 8001668:	f023 0304 	bic.w	r3, r3, #4
 800166c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800166e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001672:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	2b00      	cmp	r3, #0
 800167c:	f000 8081 	beq.w	8001782 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001680:	f7ff f82a 	bl	80006d8 <HAL_GetTick>
 8001684:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001688:	e00b      	b.n	80016a2 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800168a:	f7ff f825 	bl	80006d8 <HAL_GetTick>
 800168e:	4602      	mov	r2, r0
 8001690:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	; 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e365      	b.n	8001d6e <HAL_RCC_OscConfig+0x109a>
 80016a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016a6:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016aa:	2202      	movs	r2, #2
 80016ac:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80016ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016b2:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	fa93 f2a3 	rbit	r2, r3
 80016bc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016c0:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ca:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016ce:	2202      	movs	r2, #2
 80016d0:	601a      	str	r2, [r3, #0]
 80016d2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016d6:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	fa93 f2a3 	rbit	r2, r3
 80016e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e4:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016e8:	601a      	str	r2, [r3, #0]
  return result;
 80016ea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ee:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80016f2:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016f4:	fab3 f383 	clz	r3, r3
 80016f8:	b2db      	uxtb	r3, r3
 80016fa:	095b      	lsrs	r3, r3, #5
 80016fc:	b2db      	uxtb	r3, r3
 80016fe:	f043 0302 	orr.w	r3, r3, #2
 8001702:	b2db      	uxtb	r3, r3
 8001704:	2b02      	cmp	r3, #2
 8001706:	d102      	bne.n	800170e <HAL_RCC_OscConfig+0xa3a>
 8001708:	4b42      	ldr	r3, [pc, #264]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 800170a:	6a1b      	ldr	r3, [r3, #32]
 800170c:	e013      	b.n	8001736 <HAL_RCC_OscConfig+0xa62>
 800170e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001712:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001716:	2202      	movs	r2, #2
 8001718:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800171a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800171e:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	fa93 f2a3 	rbit	r2, r3
 8001728:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800172c:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 8001730:	601a      	str	r2, [r3, #0]
 8001732:	4b38      	ldr	r3, [pc, #224]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 8001734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001736:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800173a:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800173e:	2102      	movs	r1, #2
 8001740:	6011      	str	r1, [r2, #0]
 8001742:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001746:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 800174a:	6812      	ldr	r2, [r2, #0]
 800174c:	fa92 f1a2 	rbit	r1, r2
 8001750:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001754:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001758:	6011      	str	r1, [r2, #0]
  return result;
 800175a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800175e:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001762:	6812      	ldr	r2, [r2, #0]
 8001764:	fab2 f282 	clz	r2, r2
 8001768:	b2d2      	uxtb	r2, r2
 800176a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800176e:	b2d2      	uxtb	r2, r2
 8001770:	f002 021f 	and.w	r2, r2, #31
 8001774:	2101      	movs	r1, #1
 8001776:	fa01 f202 	lsl.w	r2, r1, r2
 800177a:	4013      	ands	r3, r2
 800177c:	2b00      	cmp	r3, #0
 800177e:	d084      	beq.n	800168a <HAL_RCC_OscConfig+0x9b6>
 8001780:	e083      	b.n	800188a <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001782:	f7fe ffa9 	bl	80006d8 <HAL_GetTick>
 8001786:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800178a:	e00b      	b.n	80017a4 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800178c:	f7fe ffa4 	bl	80006d8 <HAL_GetTick>
 8001790:	4602      	mov	r2, r0
 8001792:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	; 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e2e4      	b.n	8001d6e <HAL_RCC_OscConfig+0x109a>
 80017a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a8:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017ac:	2202      	movs	r2, #2
 80017ae:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017b0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017b4:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	fa93 f2a3 	rbit	r2, r3
 80017be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c2:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 80017c6:	601a      	str	r2, [r3, #0]
 80017c8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017cc:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017d0:	2202      	movs	r2, #2
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d8:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	fa93 f2a3 	rbit	r2, r3
 80017e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e6:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017ea:	601a      	str	r2, [r3, #0]
  return result;
 80017ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017f0:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80017f4:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017f6:	fab3 f383 	clz	r3, r3
 80017fa:	b2db      	uxtb	r3, r3
 80017fc:	095b      	lsrs	r3, r3, #5
 80017fe:	b2db      	uxtb	r3, r3
 8001800:	f043 0302 	orr.w	r3, r3, #2
 8001804:	b2db      	uxtb	r3, r3
 8001806:	2b02      	cmp	r3, #2
 8001808:	d106      	bne.n	8001818 <HAL_RCC_OscConfig+0xb44>
 800180a:	4b02      	ldr	r3, [pc, #8]	; (8001814 <HAL_RCC_OscConfig+0xb40>)
 800180c:	6a1b      	ldr	r3, [r3, #32]
 800180e:	e017      	b.n	8001840 <HAL_RCC_OscConfig+0xb6c>
 8001810:	40007000 	.word	0x40007000
 8001814:	40021000 	.word	0x40021000
 8001818:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800181c:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 8001820:	2202      	movs	r2, #2
 8001822:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001824:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001828:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	fa93 f2a3 	rbit	r2, r3
 8001832:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001836:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 800183a:	601a      	str	r2, [r3, #0]
 800183c:	4bb3      	ldr	r3, [pc, #716]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 800183e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001840:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001844:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001848:	2102      	movs	r1, #2
 800184a:	6011      	str	r1, [r2, #0]
 800184c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001850:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001854:	6812      	ldr	r2, [r2, #0]
 8001856:	fa92 f1a2 	rbit	r1, r2
 800185a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800185e:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001862:	6011      	str	r1, [r2, #0]
  return result;
 8001864:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001868:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 800186c:	6812      	ldr	r2, [r2, #0]
 800186e:	fab2 f282 	clz	r2, r2
 8001872:	b2d2      	uxtb	r2, r2
 8001874:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001878:	b2d2      	uxtb	r2, r2
 800187a:	f002 021f 	and.w	r2, r2, #31
 800187e:	2101      	movs	r1, #1
 8001880:	fa01 f202 	lsl.w	r2, r1, r2
 8001884:	4013      	ands	r3, r2
 8001886:	2b00      	cmp	r3, #0
 8001888:	d180      	bne.n	800178c <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800188a:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 800188e:	2b01      	cmp	r3, #1
 8001890:	d105      	bne.n	800189e <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001892:	4b9e      	ldr	r3, [pc, #632]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 8001894:	69db      	ldr	r3, [r3, #28]
 8001896:	4a9d      	ldr	r2, [pc, #628]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 8001898:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800189c:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800189e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018a6:	681b      	ldr	r3, [r3, #0]
 80018a8:	699b      	ldr	r3, [r3, #24]
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	f000 825e 	beq.w	8001d6c <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80018b0:	4b96      	ldr	r3, [pc, #600]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 80018b2:	685b      	ldr	r3, [r3, #4]
 80018b4:	f003 030c 	and.w	r3, r3, #12
 80018b8:	2b08      	cmp	r3, #8
 80018ba:	f000 821f 	beq.w	8001cfc <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80018be:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018c2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	699b      	ldr	r3, [r3, #24]
 80018ca:	2b02      	cmp	r3, #2
 80018cc:	f040 8170 	bne.w	8001bb0 <HAL_RCC_OscConfig+0xedc>
 80018d0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d4:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018d8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80018dc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018de:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018e2:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 80018e6:	681b      	ldr	r3, [r3, #0]
 80018e8:	fa93 f2a3 	rbit	r2, r3
 80018ec:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018f0:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018f4:	601a      	str	r2, [r3, #0]
  return result;
 80018f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018fa:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80018fe:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001900:	fab3 f383 	clz	r3, r3
 8001904:	b2db      	uxtb	r3, r3
 8001906:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 800190a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 800190e:	009b      	lsls	r3, r3, #2
 8001910:	461a      	mov	r2, r3
 8001912:	2300      	movs	r3, #0
 8001914:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001916:	f7fe fedf 	bl	80006d8 <HAL_GetTick>
 800191a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800191e:	e009      	b.n	8001934 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001920:	f7fe feda 	bl	80006d8 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800192a:	1ad3      	subs	r3, r2, r3
 800192c:	2b02      	cmp	r3, #2
 800192e:	d901      	bls.n	8001934 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8001930:	2303      	movs	r3, #3
 8001932:	e21c      	b.n	8001d6e <HAL_RCC_OscConfig+0x109a>
 8001934:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001938:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800193c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001940:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001942:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001946:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 800194a:	681b      	ldr	r3, [r3, #0]
 800194c:	fa93 f2a3 	rbit	r2, r3
 8001950:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001954:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001958:	601a      	str	r2, [r3, #0]
  return result;
 800195a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800195e:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001962:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001964:	fab3 f383 	clz	r3, r3
 8001968:	b2db      	uxtb	r3, r3
 800196a:	095b      	lsrs	r3, r3, #5
 800196c:	b2db      	uxtb	r3, r3
 800196e:	f043 0301 	orr.w	r3, r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	2b01      	cmp	r3, #1
 8001976:	d102      	bne.n	800197e <HAL_RCC_OscConfig+0xcaa>
 8001978:	4b64      	ldr	r3, [pc, #400]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	e027      	b.n	80019ce <HAL_RCC_OscConfig+0xcfa>
 800197e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001982:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001986:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800198a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800198c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001990:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001994:	681b      	ldr	r3, [r3, #0]
 8001996:	fa93 f2a3 	rbit	r2, r3
 800199a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800199e:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a8:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019ac:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019b6:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	fa93 f2a3 	rbit	r2, r3
 80019c0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019c4:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 80019c8:	601a      	str	r2, [r3, #0]
 80019ca:	4b50      	ldr	r3, [pc, #320]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 80019cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80019ce:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019d2:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019d6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 80019da:	6011      	str	r1, [r2, #0]
 80019dc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019e0:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 80019e4:	6812      	ldr	r2, [r2, #0]
 80019e6:	fa92 f1a2 	rbit	r1, r2
 80019ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019ee:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019f2:	6011      	str	r1, [r2, #0]
  return result;
 80019f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80019f8:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 80019fc:	6812      	ldr	r2, [r2, #0]
 80019fe:	fab2 f282 	clz	r2, r2
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	f042 0220 	orr.w	r2, r2, #32
 8001a08:	b2d2      	uxtb	r2, r2
 8001a0a:	f002 021f 	and.w	r2, r2, #31
 8001a0e:	2101      	movs	r1, #1
 8001a10:	fa01 f202 	lsl.w	r2, r1, r2
 8001a14:	4013      	ands	r3, r2
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d182      	bne.n	8001920 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a1a:	4b3c      	ldr	r3, [pc, #240]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 8001a1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a1e:	f023 020f 	bic.w	r2, r3, #15
 8001a22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a26:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a2e:	4937      	ldr	r1, [pc, #220]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 8001a30:	4313      	orrs	r3, r2
 8001a32:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001a34:	4b35      	ldr	r3, [pc, #212]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 8001a36:	685b      	ldr	r3, [r3, #4]
 8001a38:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001a3c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a40:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	6a19      	ldr	r1, [r3, #32]
 8001a48:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a4c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	69db      	ldr	r3, [r3, #28]
 8001a54:	430b      	orrs	r3, r1
 8001a56:	492d      	ldr	r1, [pc, #180]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 8001a58:	4313      	orrs	r3, r2
 8001a5a:	604b      	str	r3, [r1, #4]
 8001a5c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a60:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a64:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001a68:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a6a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6e:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	fa93 f2a3 	rbit	r2, r3
 8001a78:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a7c:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a80:	601a      	str	r2, [r3, #0]
  return result;
 8001a82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a86:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001a8a:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a8c:	fab3 f383 	clz	r3, r3
 8001a90:	b2db      	uxtb	r3, r3
 8001a92:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001a96:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001a9a:	009b      	lsls	r3, r3, #2
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001aa2:	f7fe fe19 	bl	80006d8 <HAL_GetTick>
 8001aa6:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001aaa:	e009      	b.n	8001ac0 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001aac:	f7fe fe14 	bl	80006d8 <HAL_GetTick>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001ab6:	1ad3      	subs	r3, r2, r3
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d901      	bls.n	8001ac0 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001abc:	2303      	movs	r3, #3
 8001abe:	e156      	b.n	8001d6e <HAL_RCC_OscConfig+0x109a>
 8001ac0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ac4:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ac8:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001acc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ace:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ad2:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	fa93 f2a3 	rbit	r2, r3
 8001adc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ae0:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ae4:	601a      	str	r2, [r3, #0]
  return result;
 8001ae6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001aea:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001aee:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001af0:	fab3 f383 	clz	r3, r3
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	095b      	lsrs	r3, r3, #5
 8001af8:	b2db      	uxtb	r3, r3
 8001afa:	f043 0301 	orr.w	r3, r3, #1
 8001afe:	b2db      	uxtb	r3, r3
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d105      	bne.n	8001b10 <HAL_RCC_OscConfig+0xe3c>
 8001b04:	4b01      	ldr	r3, [pc, #4]	; (8001b0c <HAL_RCC_OscConfig+0xe38>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	e02a      	b.n	8001b60 <HAL_RCC_OscConfig+0xe8c>
 8001b0a:	bf00      	nop
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b14:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b18:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b22:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b30:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001b34:	601a      	str	r2, [r3, #0]
 8001b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3a:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b3e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b42:	601a      	str	r2, [r3, #0]
 8001b44:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b48:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	fa93 f2a3 	rbit	r2, r3
 8001b52:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b56:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001b5a:	601a      	str	r2, [r3, #0]
 8001b5c:	4b86      	ldr	r3, [pc, #536]	; (8001d78 <HAL_RCC_OscConfig+0x10a4>)
 8001b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001b60:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b64:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b68:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001b6c:	6011      	str	r1, [r2, #0]
 8001b6e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b72:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001b76:	6812      	ldr	r2, [r2, #0]
 8001b78:	fa92 f1a2 	rbit	r1, r2
 8001b7c:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b80:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b84:	6011      	str	r1, [r2, #0]
  return result;
 8001b86:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001b8a:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001b8e:	6812      	ldr	r2, [r2, #0]
 8001b90:	fab2 f282 	clz	r2, r2
 8001b94:	b2d2      	uxtb	r2, r2
 8001b96:	f042 0220 	orr.w	r2, r2, #32
 8001b9a:	b2d2      	uxtb	r2, r2
 8001b9c:	f002 021f 	and.w	r2, r2, #31
 8001ba0:	2101      	movs	r1, #1
 8001ba2:	fa01 f202 	lsl.w	r2, r1, r2
 8001ba6:	4013      	ands	r3, r2
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f43f af7f 	beq.w	8001aac <HAL_RCC_OscConfig+0xdd8>
 8001bae:	e0dd      	b.n	8001d6c <HAL_RCC_OscConfig+0x1098>
 8001bb0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bb4:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bb8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001bbc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bbe:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc2:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	fa93 f2a3 	rbit	r2, r3
 8001bcc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd0:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bd4:	601a      	str	r2, [r3, #0]
  return result;
 8001bd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bda:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001bde:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001be0:	fab3 f383 	clz	r3, r3
 8001be4:	b2db      	uxtb	r3, r3
 8001be6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001bea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001bee:	009b      	lsls	r3, r3, #2
 8001bf0:	461a      	mov	r2, r3
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001bf6:	f7fe fd6f 	bl	80006d8 <HAL_GetTick>
 8001bfa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001bfe:	e009      	b.n	8001c14 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001c00:	f7fe fd6a 	bl	80006d8 <HAL_GetTick>
 8001c04:	4602      	mov	r2, r0
 8001c06:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001c0a:	1ad3      	subs	r3, r2, r3
 8001c0c:	2b02      	cmp	r3, #2
 8001c0e:	d901      	bls.n	8001c14 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001c10:	2303      	movs	r3, #3
 8001c12:	e0ac      	b.n	8001d6e <HAL_RCC_OscConfig+0x109a>
 8001c14:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c18:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c1c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c20:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c22:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c26:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	fa93 f2a3 	rbit	r2, r3
 8001c30:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c34:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c38:	601a      	str	r2, [r3, #0]
  return result;
 8001c3a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c3e:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001c42:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001c44:	fab3 f383 	clz	r3, r3
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	095b      	lsrs	r3, r3, #5
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	f043 0301 	orr.w	r3, r3, #1
 8001c52:	b2db      	uxtb	r3, r3
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d102      	bne.n	8001c5e <HAL_RCC_OscConfig+0xf8a>
 8001c58:	4b47      	ldr	r3, [pc, #284]	; (8001d78 <HAL_RCC_OscConfig+0x10a4>)
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	e027      	b.n	8001cae <HAL_RCC_OscConfig+0xfda>
 8001c5e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c62:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c66:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c6a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c6c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c70:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	fa93 f2a3 	rbit	r2, r3
 8001c7a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c7e:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001c82:	601a      	str	r2, [r3, #0]
 8001c84:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c88:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c8c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c96:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	fa93 f2a3 	rbit	r2, r3
 8001ca0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ca4:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001ca8:	601a      	str	r2, [r3, #0]
 8001caa:	4b33      	ldr	r3, [pc, #204]	; (8001d78 <HAL_RCC_OscConfig+0x10a4>)
 8001cac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cae:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cb2:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cb6:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001cba:	6011      	str	r1, [r2, #0]
 8001cbc:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cc0:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001cc4:	6812      	ldr	r2, [r2, #0]
 8001cc6:	fa92 f1a2 	rbit	r1, r2
 8001cca:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cce:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001cd2:	6011      	str	r1, [r2, #0]
  return result;
 8001cd4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001cd8:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001cdc:	6812      	ldr	r2, [r2, #0]
 8001cde:	fab2 f282 	clz	r2, r2
 8001ce2:	b2d2      	uxtb	r2, r2
 8001ce4:	f042 0220 	orr.w	r2, r2, #32
 8001ce8:	b2d2      	uxtb	r2, r2
 8001cea:	f002 021f 	and.w	r2, r2, #31
 8001cee:	2101      	movs	r1, #1
 8001cf0:	fa01 f202 	lsl.w	r2, r1, r2
 8001cf4:	4013      	ands	r3, r2
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d182      	bne.n	8001c00 <HAL_RCC_OscConfig+0xf2c>
 8001cfa:	e037      	b.n	8001d6c <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001cfc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e02e      	b.n	8001d6e <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001d10:	4b19      	ldr	r3, [pc, #100]	; (8001d78 <HAL_RCC_OscConfig+0x10a4>)
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001d18:	4b17      	ldr	r3, [pc, #92]	; (8001d78 <HAL_RCC_OscConfig+0x10a4>)
 8001d1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d1c:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d20:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d24:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001d28:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d2c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	69db      	ldr	r3, [r3, #28]
 8001d34:	429a      	cmp	r2, r3
 8001d36:	d117      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d38:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001d3c:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001d40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d44:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001d4c:	429a      	cmp	r2, r3
 8001d4e:	d10b      	bne.n	8001d68 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001d50:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001d54:	f003 020f 	and.w	r2, r3, #15
 8001d58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d5c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001d64:	429a      	cmp	r2, r3
 8001d66:	d001      	beq.n	8001d6c <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e000      	b.n	8001d6e <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001d74:	46bd      	mov	sp, r7
 8001d76:	bd80      	pop	{r7, pc}
 8001d78:	40021000 	.word	0x40021000

08001d7c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b09e      	sub	sp, #120	; 0x78
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001d86:	2300      	movs	r3, #0
 8001d88:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d101      	bne.n	8001d94 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001d90:	2301      	movs	r3, #1
 8001d92:	e162      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001d94:	4b90      	ldr	r3, [pc, #576]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f003 0307 	and.w	r3, r3, #7
 8001d9c:	683a      	ldr	r2, [r7, #0]
 8001d9e:	429a      	cmp	r2, r3
 8001da0:	d910      	bls.n	8001dc4 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001da2:	4b8d      	ldr	r3, [pc, #564]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f023 0207 	bic.w	r2, r3, #7
 8001daa:	498b      	ldr	r1, [pc, #556]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001db2:	4b89      	ldr	r3, [pc, #548]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f003 0307 	and.w	r3, r3, #7
 8001dba:	683a      	ldr	r2, [r7, #0]
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d001      	beq.n	8001dc4 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e14a      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f003 0302 	and.w	r3, r3, #2
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d008      	beq.n	8001de2 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001dd0:	4b82      	ldr	r3, [pc, #520]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001dd2:	685b      	ldr	r3, [r3, #4]
 8001dd4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	689b      	ldr	r3, [r3, #8]
 8001ddc:	497f      	ldr	r1, [pc, #508]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001dde:	4313      	orrs	r3, r2
 8001de0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f003 0301 	and.w	r3, r3, #1
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	f000 80dc 	beq.w	8001fa8 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	685b      	ldr	r3, [r3, #4]
 8001df4:	2b01      	cmp	r3, #1
 8001df6:	d13c      	bne.n	8001e72 <HAL_RCC_ClockConfig+0xf6>
 8001df8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001dfc:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001dfe:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001e00:	fa93 f3a3 	rbit	r3, r3
 8001e04:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001e06:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e08:	fab3 f383 	clz	r3, r3
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	095b      	lsrs	r3, r3, #5
 8001e10:	b2db      	uxtb	r3, r3
 8001e12:	f043 0301 	orr.w	r3, r3, #1
 8001e16:	b2db      	uxtb	r3, r3
 8001e18:	2b01      	cmp	r3, #1
 8001e1a:	d102      	bne.n	8001e22 <HAL_RCC_ClockConfig+0xa6>
 8001e1c:	4b6f      	ldr	r3, [pc, #444]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001e1e:	681b      	ldr	r3, [r3, #0]
 8001e20:	e00f      	b.n	8001e42 <HAL_RCC_ClockConfig+0xc6>
 8001e22:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e28:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001e2a:	fa93 f3a3 	rbit	r3, r3
 8001e2e:	667b      	str	r3, [r7, #100]	; 0x64
 8001e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001e34:	663b      	str	r3, [r7, #96]	; 0x60
 8001e36:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001e38:	fa93 f3a3 	rbit	r3, r3
 8001e3c:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001e3e:	4b67      	ldr	r3, [pc, #412]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e42:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001e46:	65ba      	str	r2, [r7, #88]	; 0x58
 8001e48:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001e4a:	fa92 f2a2 	rbit	r2, r2
 8001e4e:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001e50:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001e52:	fab2 f282 	clz	r2, r2
 8001e56:	b2d2      	uxtb	r2, r2
 8001e58:	f042 0220 	orr.w	r2, r2, #32
 8001e5c:	b2d2      	uxtb	r2, r2
 8001e5e:	f002 021f 	and.w	r2, r2, #31
 8001e62:	2101      	movs	r1, #1
 8001e64:	fa01 f202 	lsl.w	r2, r1, r2
 8001e68:	4013      	ands	r3, r2
 8001e6a:	2b00      	cmp	r3, #0
 8001e6c:	d17b      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
 8001e70:	e0f3      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	d13c      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x178>
 8001e7a:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001e7e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001e80:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001e82:	fa93 f3a3 	rbit	r3, r3
 8001e86:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001e88:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001e8a:	fab3 f383 	clz	r3, r3
 8001e8e:	b2db      	uxtb	r3, r3
 8001e90:	095b      	lsrs	r3, r3, #5
 8001e92:	b2db      	uxtb	r3, r3
 8001e94:	f043 0301 	orr.w	r3, r3, #1
 8001e98:	b2db      	uxtb	r3, r3
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d102      	bne.n	8001ea4 <HAL_RCC_ClockConfig+0x128>
 8001e9e:	4b4f      	ldr	r3, [pc, #316]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	e00f      	b.n	8001ec4 <HAL_RCC_ClockConfig+0x148>
 8001ea4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001ea8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eaa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001eac:	fa93 f3a3 	rbit	r3, r3
 8001eb0:	647b      	str	r3, [r7, #68]	; 0x44
 8001eb2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001eb6:	643b      	str	r3, [r7, #64]	; 0x40
 8001eb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001eba:	fa93 f3a3 	rbit	r3, r3
 8001ebe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001ec0:	4b46      	ldr	r3, [pc, #280]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001ec8:	63ba      	str	r2, [r7, #56]	; 0x38
 8001eca:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001ecc:	fa92 f2a2 	rbit	r2, r2
 8001ed0:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001ed2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ed4:	fab2 f282 	clz	r2, r2
 8001ed8:	b2d2      	uxtb	r2, r2
 8001eda:	f042 0220 	orr.w	r2, r2, #32
 8001ede:	b2d2      	uxtb	r2, r2
 8001ee0:	f002 021f 	and.w	r2, r2, #31
 8001ee4:	2101      	movs	r1, #1
 8001ee6:	fa01 f202 	lsl.w	r2, r1, r2
 8001eea:	4013      	ands	r3, r2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d13a      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e0b2      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
 8001ef4:	2302      	movs	r3, #2
 8001ef6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001ef8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001efa:	fa93 f3a3 	rbit	r3, r3
 8001efe:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001f00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f02:	fab3 f383 	clz	r3, r3
 8001f06:	b2db      	uxtb	r3, r3
 8001f08:	095b      	lsrs	r3, r3, #5
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	f043 0301 	orr.w	r3, r3, #1
 8001f10:	b2db      	uxtb	r3, r3
 8001f12:	2b01      	cmp	r3, #1
 8001f14:	d102      	bne.n	8001f1c <HAL_RCC_ClockConfig+0x1a0>
 8001f16:	4b31      	ldr	r3, [pc, #196]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	e00d      	b.n	8001f38 <HAL_RCC_ClockConfig+0x1bc>
 8001f1c:	2302      	movs	r3, #2
 8001f1e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f22:	fa93 f3a3 	rbit	r3, r3
 8001f26:	627b      	str	r3, [r7, #36]	; 0x24
 8001f28:	2302      	movs	r3, #2
 8001f2a:	623b      	str	r3, [r7, #32]
 8001f2c:	6a3b      	ldr	r3, [r7, #32]
 8001f2e:	fa93 f3a3 	rbit	r3, r3
 8001f32:	61fb      	str	r3, [r7, #28]
 8001f34:	4b29      	ldr	r3, [pc, #164]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f38:	2202      	movs	r2, #2
 8001f3a:	61ba      	str	r2, [r7, #24]
 8001f3c:	69ba      	ldr	r2, [r7, #24]
 8001f3e:	fa92 f2a2 	rbit	r2, r2
 8001f42:	617a      	str	r2, [r7, #20]
  return result;
 8001f44:	697a      	ldr	r2, [r7, #20]
 8001f46:	fab2 f282 	clz	r2, r2
 8001f4a:	b2d2      	uxtb	r2, r2
 8001f4c:	f042 0220 	orr.w	r2, r2, #32
 8001f50:	b2d2      	uxtb	r2, r2
 8001f52:	f002 021f 	and.w	r2, r2, #31
 8001f56:	2101      	movs	r1, #1
 8001f58:	fa01 f202 	lsl.w	r2, r1, r2
 8001f5c:	4013      	ands	r3, r2
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d101      	bne.n	8001f66 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f62:	2301      	movs	r3, #1
 8001f64:	e079      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001f66:	4b1d      	ldr	r3, [pc, #116]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	f023 0203 	bic.w	r2, r3, #3
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	491a      	ldr	r1, [pc, #104]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f74:	4313      	orrs	r3, r2
 8001f76:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f78:	f7fe fbae 	bl	80006d8 <HAL_GetTick>
 8001f7c:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f7e:	e00a      	b.n	8001f96 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f80:	f7fe fbaa 	bl	80006d8 <HAL_GetTick>
 8001f84:	4602      	mov	r2, r0
 8001f86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f88:	1ad3      	subs	r3, r2, r3
 8001f8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f8e:	4293      	cmp	r3, r2
 8001f90:	d901      	bls.n	8001f96 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8001f92:	2303      	movs	r3, #3
 8001f94:	e061      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f96:	4b11      	ldr	r3, [pc, #68]	; (8001fdc <HAL_RCC_ClockConfig+0x260>)
 8001f98:	685b      	ldr	r3, [r3, #4]
 8001f9a:	f003 020c 	and.w	r2, r3, #12
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	685b      	ldr	r3, [r3, #4]
 8001fa2:	009b      	lsls	r3, r3, #2
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d1eb      	bne.n	8001f80 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001fa8:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f003 0307 	and.w	r3, r3, #7
 8001fb0:	683a      	ldr	r2, [r7, #0]
 8001fb2:	429a      	cmp	r2, r3
 8001fb4:	d214      	bcs.n	8001fe0 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f023 0207 	bic.w	r2, r3, #7
 8001fbe:	4906      	ldr	r1, [pc, #24]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc0:	683b      	ldr	r3, [r7, #0]
 8001fc2:	4313      	orrs	r3, r2
 8001fc4:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fc6:	4b04      	ldr	r3, [pc, #16]	; (8001fd8 <HAL_RCC_ClockConfig+0x25c>)
 8001fc8:	681b      	ldr	r3, [r3, #0]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	683a      	ldr	r2, [r7, #0]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d005      	beq.n	8001fe0 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	e040      	b.n	800205a <HAL_RCC_ClockConfig+0x2de>
 8001fd8:	40022000 	.word	0x40022000
 8001fdc:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f003 0304 	and.w	r3, r3, #4
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d008      	beq.n	8001ffe <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fec:	4b1d      	ldr	r3, [pc, #116]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	68db      	ldr	r3, [r3, #12]
 8001ff8:	491a      	ldr	r1, [pc, #104]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8001ffa:	4313      	orrs	r3, r2
 8001ffc:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	f003 0308 	and.w	r3, r3, #8
 8002006:	2b00      	cmp	r3, #0
 8002008:	d009      	beq.n	800201e <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800200a:	4b16      	ldr	r3, [pc, #88]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 800200c:	685b      	ldr	r3, [r3, #4]
 800200e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	691b      	ldr	r3, [r3, #16]
 8002016:	00db      	lsls	r3, r3, #3
 8002018:	4912      	ldr	r1, [pc, #72]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 800201a:	4313      	orrs	r3, r2
 800201c:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 800201e:	f000 f829 	bl	8002074 <HAL_RCC_GetSysClockFreq>
 8002022:	4601      	mov	r1, r0
 8002024:	4b0f      	ldr	r3, [pc, #60]	; (8002064 <HAL_RCC_ClockConfig+0x2e8>)
 8002026:	685b      	ldr	r3, [r3, #4]
 8002028:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800202c:	22f0      	movs	r2, #240	; 0xf0
 800202e:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002030:	693a      	ldr	r2, [r7, #16]
 8002032:	fa92 f2a2 	rbit	r2, r2
 8002036:	60fa      	str	r2, [r7, #12]
  return result;
 8002038:	68fa      	ldr	r2, [r7, #12]
 800203a:	fab2 f282 	clz	r2, r2
 800203e:	b2d2      	uxtb	r2, r2
 8002040:	40d3      	lsrs	r3, r2
 8002042:	4a09      	ldr	r2, [pc, #36]	; (8002068 <HAL_RCC_ClockConfig+0x2ec>)
 8002044:	5cd3      	ldrb	r3, [r2, r3]
 8002046:	fa21 f303 	lsr.w	r3, r1, r3
 800204a:	4a08      	ldr	r2, [pc, #32]	; (800206c <HAL_RCC_ClockConfig+0x2f0>)
 800204c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800204e:	4b08      	ldr	r3, [pc, #32]	; (8002070 <HAL_RCC_ClockConfig+0x2f4>)
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	4618      	mov	r0, r3
 8002054:	f7fe fafc 	bl	8000650 <HAL_InitTick>
  
  return HAL_OK;
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3778      	adds	r7, #120	; 0x78
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	40021000 	.word	0x40021000
 8002068:	08002f68 	.word	0x08002f68
 800206c:	20000000 	.word	0x20000000
 8002070:	20000004 	.word	0x20000004

08002074 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002074:	b480      	push	{r7}
 8002076:	b08b      	sub	sp, #44	; 0x2c
 8002078:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800207a:	2300      	movs	r3, #0
 800207c:	61fb      	str	r3, [r7, #28]
 800207e:	2300      	movs	r3, #0
 8002080:	61bb      	str	r3, [r7, #24]
 8002082:	2300      	movs	r3, #0
 8002084:	627b      	str	r3, [r7, #36]	; 0x24
 8002086:	2300      	movs	r3, #0
 8002088:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800208a:	2300      	movs	r3, #0
 800208c:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 800208e:	4b2a      	ldr	r3, [pc, #168]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 8002090:	685b      	ldr	r3, [r3, #4]
 8002092:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002094:	69fb      	ldr	r3, [r7, #28]
 8002096:	f003 030c 	and.w	r3, r3, #12
 800209a:	2b04      	cmp	r3, #4
 800209c:	d002      	beq.n	80020a4 <HAL_RCC_GetSysClockFreq+0x30>
 800209e:	2b08      	cmp	r3, #8
 80020a0:	d003      	beq.n	80020aa <HAL_RCC_GetSysClockFreq+0x36>
 80020a2:	e03f      	b.n	8002124 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80020a4:	4b25      	ldr	r3, [pc, #148]	; (800213c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020a6:	623b      	str	r3, [r7, #32]
      break;
 80020a8:	e03f      	b.n	800212a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 80020aa:	69fb      	ldr	r3, [r7, #28]
 80020ac:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 80020b0:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 80020b4:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020b6:	68ba      	ldr	r2, [r7, #8]
 80020b8:	fa92 f2a2 	rbit	r2, r2
 80020bc:	607a      	str	r2, [r7, #4]
  return result;
 80020be:	687a      	ldr	r2, [r7, #4]
 80020c0:	fab2 f282 	clz	r2, r2
 80020c4:	b2d2      	uxtb	r2, r2
 80020c6:	40d3      	lsrs	r3, r2
 80020c8:	4a1d      	ldr	r2, [pc, #116]	; (8002140 <HAL_RCC_GetSysClockFreq+0xcc>)
 80020ca:	5cd3      	ldrb	r3, [r2, r3]
 80020cc:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 80020ce:	4b1a      	ldr	r3, [pc, #104]	; (8002138 <HAL_RCC_GetSysClockFreq+0xc4>)
 80020d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d2:	f003 030f 	and.w	r3, r3, #15
 80020d6:	220f      	movs	r2, #15
 80020d8:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020da:	693a      	ldr	r2, [r7, #16]
 80020dc:	fa92 f2a2 	rbit	r2, r2
 80020e0:	60fa      	str	r2, [r7, #12]
  return result;
 80020e2:	68fa      	ldr	r2, [r7, #12]
 80020e4:	fab2 f282 	clz	r2, r2
 80020e8:	b2d2      	uxtb	r2, r2
 80020ea:	40d3      	lsrs	r3, r2
 80020ec:	4a15      	ldr	r2, [pc, #84]	; (8002144 <HAL_RCC_GetSysClockFreq+0xd0>)
 80020ee:	5cd3      	ldrb	r3, [r2, r3]
 80020f0:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d008      	beq.n	800210e <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80020fc:	4a0f      	ldr	r2, [pc, #60]	; (800213c <HAL_RCC_GetSysClockFreq+0xc8>)
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	fbb2 f2f3 	udiv	r2, r2, r3
 8002104:	697b      	ldr	r3, [r7, #20]
 8002106:	fb02 f303 	mul.w	r3, r2, r3
 800210a:	627b      	str	r3, [r7, #36]	; 0x24
 800210c:	e007      	b.n	800211e <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800210e:	4a0b      	ldr	r2, [pc, #44]	; (800213c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002110:	69bb      	ldr	r3, [r7, #24]
 8002112:	fbb2 f2f3 	udiv	r2, r2, r3
 8002116:	697b      	ldr	r3, [r7, #20]
 8002118:	fb02 f303 	mul.w	r3, r2, r3
 800211c:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800211e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002120:	623b      	str	r3, [r7, #32]
      break;
 8002122:	e002      	b.n	800212a <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002124:	4b05      	ldr	r3, [pc, #20]	; (800213c <HAL_RCC_GetSysClockFreq+0xc8>)
 8002126:	623b      	str	r3, [r7, #32]
      break;
 8002128:	bf00      	nop
    }
  }
  return sysclockfreq;
 800212a:	6a3b      	ldr	r3, [r7, #32]
}
 800212c:	4618      	mov	r0, r3
 800212e:	372c      	adds	r7, #44	; 0x2c
 8002130:	46bd      	mov	sp, r7
 8002132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002136:	4770      	bx	lr
 8002138:	40021000 	.word	0x40021000
 800213c:	007a1200 	.word	0x007a1200
 8002140:	08002f78 	.word	0x08002f78
 8002144:	08002f88 	.word	0x08002f88

08002148 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b092      	sub	sp, #72	; 0x48
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002150:	2300      	movs	r3, #0
 8002152:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 8002154:	2300      	movs	r3, #0
 8002156:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8002158:	2300      	movs	r3, #0
 800215a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	681b      	ldr	r3, [r3, #0]
 8002162:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002166:	2b00      	cmp	r3, #0
 8002168:	f000 80d4 	beq.w	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800216c:	4b4e      	ldr	r3, [pc, #312]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800216e:	69db      	ldr	r3, [r3, #28]
 8002170:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002174:	2b00      	cmp	r3, #0
 8002176:	d10e      	bne.n	8002196 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002178:	4b4b      	ldr	r3, [pc, #300]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217a:	69db      	ldr	r3, [r3, #28]
 800217c:	4a4a      	ldr	r2, [pc, #296]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800217e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002182:	61d3      	str	r3, [r2, #28]
 8002184:	4b48      	ldr	r3, [pc, #288]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002186:	69db      	ldr	r3, [r3, #28]
 8002188:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800218c:	60bb      	str	r3, [r7, #8]
 800218e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002190:	2301      	movs	r3, #1
 8002192:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002196:	4b45      	ldr	r3, [pc, #276]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d118      	bne.n	80021d4 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021a2:	4b42      	ldr	r3, [pc, #264]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	4a41      	ldr	r2, [pc, #260]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021ac:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021ae:	f7fe fa93 	bl	80006d8 <HAL_GetTick>
 80021b2:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021b4:	e008      	b.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021b6:	f7fe fa8f 	bl	80006d8 <HAL_GetTick>
 80021ba:	4602      	mov	r2, r0
 80021bc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80021be:	1ad3      	subs	r3, r2, r3
 80021c0:	2b64      	cmp	r3, #100	; 0x64
 80021c2:	d901      	bls.n	80021c8 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80021c4:	2303      	movs	r3, #3
 80021c6:	e1d6      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021c8:	4b38      	ldr	r3, [pc, #224]	; (80022ac <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d0f0      	beq.n	80021b6 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021d4:	4b34      	ldr	r3, [pc, #208]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021d6:	6a1b      	ldr	r3, [r3, #32]
 80021d8:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021dc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021de:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	f000 8084 	beq.w	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80021ee:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80021f0:	429a      	cmp	r2, r3
 80021f2:	d07c      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021f4:	4b2c      	ldr	r3, [pc, #176]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80021f6:	6a1b      	ldr	r3, [r3, #32]
 80021f8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80021fc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80021fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002202:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002204:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002206:	fa93 f3a3 	rbit	r3, r3
 800220a:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 800220c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800220e:	fab3 f383 	clz	r3, r3
 8002212:	b2db      	uxtb	r3, r3
 8002214:	461a      	mov	r2, r3
 8002216:	4b26      	ldr	r3, [pc, #152]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002218:	4413      	add	r3, r2
 800221a:	009b      	lsls	r3, r3, #2
 800221c:	461a      	mov	r2, r3
 800221e:	2301      	movs	r3, #1
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002226:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002228:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800222a:	fa93 f3a3 	rbit	r3, r3
 800222e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002230:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002232:	fab3 f383 	clz	r3, r3
 8002236:	b2db      	uxtb	r3, r3
 8002238:	461a      	mov	r2, r3
 800223a:	4b1d      	ldr	r3, [pc, #116]	; (80022b0 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	461a      	mov	r2, r3
 8002242:	2300      	movs	r3, #0
 8002244:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002246:	4a18      	ldr	r2, [pc, #96]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002248:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800224c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800224e:	f003 0301 	and.w	r3, r3, #1
 8002252:	2b00      	cmp	r3, #0
 8002254:	d04b      	beq.n	80022ee <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002256:	f7fe fa3f 	bl	80006d8 <HAL_GetTick>
 800225a:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800225c:	e00a      	b.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225e:	f7fe fa3b 	bl	80006d8 <HAL_GetTick>
 8002262:	4602      	mov	r2, r0
 8002264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002266:	1ad3      	subs	r3, r2, r3
 8002268:	f241 3288 	movw	r2, #5000	; 0x1388
 800226c:	4293      	cmp	r3, r2
 800226e:	d901      	bls.n	8002274 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 8002270:	2303      	movs	r3, #3
 8002272:	e180      	b.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8002274:	2302      	movs	r3, #2
 8002276:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002278:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800227a:	fa93 f3a3 	rbit	r3, r3
 800227e:	627b      	str	r3, [r7, #36]	; 0x24
 8002280:	2302      	movs	r3, #2
 8002282:	623b      	str	r3, [r7, #32]
 8002284:	6a3b      	ldr	r3, [r7, #32]
 8002286:	fa93 f3a3 	rbit	r3, r3
 800228a:	61fb      	str	r3, [r7, #28]
  return result;
 800228c:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800228e:	fab3 f383 	clz	r3, r3
 8002292:	b2db      	uxtb	r3, r3
 8002294:	095b      	lsrs	r3, r3, #5
 8002296:	b2db      	uxtb	r3, r3
 8002298:	f043 0302 	orr.w	r3, r3, #2
 800229c:	b2db      	uxtb	r3, r3
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d108      	bne.n	80022b4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80022a2:	4b01      	ldr	r3, [pc, #4]	; (80022a8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022a4:	6a1b      	ldr	r3, [r3, #32]
 80022a6:	e00d      	b.n	80022c4 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80022a8:	40021000 	.word	0x40021000
 80022ac:	40007000 	.word	0x40007000
 80022b0:	10908100 	.word	0x10908100
 80022b4:	2302      	movs	r3, #2
 80022b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b8:	69bb      	ldr	r3, [r7, #24]
 80022ba:	fa93 f3a3 	rbit	r3, r3
 80022be:	617b      	str	r3, [r7, #20]
 80022c0:	4b9a      	ldr	r3, [pc, #616]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022c4:	2202      	movs	r2, #2
 80022c6:	613a      	str	r2, [r7, #16]
 80022c8:	693a      	ldr	r2, [r7, #16]
 80022ca:	fa92 f2a2 	rbit	r2, r2
 80022ce:	60fa      	str	r2, [r7, #12]
  return result;
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	fab2 f282 	clz	r2, r2
 80022d6:	b2d2      	uxtb	r2, r2
 80022d8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80022dc:	b2d2      	uxtb	r2, r2
 80022de:	f002 021f 	and.w	r2, r2, #31
 80022e2:	2101      	movs	r1, #1
 80022e4:	fa01 f202 	lsl.w	r2, r1, r2
 80022e8:	4013      	ands	r3, r2
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d0b7      	beq.n	800225e <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80022ee:	4b8f      	ldr	r3, [pc, #572]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022f0:	6a1b      	ldr	r3, [r3, #32]
 80022f2:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	498c      	ldr	r1, [pc, #560]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80022fc:	4313      	orrs	r3, r2
 80022fe:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002300:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002304:	2b01      	cmp	r3, #1
 8002306:	d105      	bne.n	8002314 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002308:	4b88      	ldr	r3, [pc, #544]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800230a:	69db      	ldr	r3, [r3, #28]
 800230c:	4a87      	ldr	r2, [pc, #540]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800230e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002312:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0301 	and.w	r3, r3, #1
 800231c:	2b00      	cmp	r3, #0
 800231e:	d008      	beq.n	8002332 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002320:	4b82      	ldr	r3, [pc, #520]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002322:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002324:	f023 0203 	bic.w	r2, r3, #3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	689b      	ldr	r3, [r3, #8]
 800232c:	497f      	ldr	r1, [pc, #508]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f003 0302 	and.w	r3, r3, #2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d008      	beq.n	8002350 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800233e:	4b7b      	ldr	r3, [pc, #492]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002342:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	68db      	ldr	r3, [r3, #12]
 800234a:	4978      	ldr	r1, [pc, #480]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800234c:	4313      	orrs	r3, r2
 800234e:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0304 	and.w	r3, r3, #4
 8002358:	2b00      	cmp	r3, #0
 800235a:	d008      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800235c:	4b73      	ldr	r3, [pc, #460]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002360:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	691b      	ldr	r3, [r3, #16]
 8002368:	4970      	ldr	r1, [pc, #448]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800236a:	4313      	orrs	r3, r2
 800236c:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0320 	and.w	r3, r3, #32
 8002376:	2b00      	cmp	r3, #0
 8002378:	d008      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800237a:	4b6c      	ldr	r3, [pc, #432]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800237c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800237e:	f023 0210 	bic.w	r2, r3, #16
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	69db      	ldr	r3, [r3, #28]
 8002386:	4969      	ldr	r1, [pc, #420]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002388:	4313      	orrs	r3, r2
 800238a:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002394:	2b00      	cmp	r3, #0
 8002396:	d008      	beq.n	80023aa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 8002398:	4b64      	ldr	r3, [pc, #400]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800239a:	685b      	ldr	r3, [r3, #4]
 800239c:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80023a4:	4961      	ldr	r1, [pc, #388]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023a6:	4313      	orrs	r3, r2
 80023a8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d008      	beq.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80023b6:	4b5d      	ldr	r3, [pc, #372]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ba:	f023 0220 	bic.w	r2, r3, #32
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	6a1b      	ldr	r3, [r3, #32]
 80023c2:	495a      	ldr	r1, [pc, #360]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023c4:	4313      	orrs	r3, r2
 80023c6:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d008      	beq.n	80023e6 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80023d4:	4b55      	ldr	r3, [pc, #340]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d8:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80023e0:	4952      	ldr	r1, [pc, #328]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0308 	and.w	r3, r3, #8
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d008      	beq.n	8002404 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80023f2:	4b4e      	ldr	r3, [pc, #312]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80023f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	695b      	ldr	r3, [r3, #20]
 80023fe:	494b      	ldr	r1, [pc, #300]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002400:	4313      	orrs	r3, r2
 8002402:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0310 	and.w	r3, r3, #16
 800240c:	2b00      	cmp	r3, #0
 800240e:	d008      	beq.n	8002422 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002410:	4b46      	ldr	r3, [pc, #280]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002414:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	699b      	ldr	r3, [r3, #24]
 800241c:	4943      	ldr	r1, [pc, #268]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800241e:	4313      	orrs	r3, r2
 8002420:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800242a:	2b00      	cmp	r3, #0
 800242c:	d008      	beq.n	8002440 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800242e:	4b3f      	ldr	r3, [pc, #252]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800243a:	493c      	ldr	r1, [pc, #240]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800243c:	4313      	orrs	r3, r2
 800243e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002448:	2b00      	cmp	r3, #0
 800244a:	d008      	beq.n	800245e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800244c:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800244e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002450:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002458:	4934      	ldr	r1, [pc, #208]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245a:	4313      	orrs	r3, r2
 800245c:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800245e:	687b      	ldr	r3, [r7, #4]
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002466:	2b00      	cmp	r3, #0
 8002468:	d008      	beq.n	800247c <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 800246a:	4b30      	ldr	r3, [pc, #192]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002476:	492d      	ldr	r1, [pc, #180]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002478:	4313      	orrs	r3, r2
 800247a:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002484:	2b00      	cmp	r3, #0
 8002486:	d008      	beq.n	800249a <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8002488:	4b28      	ldr	r3, [pc, #160]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800248a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800248c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002494:	4925      	ldr	r1, [pc, #148]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002496:	4313      	orrs	r3, r2
 8002498:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	d008      	beq.n	80024b8 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80024a6:	4b21      	ldr	r3, [pc, #132]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	491e      	ldr	r1, [pc, #120]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b4:	4313      	orrs	r3, r2
 80024b6:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d008      	beq.n	80024d6 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80024c4:	4b19      	ldr	r3, [pc, #100]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c8:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024d0:	4916      	ldr	r1, [pc, #88]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d008      	beq.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80024e2:	4b12      	ldr	r3, [pc, #72]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024e6:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024ee:	490f      	ldr	r1, [pc, #60]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024f0:	4313      	orrs	r3, r2
 80024f2:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024fc:	2b00      	cmp	r3, #0
 80024fe:	d008      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002500:	4b0a      	ldr	r3, [pc, #40]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002504:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250c:	4907      	ldr	r1, [pc, #28]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800250e:	4313      	orrs	r3, r2
 8002510:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800251a:	2b00      	cmp	r3, #0
 800251c:	d00c      	beq.n	8002538 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800251e:	4b03      	ldr	r3, [pc, #12]	; (800252c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002520:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002522:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	e002      	b.n	8002530 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800252a:	bf00      	nop
 800252c:	40021000 	.word	0x40021000
 8002530:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002532:	4913      	ldr	r1, [pc, #76]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002534:	4313      	orrs	r3, r2
 8002536:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002540:	2b00      	cmp	r3, #0
 8002542:	d008      	beq.n	8002556 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002544:	4b0e      	ldr	r3, [pc, #56]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002546:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002548:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002550:	490b      	ldr	r1, [pc, #44]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002552:	4313      	orrs	r3, r2
 8002554:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	681b      	ldr	r3, [r3, #0]
 800255a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d008      	beq.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8002562:	4b07      	ldr	r3, [pc, #28]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002564:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002566:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800256e:	4904      	ldr	r1, [pc, #16]	; (8002580 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002570:	4313      	orrs	r3, r2
 8002572:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8002574:	2300      	movs	r3, #0
}
 8002576:	4618      	mov	r0, r3
 8002578:	3748      	adds	r7, #72	; 0x48
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40021000 	.word	0x40021000

08002584 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	b082      	sub	sp, #8
 8002588:	af00      	add	r7, sp, #0
 800258a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2b00      	cmp	r3, #0
 8002590:	d101      	bne.n	8002596 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002592:	2301      	movs	r3, #1
 8002594:	e049      	b.n	800262a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800259c:	b2db      	uxtb	r3, r3
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d106      	bne.n	80025b0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80025aa:	6878      	ldr	r0, [r7, #4]
 80025ac:	f7fd ffa6 	bl	80004fc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	2202      	movs	r2, #2
 80025b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681a      	ldr	r2, [r3, #0]
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	3304      	adds	r3, #4
 80025c0:	4619      	mov	r1, r3
 80025c2:	4610      	mov	r0, r2
 80025c4:	f000 fab6 	bl	8002b34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	2201      	movs	r2, #1
 80025cc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2201      	movs	r2, #1
 80025d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	2201      	movs	r2, #1
 80025dc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	2201      	movs	r2, #1
 80025e4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	2201      	movs	r2, #1
 80025ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2201      	movs	r2, #1
 80025f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2201      	movs	r2, #1
 80025fc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	2201      	movs	r2, #1
 8002604:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	2201      	movs	r2, #1
 800260c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2201      	movs	r2, #1
 8002614:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2201      	movs	r2, #1
 800261c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002628:	2300      	movs	r3, #0
}
 800262a:	4618      	mov	r0, r3
 800262c:	3708      	adds	r7, #8
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
	...

08002634 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002642:	b2db      	uxtb	r3, r3
 8002644:	2b01      	cmp	r3, #1
 8002646:	d001      	beq.n	800264c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002648:	2301      	movs	r3, #1
 800264a:	e04f      	b.n	80026ec <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	2202      	movs	r2, #2
 8002650:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	68da      	ldr	r2, [r3, #12]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a23      	ldr	r2, [pc, #140]	; (80026f8 <HAL_TIM_Base_Start_IT+0xc4>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d01d      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x76>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002676:	d018      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x76>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a1f      	ldr	r2, [pc, #124]	; (80026fc <HAL_TIM_Base_Start_IT+0xc8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d013      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x76>
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	4a1e      	ldr	r2, [pc, #120]	; (8002700 <HAL_TIM_Base_Start_IT+0xcc>)
 8002688:	4293      	cmp	r3, r2
 800268a:	d00e      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x76>
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a1c      	ldr	r2, [pc, #112]	; (8002704 <HAL_TIM_Base_Start_IT+0xd0>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d009      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x76>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a1b      	ldr	r2, [pc, #108]	; (8002708 <HAL_TIM_Base_Start_IT+0xd4>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d004      	beq.n	80026aa <HAL_TIM_Base_Start_IT+0x76>
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a19      	ldr	r2, [pc, #100]	; (800270c <HAL_TIM_Base_Start_IT+0xd8>)
 80026a6:	4293      	cmp	r3, r2
 80026a8:	d115      	bne.n	80026d6 <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	689a      	ldr	r2, [r3, #8]
 80026b0:	4b17      	ldr	r3, [pc, #92]	; (8002710 <HAL_TIM_Base_Start_IT+0xdc>)
 80026b2:	4013      	ands	r3, r2
 80026b4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2b06      	cmp	r3, #6
 80026ba:	d015      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0xb4>
 80026bc:	68fb      	ldr	r3, [r7, #12]
 80026be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026c2:	d011      	beq.n	80026e8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	f042 0201 	orr.w	r2, r2, #1
 80026d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026d4:	e008      	b.n	80026e8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	681b      	ldr	r3, [r3, #0]
 80026da:	681a      	ldr	r2, [r3, #0]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	f042 0201 	orr.w	r2, r2, #1
 80026e4:	601a      	str	r2, [r3, #0]
 80026e6:	e000      	b.n	80026ea <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80026e8:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80026ea:	2300      	movs	r3, #0
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3714      	adds	r7, #20
 80026f0:	46bd      	mov	sp, r7
 80026f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f6:	4770      	bx	lr
 80026f8:	40012c00 	.word	0x40012c00
 80026fc:	40000400 	.word	0x40000400
 8002700:	40000800 	.word	0x40000800
 8002704:	40013400 	.word	0x40013400
 8002708:	40014000 	.word	0x40014000
 800270c:	40015000 	.word	0x40015000
 8002710:	00010007 	.word	0x00010007

08002714 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002714:	b580      	push	{r7, lr}
 8002716:	b082      	sub	sp, #8
 8002718:	af00      	add	r7, sp, #0
 800271a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	691b      	ldr	r3, [r3, #16]
 8002722:	f003 0302 	and.w	r3, r3, #2
 8002726:	2b02      	cmp	r3, #2
 8002728:	d122      	bne.n	8002770 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	f003 0302 	and.w	r3, r3, #2
 8002734:	2b02      	cmp	r3, #2
 8002736:	d11b      	bne.n	8002770 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	f06f 0202 	mvn.w	r2, #2
 8002740:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	2201      	movs	r2, #1
 8002746:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	699b      	ldr	r3, [r3, #24]
 800274e:	f003 0303 	and.w	r3, r3, #3
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002756:	6878      	ldr	r0, [r7, #4]
 8002758:	f000 f9ce 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 800275c:	e005      	b.n	800276a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800275e:	6878      	ldr	r0, [r7, #4]
 8002760:	f000 f9c0 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002764:	6878      	ldr	r0, [r7, #4]
 8002766:	f000 f9d1 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2200      	movs	r2, #0
 800276e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	691b      	ldr	r3, [r3, #16]
 8002776:	f003 0304 	and.w	r3, r3, #4
 800277a:	2b04      	cmp	r3, #4
 800277c:	d122      	bne.n	80027c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	f003 0304 	and.w	r3, r3, #4
 8002788:	2b04      	cmp	r3, #4
 800278a:	d11b      	bne.n	80027c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f06f 0204 	mvn.w	r2, #4
 8002794:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2202      	movs	r2, #2
 800279a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
 80027a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027aa:	6878      	ldr	r0, [r7, #4]
 80027ac:	f000 f9a4 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 80027b0:	e005      	b.n	80027be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f000 f996 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80027b8:	6878      	ldr	r0, [r7, #4]
 80027ba:	f000 f9a7 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	691b      	ldr	r3, [r3, #16]
 80027ca:	f003 0308 	and.w	r3, r3, #8
 80027ce:	2b08      	cmp	r3, #8
 80027d0:	d122      	bne.n	8002818 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	68db      	ldr	r3, [r3, #12]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b08      	cmp	r3, #8
 80027de:	d11b      	bne.n	8002818 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f06f 0208 	mvn.w	r2, #8
 80027e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	2204      	movs	r2, #4
 80027ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	69db      	ldr	r3, [r3, #28]
 80027f6:	f003 0303 	and.w	r3, r3, #3
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d003      	beq.n	8002806 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80027fe:	6878      	ldr	r0, [r7, #4]
 8002800:	f000 f97a 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 8002804:	e005      	b.n	8002812 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002806:	6878      	ldr	r0, [r7, #4]
 8002808:	f000 f96c 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800280c:	6878      	ldr	r0, [r7, #4]
 800280e:	f000 f97d 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	691b      	ldr	r3, [r3, #16]
 800281e:	f003 0310 	and.w	r3, r3, #16
 8002822:	2b10      	cmp	r3, #16
 8002824:	d122      	bne.n	800286c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	68db      	ldr	r3, [r3, #12]
 800282c:	f003 0310 	and.w	r3, r3, #16
 8002830:	2b10      	cmp	r3, #16
 8002832:	d11b      	bne.n	800286c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	f06f 0210 	mvn.w	r2, #16
 800283c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2208      	movs	r2, #8
 8002842:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	69db      	ldr	r3, [r3, #28]
 800284a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800284e:	2b00      	cmp	r3, #0
 8002850:	d003      	beq.n	800285a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002852:	6878      	ldr	r0, [r7, #4]
 8002854:	f000 f950 	bl	8002af8 <HAL_TIM_IC_CaptureCallback>
 8002858:	e005      	b.n	8002866 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800285a:	6878      	ldr	r0, [r7, #4]
 800285c:	f000 f942 	bl	8002ae4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002860:	6878      	ldr	r0, [r7, #4]
 8002862:	f000 f953 	bl	8002b0c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	2200      	movs	r2, #0
 800286a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	691b      	ldr	r3, [r3, #16]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	2b01      	cmp	r3, #1
 8002878:	d10e      	bne.n	8002898 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	68db      	ldr	r3, [r3, #12]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	2b01      	cmp	r3, #1
 8002886:	d107      	bne.n	8002898 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f06f 0201 	mvn.w	r2, #1
 8002890:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002892:	6878      	ldr	r0, [r7, #4]
 8002894:	f7fd fc9e 	bl	80001d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	691b      	ldr	r3, [r3, #16]
 800289e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028a2:	2b80      	cmp	r3, #128	; 0x80
 80028a4:	d10e      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	68db      	ldr	r3, [r3, #12]
 80028ac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028b0:	2b80      	cmp	r3, #128	; 0x80
 80028b2:	d107      	bne.n	80028c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80028bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80028be:	6878      	ldr	r0, [r7, #4]
 80028c0:	f000 fb06 	bl	8002ed0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	691b      	ldr	r3, [r3, #16]
 80028ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80028ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d2:	d10e      	bne.n	80028f2 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	68db      	ldr	r3, [r3, #12]
 80028da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80028de:	2b80      	cmp	r3, #128	; 0x80
 80028e0:	d107      	bne.n	80028f2 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80028ea:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80028ec:	6878      	ldr	r0, [r7, #4]
 80028ee:	f000 faf9 	bl	8002ee4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	691b      	ldr	r3, [r3, #16]
 80028f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80028fc:	2b40      	cmp	r3, #64	; 0x40
 80028fe:	d10e      	bne.n	800291e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	68db      	ldr	r3, [r3, #12]
 8002906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800290a:	2b40      	cmp	r3, #64	; 0x40
 800290c:	d107      	bne.n	800291e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002916:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002918:	6878      	ldr	r0, [r7, #4]
 800291a:	f000 f901 	bl	8002b20 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691b      	ldr	r3, [r3, #16]
 8002924:	f003 0320 	and.w	r3, r3, #32
 8002928:	2b20      	cmp	r3, #32
 800292a:	d10e      	bne.n	800294a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	68db      	ldr	r3, [r3, #12]
 8002932:	f003 0320 	and.w	r3, r3, #32
 8002936:	2b20      	cmp	r3, #32
 8002938:	d107      	bne.n	800294a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	f06f 0220 	mvn.w	r2, #32
 8002942:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 fab9 	bl	8002ebc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800294a:	bf00      	nop
 800294c:	3708      	adds	r7, #8
 800294e:	46bd      	mov	sp, r7
 8002950:	bd80      	pop	{r7, pc}

08002952 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002952:	b580      	push	{r7, lr}
 8002954:	b084      	sub	sp, #16
 8002956:	af00      	add	r7, sp, #0
 8002958:	6078      	str	r0, [r7, #4]
 800295a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800295c:	2300      	movs	r3, #0
 800295e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002966:	2b01      	cmp	r3, #1
 8002968:	d101      	bne.n	800296e <HAL_TIM_ConfigClockSource+0x1c>
 800296a:	2302      	movs	r3, #2
 800296c:	e0b6      	b.n	8002adc <HAL_TIM_ConfigClockSource+0x18a>
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	2201      	movs	r2, #1
 8002972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2202      	movs	r2, #2
 800297a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002986:	68bb      	ldr	r3, [r7, #8]
 8002988:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800298c:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002990:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002992:	68bb      	ldr	r3, [r7, #8]
 8002994:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002998:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	68ba      	ldr	r2, [r7, #8]
 80029a0:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	681b      	ldr	r3, [r3, #0]
 80029a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029aa:	d03e      	beq.n	8002a2a <HAL_TIM_ConfigClockSource+0xd8>
 80029ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80029b0:	f200 8087 	bhi.w	8002ac2 <HAL_TIM_ConfigClockSource+0x170>
 80029b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029b8:	f000 8086 	beq.w	8002ac8 <HAL_TIM_ConfigClockSource+0x176>
 80029bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80029c0:	d87f      	bhi.n	8002ac2 <HAL_TIM_ConfigClockSource+0x170>
 80029c2:	2b70      	cmp	r3, #112	; 0x70
 80029c4:	d01a      	beq.n	80029fc <HAL_TIM_ConfigClockSource+0xaa>
 80029c6:	2b70      	cmp	r3, #112	; 0x70
 80029c8:	d87b      	bhi.n	8002ac2 <HAL_TIM_ConfigClockSource+0x170>
 80029ca:	2b60      	cmp	r3, #96	; 0x60
 80029cc:	d050      	beq.n	8002a70 <HAL_TIM_ConfigClockSource+0x11e>
 80029ce:	2b60      	cmp	r3, #96	; 0x60
 80029d0:	d877      	bhi.n	8002ac2 <HAL_TIM_ConfigClockSource+0x170>
 80029d2:	2b50      	cmp	r3, #80	; 0x50
 80029d4:	d03c      	beq.n	8002a50 <HAL_TIM_ConfigClockSource+0xfe>
 80029d6:	2b50      	cmp	r3, #80	; 0x50
 80029d8:	d873      	bhi.n	8002ac2 <HAL_TIM_ConfigClockSource+0x170>
 80029da:	2b40      	cmp	r3, #64	; 0x40
 80029dc:	d058      	beq.n	8002a90 <HAL_TIM_ConfigClockSource+0x13e>
 80029de:	2b40      	cmp	r3, #64	; 0x40
 80029e0:	d86f      	bhi.n	8002ac2 <HAL_TIM_ConfigClockSource+0x170>
 80029e2:	2b30      	cmp	r3, #48	; 0x30
 80029e4:	d064      	beq.n	8002ab0 <HAL_TIM_ConfigClockSource+0x15e>
 80029e6:	2b30      	cmp	r3, #48	; 0x30
 80029e8:	d86b      	bhi.n	8002ac2 <HAL_TIM_ConfigClockSource+0x170>
 80029ea:	2b20      	cmp	r3, #32
 80029ec:	d060      	beq.n	8002ab0 <HAL_TIM_ConfigClockSource+0x15e>
 80029ee:	2b20      	cmp	r3, #32
 80029f0:	d867      	bhi.n	8002ac2 <HAL_TIM_ConfigClockSource+0x170>
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d05c      	beq.n	8002ab0 <HAL_TIM_ConfigClockSource+0x15e>
 80029f6:	2b10      	cmp	r3, #16
 80029f8:	d05a      	beq.n	8002ab0 <HAL_TIM_ConfigClockSource+0x15e>
 80029fa:	e062      	b.n	8002ac2 <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6818      	ldr	r0, [r3, #0]
 8002a00:	683b      	ldr	r3, [r7, #0]
 8002a02:	6899      	ldr	r1, [r3, #8]
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	f000 f9aa 	bl	8002d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	689b      	ldr	r3, [r3, #8]
 8002a16:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002a1e:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	68ba      	ldr	r2, [r7, #8]
 8002a26:	609a      	str	r2, [r3, #8]
      break;
 8002a28:	e04f      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6818      	ldr	r0, [r3, #0]
 8002a2e:	683b      	ldr	r3, [r7, #0]
 8002a30:	6899      	ldr	r1, [r3, #8]
 8002a32:	683b      	ldr	r3, [r7, #0]
 8002a34:	685a      	ldr	r2, [r3, #4]
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	68db      	ldr	r3, [r3, #12]
 8002a3a:	f000 f993 	bl	8002d64 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	689a      	ldr	r2, [r3, #8]
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002a4c:	609a      	str	r2, [r3, #8]
      break;
 8002a4e:	e03c      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6818      	ldr	r0, [r3, #0]
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	68db      	ldr	r3, [r3, #12]
 8002a5c:	461a      	mov	r2, r3
 8002a5e:	f000 f907 	bl	8002c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	2150      	movs	r1, #80	; 0x50
 8002a68:	4618      	mov	r0, r3
 8002a6a:	f000 f960 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002a6e:	e02c      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	6818      	ldr	r0, [r3, #0]
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	6859      	ldr	r1, [r3, #4]
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	68db      	ldr	r3, [r3, #12]
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	f000 f926 	bl	8002cce <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	2160      	movs	r1, #96	; 0x60
 8002a88:	4618      	mov	r0, r3
 8002a8a:	f000 f950 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002a8e:	e01c      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6818      	ldr	r0, [r3, #0]
 8002a94:	683b      	ldr	r3, [r7, #0]
 8002a96:	6859      	ldr	r1, [r3, #4]
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	68db      	ldr	r3, [r3, #12]
 8002a9c:	461a      	mov	r2, r3
 8002a9e:	f000 f8e7 	bl	8002c70 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	2140      	movs	r1, #64	; 0x40
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f000 f940 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002aae:	e00c      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	683b      	ldr	r3, [r7, #0]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	4619      	mov	r1, r3
 8002aba:	4610      	mov	r0, r2
 8002abc:	f000 f937 	bl	8002d2e <TIM_ITRx_SetConfig>
      break;
 8002ac0:	e003      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	73fb      	strb	r3, [r7, #15]
      break;
 8002ac6:	e000      	b.n	8002aca <HAL_TIM_ConfigClockSource+0x178>
      break;
 8002ac8:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	2201      	movs	r2, #1
 8002ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8002adc:	4618      	mov	r0, r3
 8002ade:	3710      	adds	r7, #16
 8002ae0:	46bd      	mov	sp, r7
 8002ae2:	bd80      	pop	{r7, pc}

08002ae4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002ae4:	b480      	push	{r7}
 8002ae6:	b083      	sub	sp, #12
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002aec:	bf00      	nop
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b083      	sub	sp, #12
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002b00:	bf00      	nop
 8002b02:	370c      	adds	r7, #12
 8002b04:	46bd      	mov	sp, r7
 8002b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b0a:	4770      	bx	lr

08002b0c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002b0c:	b480      	push	{r7}
 8002b0e:	b083      	sub	sp, #12
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr

08002b20 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002b20:	b480      	push	{r7}
 8002b22:	b083      	sub	sp, #12
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002b28:	bf00      	nop
 8002b2a:	370c      	adds	r7, #12
 8002b2c:	46bd      	mov	sp, r7
 8002b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b32:	4770      	bx	lr

08002b34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002b34:	b480      	push	{r7}
 8002b36:	b085      	sub	sp, #20
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	4a42      	ldr	r2, [pc, #264]	; (8002c50 <TIM_Base_SetConfig+0x11c>)
 8002b48:	4293      	cmp	r3, r2
 8002b4a:	d013      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b52:	d00f      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	4a3f      	ldr	r2, [pc, #252]	; (8002c54 <TIM_Base_SetConfig+0x120>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	d00b      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	4a3e      	ldr	r2, [pc, #248]	; (8002c58 <TIM_Base_SetConfig+0x124>)
 8002b60:	4293      	cmp	r3, r2
 8002b62:	d007      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a3d      	ldr	r2, [pc, #244]	; (8002c5c <TIM_Base_SetConfig+0x128>)
 8002b68:	4293      	cmp	r3, r2
 8002b6a:	d003      	beq.n	8002b74 <TIM_Base_SetConfig+0x40>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	4a3c      	ldr	r2, [pc, #240]	; (8002c60 <TIM_Base_SetConfig+0x12c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	d108      	bne.n	8002b86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002b74:	68fb      	ldr	r3, [r7, #12]
 8002b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002b7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002b7c:	683b      	ldr	r3, [r7, #0]
 8002b7e:	685b      	ldr	r3, [r3, #4]
 8002b80:	68fa      	ldr	r2, [r7, #12]
 8002b82:	4313      	orrs	r3, r2
 8002b84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	4a31      	ldr	r2, [pc, #196]	; (8002c50 <TIM_Base_SetConfig+0x11c>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d01f      	beq.n	8002bce <TIM_Base_SetConfig+0x9a>
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b94:	d01b      	beq.n	8002bce <TIM_Base_SetConfig+0x9a>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	4a2e      	ldr	r2, [pc, #184]	; (8002c54 <TIM_Base_SetConfig+0x120>)
 8002b9a:	4293      	cmp	r3, r2
 8002b9c:	d017      	beq.n	8002bce <TIM_Base_SetConfig+0x9a>
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	4a2d      	ldr	r2, [pc, #180]	; (8002c58 <TIM_Base_SetConfig+0x124>)
 8002ba2:	4293      	cmp	r3, r2
 8002ba4:	d013      	beq.n	8002bce <TIM_Base_SetConfig+0x9a>
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	4a2c      	ldr	r2, [pc, #176]	; (8002c5c <TIM_Base_SetConfig+0x128>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d00f      	beq.n	8002bce <TIM_Base_SetConfig+0x9a>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	4a2c      	ldr	r2, [pc, #176]	; (8002c64 <TIM_Base_SetConfig+0x130>)
 8002bb2:	4293      	cmp	r3, r2
 8002bb4:	d00b      	beq.n	8002bce <TIM_Base_SetConfig+0x9a>
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	4a2b      	ldr	r2, [pc, #172]	; (8002c68 <TIM_Base_SetConfig+0x134>)
 8002bba:	4293      	cmp	r3, r2
 8002bbc:	d007      	beq.n	8002bce <TIM_Base_SetConfig+0x9a>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	4a2a      	ldr	r2, [pc, #168]	; (8002c6c <TIM_Base_SetConfig+0x138>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d003      	beq.n	8002bce <TIM_Base_SetConfig+0x9a>
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	4a25      	ldr	r2, [pc, #148]	; (8002c60 <TIM_Base_SetConfig+0x12c>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d108      	bne.n	8002be0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002bd4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	68db      	ldr	r3, [r3, #12]
 8002bda:	68fa      	ldr	r2, [r7, #12]
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	695b      	ldr	r3, [r3, #20]
 8002bea:	4313      	orrs	r3, r2
 8002bec:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	68fa      	ldr	r2, [r7, #12]
 8002bf2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002bf4:	683b      	ldr	r3, [r7, #0]
 8002bf6:	689a      	ldr	r2, [r3, #8]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002bfc:	683b      	ldr	r3, [r7, #0]
 8002bfe:	681a      	ldr	r2, [r3, #0]
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	4a12      	ldr	r2, [pc, #72]	; (8002c50 <TIM_Base_SetConfig+0x11c>)
 8002c08:	4293      	cmp	r3, r2
 8002c0a:	d013      	beq.n	8002c34 <TIM_Base_SetConfig+0x100>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	4a13      	ldr	r2, [pc, #76]	; (8002c5c <TIM_Base_SetConfig+0x128>)
 8002c10:	4293      	cmp	r3, r2
 8002c12:	d00f      	beq.n	8002c34 <TIM_Base_SetConfig+0x100>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	4a13      	ldr	r2, [pc, #76]	; (8002c64 <TIM_Base_SetConfig+0x130>)
 8002c18:	4293      	cmp	r3, r2
 8002c1a:	d00b      	beq.n	8002c34 <TIM_Base_SetConfig+0x100>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	4a12      	ldr	r2, [pc, #72]	; (8002c68 <TIM_Base_SetConfig+0x134>)
 8002c20:	4293      	cmp	r3, r2
 8002c22:	d007      	beq.n	8002c34 <TIM_Base_SetConfig+0x100>
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	4a11      	ldr	r2, [pc, #68]	; (8002c6c <TIM_Base_SetConfig+0x138>)
 8002c28:	4293      	cmp	r3, r2
 8002c2a:	d003      	beq.n	8002c34 <TIM_Base_SetConfig+0x100>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	4a0c      	ldr	r2, [pc, #48]	; (8002c60 <TIM_Base_SetConfig+0x12c>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d103      	bne.n	8002c3c <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002c34:	683b      	ldr	r3, [r7, #0]
 8002c36:	691a      	ldr	r2, [r3, #16]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2201      	movs	r2, #1
 8002c40:	615a      	str	r2, [r3, #20]
}
 8002c42:	bf00      	nop
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	40012c00 	.word	0x40012c00
 8002c54:	40000400 	.word	0x40000400
 8002c58:	40000800 	.word	0x40000800
 8002c5c:	40013400 	.word	0x40013400
 8002c60:	40015000 	.word	0x40015000
 8002c64:	40014000 	.word	0x40014000
 8002c68:	40014400 	.word	0x40014400
 8002c6c:	40014800 	.word	0x40014800

08002c70 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b087      	sub	sp, #28
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	60f8      	str	r0, [r7, #12]
 8002c78:	60b9      	str	r1, [r7, #8]
 8002c7a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002c7c:	68fb      	ldr	r3, [r7, #12]
 8002c7e:	6a1b      	ldr	r3, [r3, #32]
 8002c80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002c82:	68fb      	ldr	r3, [r7, #12]
 8002c84:	6a1b      	ldr	r3, [r3, #32]
 8002c86:	f023 0201 	bic.w	r2, r3, #1
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002c8e:	68fb      	ldr	r3, [r7, #12]
 8002c90:	699b      	ldr	r3, [r3, #24]
 8002c92:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002c94:	693b      	ldr	r3, [r7, #16]
 8002c96:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	011b      	lsls	r3, r3, #4
 8002ca0:	693a      	ldr	r2, [r7, #16]
 8002ca2:	4313      	orrs	r3, r2
 8002ca4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002ca6:	697b      	ldr	r3, [r7, #20]
 8002ca8:	f023 030a 	bic.w	r3, r3, #10
 8002cac:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002cae:	697a      	ldr	r2, [r7, #20]
 8002cb0:	68bb      	ldr	r3, [r7, #8]
 8002cb2:	4313      	orrs	r3, r2
 8002cb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	693a      	ldr	r2, [r7, #16]
 8002cba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	697a      	ldr	r2, [r7, #20]
 8002cc0:	621a      	str	r2, [r3, #32]
}
 8002cc2:	bf00      	nop
 8002cc4:	371c      	adds	r7, #28
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr

08002cce <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002cce:	b480      	push	{r7}
 8002cd0:	b087      	sub	sp, #28
 8002cd2:	af00      	add	r7, sp, #0
 8002cd4:	60f8      	str	r0, [r7, #12]
 8002cd6:	60b9      	str	r1, [r7, #8]
 8002cd8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	6a1b      	ldr	r3, [r3, #32]
 8002cde:	f023 0210 	bic.w	r2, r3, #16
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ce6:	68fb      	ldr	r3, [r7, #12]
 8002ce8:	699b      	ldr	r3, [r3, #24]
 8002cea:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002cec:	68fb      	ldr	r3, [r7, #12]
 8002cee:	6a1b      	ldr	r3, [r3, #32]
 8002cf0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002cf2:	697b      	ldr	r3, [r7, #20]
 8002cf4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002cf8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	031b      	lsls	r3, r3, #12
 8002cfe:	697a      	ldr	r2, [r7, #20]
 8002d00:	4313      	orrs	r3, r2
 8002d02:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002d04:	693b      	ldr	r3, [r7, #16]
 8002d06:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002d0a:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002d0c:	68bb      	ldr	r3, [r7, #8]
 8002d0e:	011b      	lsls	r3, r3, #4
 8002d10:	693a      	ldr	r2, [r7, #16]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	697a      	ldr	r2, [r7, #20]
 8002d1a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	693a      	ldr	r2, [r7, #16]
 8002d20:	621a      	str	r2, [r3, #32]
}
 8002d22:	bf00      	nop
 8002d24:	371c      	adds	r7, #28
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b085      	sub	sp, #20
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]
 8002d36:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d44:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002d46:	683a      	ldr	r2, [r7, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	4313      	orrs	r3, r2
 8002d4c:	f043 0307 	orr.w	r3, r3, #7
 8002d50:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	68fa      	ldr	r2, [r7, #12]
 8002d56:	609a      	str	r2, [r3, #8]
}
 8002d58:	bf00      	nop
 8002d5a:	3714      	adds	r7, #20
 8002d5c:	46bd      	mov	sp, r7
 8002d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d62:	4770      	bx	lr

08002d64 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002d64:	b480      	push	{r7}
 8002d66:	b087      	sub	sp, #28
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
 8002d70:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	689b      	ldr	r3, [r3, #8]
 8002d76:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002d7e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	021a      	lsls	r2, r3, #8
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	431a      	orrs	r2, r3
 8002d88:	68bb      	ldr	r3, [r7, #8]
 8002d8a:	4313      	orrs	r3, r2
 8002d8c:	697a      	ldr	r2, [r7, #20]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	697a      	ldr	r2, [r7, #20]
 8002d96:	609a      	str	r2, [r3, #8]
}
 8002d98:	bf00      	nop
 8002d9a:	371c      	adds	r7, #28
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e06d      	b.n	8002e98 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2202      	movs	r2, #2
 8002dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	685b      	ldr	r3, [r3, #4]
 8002dd2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	4a30      	ldr	r2, [pc, #192]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d009      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	4a2f      	ldr	r2, [pc, #188]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002dec:	4293      	cmp	r3, r2
 8002dee:	d004      	beq.n	8002dfa <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4a2d      	ldr	r2, [pc, #180]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002df6:	4293      	cmp	r3, r2
 8002df8:	d108      	bne.n	8002e0c <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8002e00:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	68fa      	ldr	r2, [r7, #12]
 8002e08:	4313      	orrs	r3, r2
 8002e0a:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	68fa      	ldr	r2, [r7, #12]
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	68fa      	ldr	r2, [r7, #12]
 8002e24:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	4a1e      	ldr	r2, [pc, #120]	; (8002ea4 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8002e2c:	4293      	cmp	r3, r2
 8002e2e:	d01d      	beq.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002e38:	d018      	beq.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	4a1c      	ldr	r2, [pc, #112]	; (8002eb0 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8002e40:	4293      	cmp	r3, r2
 8002e42:	d013      	beq.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	4a1a      	ldr	r2, [pc, #104]	; (8002eb4 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8002e4a:	4293      	cmp	r3, r2
 8002e4c:	d00e      	beq.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	4a15      	ldr	r2, [pc, #84]	; (8002ea8 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8002e54:	4293      	cmp	r3, r2
 8002e56:	d009      	beq.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	4a16      	ldr	r2, [pc, #88]	; (8002eb8 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8002e5e:	4293      	cmp	r3, r2
 8002e60:	d004      	beq.n	8002e6c <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4a11      	ldr	r2, [pc, #68]	; (8002eac <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d10c      	bne.n	8002e86 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002e6c:	68bb      	ldr	r3, [r7, #8]
 8002e6e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002e72:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	68ba      	ldr	r2, [r7, #8]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	68ba      	ldr	r2, [r7, #8]
 8002e84:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	2201      	movs	r2, #1
 8002e8a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	2200      	movs	r2, #0
 8002e92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	3714      	adds	r7, #20
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea2:	4770      	bx	lr
 8002ea4:	40012c00 	.word	0x40012c00
 8002ea8:	40013400 	.word	0x40013400
 8002eac:	40015000 	.word	0x40015000
 8002eb0:	40000400 	.word	0x40000400
 8002eb4:	40000800 	.word	0x40000800
 8002eb8:	40014000 	.word	0x40014000

08002ebc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	b083      	sub	sp, #12
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002ec4:	bf00      	nop
 8002ec6:	370c      	adds	r7, #12
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	b083      	sub	sp, #12
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ed8:	bf00      	nop
 8002eda:	370c      	adds	r7, #12
 8002edc:	46bd      	mov	sp, r7
 8002ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee2:	4770      	bx	lr

08002ee4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b083      	sub	sp, #12
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8002eec:	bf00      	nop
 8002eee:	370c      	adds	r7, #12
 8002ef0:	46bd      	mov	sp, r7
 8002ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef6:	4770      	bx	lr

08002ef8 <__libc_init_array>:
 8002ef8:	b570      	push	{r4, r5, r6, lr}
 8002efa:	4d0d      	ldr	r5, [pc, #52]	; (8002f30 <__libc_init_array+0x38>)
 8002efc:	4c0d      	ldr	r4, [pc, #52]	; (8002f34 <__libc_init_array+0x3c>)
 8002efe:	1b64      	subs	r4, r4, r5
 8002f00:	10a4      	asrs	r4, r4, #2
 8002f02:	2600      	movs	r6, #0
 8002f04:	42a6      	cmp	r6, r4
 8002f06:	d109      	bne.n	8002f1c <__libc_init_array+0x24>
 8002f08:	4d0b      	ldr	r5, [pc, #44]	; (8002f38 <__libc_init_array+0x40>)
 8002f0a:	4c0c      	ldr	r4, [pc, #48]	; (8002f3c <__libc_init_array+0x44>)
 8002f0c:	f000 f820 	bl	8002f50 <_init>
 8002f10:	1b64      	subs	r4, r4, r5
 8002f12:	10a4      	asrs	r4, r4, #2
 8002f14:	2600      	movs	r6, #0
 8002f16:	42a6      	cmp	r6, r4
 8002f18:	d105      	bne.n	8002f26 <__libc_init_array+0x2e>
 8002f1a:	bd70      	pop	{r4, r5, r6, pc}
 8002f1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f20:	4798      	blx	r3
 8002f22:	3601      	adds	r6, #1
 8002f24:	e7ee      	b.n	8002f04 <__libc_init_array+0xc>
 8002f26:	f855 3b04 	ldr.w	r3, [r5], #4
 8002f2a:	4798      	blx	r3
 8002f2c:	3601      	adds	r6, #1
 8002f2e:	e7f2      	b.n	8002f16 <__libc_init_array+0x1e>
 8002f30:	08002f98 	.word	0x08002f98
 8002f34:	08002f98 	.word	0x08002f98
 8002f38:	08002f98 	.word	0x08002f98
 8002f3c:	08002f9c 	.word	0x08002f9c

08002f40 <memset>:
 8002f40:	4402      	add	r2, r0
 8002f42:	4603      	mov	r3, r0
 8002f44:	4293      	cmp	r3, r2
 8002f46:	d100      	bne.n	8002f4a <memset+0xa>
 8002f48:	4770      	bx	lr
 8002f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8002f4e:	e7f9      	b.n	8002f44 <memset+0x4>

08002f50 <_init>:
 8002f50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f52:	bf00      	nop
 8002f54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f56:	bc08      	pop	{r3}
 8002f58:	469e      	mov	lr, r3
 8002f5a:	4770      	bx	lr

08002f5c <_fini>:
 8002f5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f5e:	bf00      	nop
 8002f60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f62:	bc08      	pop	{r3}
 8002f64:	469e      	mov	lr, r3
 8002f66:	4770      	bx	lr
