
pwm_timer_b2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000042f8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000038  0800448c  0800448c  0001448c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080044c4  080044c4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080044c4  080044c4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080044c4  080044c4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080044c4  080044c4  000144c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080044c8  080044c8  000144c8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080044cc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          000000f8  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000104  20000104  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000e733  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ac2  00000000  00000000  0002e76f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000be0  00000000  00000000  00030238  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000b48  00000000  00000000  00030e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fc4e  00000000  00000000  00031960  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000ecb6  00000000  00000000  000515ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c60fd  00000000  00000000  00060264  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00126361  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000320c  00000000  00000000  001263b4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000000c 	.word	0x2000000c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004474 	.word	0x08004474

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000010 	.word	0x20000010
 80001d0:	08004474 	.word	0x08004474

080001d4 <HAL_TIM_PeriodElapsedCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
	Count++;
 80001dc:	4b14      	ldr	r3, [pc, #80]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80001de:	781b      	ldrb	r3, [r3, #0]
 80001e0:	3301      	adds	r3, #1
 80001e2:	b2da      	uxtb	r2, r3
 80001e4:	4b12      	ldr	r3, [pc, #72]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80001e6:	701a      	strb	r2, [r3, #0]
	if(htim->Instance == TIM2)
 80001e8:	687b      	ldr	r3, [r7, #4]
 80001ea:	681b      	ldr	r3, [r3, #0]
 80001ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80001f0:	d118      	bne.n	8000224 <HAL_TIM_PeriodElapsedCallback+0x50>
	{
		if (Count == 5)
 80001f2:	4b0f      	ldr	r3, [pc, #60]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 80001f4:	781b      	ldrb	r3, [r3, #0]
 80001f6:	2b05      	cmp	r3, #5
 80001f8:	d114      	bne.n	8000224 <HAL_TIM_PeriodElapsedCallback+0x50>
		{
				duty++;
 80001fa:	4b0e      	ldr	r3, [pc, #56]	; (8000234 <HAL_TIM_PeriodElapsedCallback+0x60>)
 80001fc:	781b      	ldrb	r3, [r3, #0]
 80001fe:	3301      	adds	r3, #1
 8000200:	b2da      	uxtb	r2, r3
 8000202:	4b0c      	ldr	r3, [pc, #48]	; (8000234 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000204:	701a      	strb	r2, [r3, #0]
			 __HAL_TIM_SET_COMPARE(&htim2,TIM_CHANNEL_1,duty);
 8000206:	4b0b      	ldr	r3, [pc, #44]	; (8000234 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000208:	781a      	ldrb	r2, [r3, #0]
 800020a:	4b0b      	ldr	r3, [pc, #44]	; (8000238 <HAL_TIM_PeriodElapsedCallback+0x64>)
 800020c:	681b      	ldr	r3, [r3, #0]
 800020e:	635a      	str	r2, [r3, #52]	; 0x34
			 Count=0;
 8000210:	4b07      	ldr	r3, [pc, #28]	; (8000230 <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8000212:	2200      	movs	r2, #0
 8000214:	701a      	strb	r2, [r3, #0]
			 if (duty == 100) {
 8000216:	4b07      	ldr	r3, [pc, #28]	; (8000234 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000218:	781b      	ldrb	r3, [r3, #0]
 800021a:	2b64      	cmp	r3, #100	; 0x64
 800021c:	d102      	bne.n	8000224 <HAL_TIM_PeriodElapsedCallback+0x50>
				duty = 0;
 800021e:	4b05      	ldr	r3, [pc, #20]	; (8000234 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8000220:	2200      	movs	r2, #0
 8000222:	701a      	strb	r2, [r3, #0]
		}

	}


}
 8000224:	bf00      	nop
 8000226:	370c      	adds	r7, #12
 8000228:	46bd      	mov	sp, r7
 800022a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800022e:	4770      	bx	lr
 8000230:	200000fd 	.word	0x200000fd
 8000234:	200000fc 	.word	0x200000fc
 8000238:	20000028 	.word	0x20000028

0800023c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800023c:	b580      	push	{r7, lr}
 800023e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000240:	f000 faa0 	bl	8000784 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000244:	f000 f810 	bl	8000268 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000248:	f000 f916 	bl	8000478 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800024c:	f000 f8e4 	bl	8000418 <MX_USART2_UART_Init>
  MX_TIM2_Init();
 8000250:	f000 f86c 	bl	800032c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim2);
 8000254:	4803      	ldr	r0, [pc, #12]	; (8000264 <main+0x28>)
 8000256:	f002 fa97 	bl	8002788 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 800025a:	2100      	movs	r1, #0
 800025c:	4801      	ldr	r0, [pc, #4]	; (8000264 <main+0x28>)
 800025e:	f002 fb65 	bl	800292c <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000262:	e7fe      	b.n	8000262 <main+0x26>
 8000264:	20000028 	.word	0x20000028

08000268 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000268:	b580      	push	{r7, lr}
 800026a:	b0a6      	sub	sp, #152	; 0x98
 800026c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800026e:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8000272:	2228      	movs	r2, #40	; 0x28
 8000274:	2100      	movs	r1, #0
 8000276:	4618      	mov	r0, r3
 8000278:	f004 f8f4 	bl	8004464 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800027c:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]
 8000284:	605a      	str	r2, [r3, #4]
 8000286:	609a      	str	r2, [r3, #8]
 8000288:	60da      	str	r2, [r3, #12]
 800028a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800028c:	1d3b      	adds	r3, r7, #4
 800028e:	2258      	movs	r2, #88	; 0x58
 8000290:	2100      	movs	r1, #0
 8000292:	4618      	mov	r0, r3
 8000294:	f004 f8e6 	bl	8004464 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000298:	2302      	movs	r3, #2
 800029a:	673b      	str	r3, [r7, #112]	; 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800029c:	2301      	movs	r3, #1
 800029e:	67fb      	str	r3, [r7, #124]	; 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002a0:	2310      	movs	r3, #16
 80002a2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002a6:	2302      	movs	r3, #2
 80002a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002ac:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80002b0:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL2;
 80002b4:	2300      	movs	r3, #0
 80002b6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 80002ba:	2300      	movs	r3, #0
 80002bc:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80002c0:	f107 0370 	add.w	r3, r7, #112	; 0x70
 80002c4:	4618      	mov	r0, r3
 80002c6:	f000 fd5f 	bl	8000d88 <HAL_RCC_OscConfig>
 80002ca:	4603      	mov	r3, r0
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d001      	beq.n	80002d4 <SystemClock_Config+0x6c>
  {
    Error_Handler();
 80002d0:	f000 f924 	bl	800051c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80002d4:	230f      	movs	r3, #15
 80002d6:	65fb      	str	r3, [r7, #92]	; 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80002d8:	2302      	movs	r3, #2
 80002da:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 80002dc:	2380      	movs	r3, #128	; 0x80
 80002de:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80002e0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80002e4:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80002e6:	2300      	movs	r3, #0
 80002e8:	66fb      	str	r3, [r7, #108]	; 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80002ea:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 80002ee:	2100      	movs	r1, #0
 80002f0:	4618      	mov	r0, r3
 80002f2:	f001 fd9d 	bl	8001e30 <HAL_RCC_ClockConfig>
 80002f6:	4603      	mov	r3, r0
 80002f8:	2b00      	cmp	r3, #0
 80002fa:	d001      	beq.n	8000300 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80002fc:	f000 f90e 	bl	800051c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_TIM2;
 8000300:	4b09      	ldr	r3, [pc, #36]	; (8000328 <SystemClock_Config+0xc0>)
 8000302:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000304:	2300      	movs	r3, #0
 8000306:	613b      	str	r3, [r7, #16]
  PeriphClkInit.Tim2ClockSelection = RCC_TIM2CLK_HCLK;
 8000308:	2300      	movs	r3, #0
 800030a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800030c:	1d3b      	adds	r3, r7, #4
 800030e:	4618      	mov	r0, r3
 8000310:	f001 ffc4 	bl	800229c <HAL_RCCEx_PeriphCLKConfig>
 8000314:	4603      	mov	r3, r0
 8000316:	2b00      	cmp	r3, #0
 8000318:	d001      	beq.n	800031e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 800031a:	f000 f8ff 	bl	800051c <Error_Handler>
  }
}
 800031e:	bf00      	nop
 8000320:	3798      	adds	r7, #152	; 0x98
 8000322:	46bd      	mov	sp, r7
 8000324:	bd80      	pop	{r7, pc}
 8000326:	bf00      	nop
 8000328:	00100002 	.word	0x00100002

0800032c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800032c:	b580      	push	{r7, lr}
 800032e:	b08e      	sub	sp, #56	; 0x38
 8000330:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000332:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000336:	2200      	movs	r2, #0
 8000338:	601a      	str	r2, [r3, #0]
 800033a:	605a      	str	r2, [r3, #4]
 800033c:	609a      	str	r2, [r3, #8]
 800033e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000340:	f107 031c 	add.w	r3, r7, #28
 8000344:	2200      	movs	r2, #0
 8000346:	601a      	str	r2, [r3, #0]
 8000348:	605a      	str	r2, [r3, #4]
 800034a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800034c:	463b      	mov	r3, r7
 800034e:	2200      	movs	r2, #0
 8000350:	601a      	str	r2, [r3, #0]
 8000352:	605a      	str	r2, [r3, #4]
 8000354:	609a      	str	r2, [r3, #8]
 8000356:	60da      	str	r2, [r3, #12]
 8000358:	611a      	str	r2, [r3, #16]
 800035a:	615a      	str	r2, [r3, #20]
 800035c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800035e:	4b2d      	ldr	r3, [pc, #180]	; (8000414 <MX_TIM2_Init+0xe8>)
 8000360:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000364:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 8000-1;
 8000366:	4b2b      	ldr	r3, [pc, #172]	; (8000414 <MX_TIM2_Init+0xe8>)
 8000368:	f641 723f 	movw	r2, #7999	; 0x1f3f
 800036c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800036e:	4b29      	ldr	r3, [pc, #164]	; (8000414 <MX_TIM2_Init+0xe8>)
 8000370:	2200      	movs	r2, #0
 8000372:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 100-1;
 8000374:	4b27      	ldr	r3, [pc, #156]	; (8000414 <MX_TIM2_Init+0xe8>)
 8000376:	2263      	movs	r2, #99	; 0x63
 8000378:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800037a:	4b26      	ldr	r3, [pc, #152]	; (8000414 <MX_TIM2_Init+0xe8>)
 800037c:	2200      	movs	r2, #0
 800037e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000380:	4b24      	ldr	r3, [pc, #144]	; (8000414 <MX_TIM2_Init+0xe8>)
 8000382:	2200      	movs	r2, #0
 8000384:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000386:	4823      	ldr	r0, [pc, #140]	; (8000414 <MX_TIM2_Init+0xe8>)
 8000388:	f002 f9a6 	bl	80026d8 <HAL_TIM_Base_Init>
 800038c:	4603      	mov	r3, r0
 800038e:	2b00      	cmp	r3, #0
 8000390:	d001      	beq.n	8000396 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000392:	f000 f8c3 	bl	800051c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000396:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800039a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800039c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80003a0:	4619      	mov	r1, r3
 80003a2:	481c      	ldr	r0, [pc, #112]	; (8000414 <MX_TIM2_Init+0xe8>)
 80003a4:	f002 fe02 	bl	8002fac <HAL_TIM_ConfigClockSource>
 80003a8:	4603      	mov	r3, r0
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d001      	beq.n	80003b2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 80003ae:	f000 f8b5 	bl	800051c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80003b2:	4818      	ldr	r0, [pc, #96]	; (8000414 <MX_TIM2_Init+0xe8>)
 80003b4:	f002 fa58 	bl	8002868 <HAL_TIM_PWM_Init>
 80003b8:	4603      	mov	r3, r0
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d001      	beq.n	80003c2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80003be:	f000 f8ad 	bl	800051c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80003c2:	2300      	movs	r3, #0
 80003c4:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80003c6:	2300      	movs	r3, #0
 80003c8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80003ca:	f107 031c 	add.w	r3, r7, #28
 80003ce:	4619      	mov	r1, r3
 80003d0:	4810      	ldr	r0, [pc, #64]	; (8000414 <MX_TIM2_Init+0xe8>)
 80003d2:	f003 fb41 	bl	8003a58 <HAL_TIMEx_MasterConfigSynchronization>
 80003d6:	4603      	mov	r3, r0
 80003d8:	2b00      	cmp	r3, #0
 80003da:	d001      	beq.n	80003e0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80003dc:	f000 f89e 	bl	800051c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80003e0:	2360      	movs	r3, #96	; 0x60
 80003e2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80003e4:	2300      	movs	r3, #0
 80003e6:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80003e8:	2300      	movs	r3, #0
 80003ea:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80003ec:	2300      	movs	r3, #0
 80003ee:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80003f0:	463b      	mov	r3, r7
 80003f2:	2200      	movs	r2, #0
 80003f4:	4619      	mov	r1, r3
 80003f6:	4807      	ldr	r0, [pc, #28]	; (8000414 <MX_TIM2_Init+0xe8>)
 80003f8:	f002 fcc4 	bl	8002d84 <HAL_TIM_PWM_ConfigChannel>
 80003fc:	4603      	mov	r3, r0
 80003fe:	2b00      	cmp	r3, #0
 8000400:	d001      	beq.n	8000406 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000402:	f000 f88b 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000406:	4803      	ldr	r0, [pc, #12]	; (8000414 <MX_TIM2_Init+0xe8>)
 8000408:	f000 f8d6 	bl	80005b8 <HAL_TIM_MspPostInit>

}
 800040c:	bf00      	nop
 800040e:	3738      	adds	r7, #56	; 0x38
 8000410:	46bd      	mov	sp, r7
 8000412:	bd80      	pop	{r7, pc}
 8000414:	20000028 	.word	0x20000028

08000418 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000418:	b580      	push	{r7, lr}
 800041a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800041c:	4b14      	ldr	r3, [pc, #80]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800041e:	4a15      	ldr	r2, [pc, #84]	; (8000474 <MX_USART2_UART_Init+0x5c>)
 8000420:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 38400;
 8000422:	4b13      	ldr	r3, [pc, #76]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000424:	f44f 4216 	mov.w	r2, #38400	; 0x9600
 8000428:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800042a:	4b11      	ldr	r3, [pc, #68]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800042c:	2200      	movs	r2, #0
 800042e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000430:	4b0f      	ldr	r3, [pc, #60]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000432:	2200      	movs	r2, #0
 8000434:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000436:	4b0e      	ldr	r3, [pc, #56]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000438:	2200      	movs	r2, #0
 800043a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800043c:	4b0c      	ldr	r3, [pc, #48]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800043e:	220c      	movs	r2, #12
 8000440:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000442:	4b0b      	ldr	r3, [pc, #44]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000444:	2200      	movs	r2, #0
 8000446:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000448:	4b09      	ldr	r3, [pc, #36]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800044a:	2200      	movs	r2, #0
 800044c:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800044e:	4b08      	ldr	r3, [pc, #32]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000450:	2200      	movs	r2, #0
 8000452:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000454:	4b06      	ldr	r3, [pc, #24]	; (8000470 <MX_USART2_UART_Init+0x58>)
 8000456:	2200      	movs	r2, #0
 8000458:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800045a:	4805      	ldr	r0, [pc, #20]	; (8000470 <MX_USART2_UART_Init+0x58>)
 800045c:	f003 fba6 	bl	8003bac <HAL_UART_Init>
 8000460:	4603      	mov	r3, r0
 8000462:	2b00      	cmp	r3, #0
 8000464:	d001      	beq.n	800046a <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000466:	f000 f859 	bl	800051c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800046a:	bf00      	nop
 800046c:	bd80      	pop	{r7, pc}
 800046e:	bf00      	nop
 8000470:	20000074 	.word	0x20000074
 8000474:	40004400 	.word	0x40004400

08000478 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000478:	b580      	push	{r7, lr}
 800047a:	b08a      	sub	sp, #40	; 0x28
 800047c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800047e:	f107 0314 	add.w	r3, r7, #20
 8000482:	2200      	movs	r2, #0
 8000484:	601a      	str	r2, [r3, #0]
 8000486:	605a      	str	r2, [r3, #4]
 8000488:	609a      	str	r2, [r3, #8]
 800048a:	60da      	str	r2, [r3, #12]
 800048c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800048e:	4b21      	ldr	r3, [pc, #132]	; (8000514 <MX_GPIO_Init+0x9c>)
 8000490:	695b      	ldr	r3, [r3, #20]
 8000492:	4a20      	ldr	r2, [pc, #128]	; (8000514 <MX_GPIO_Init+0x9c>)
 8000494:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8000498:	6153      	str	r3, [r2, #20]
 800049a:	4b1e      	ldr	r3, [pc, #120]	; (8000514 <MX_GPIO_Init+0x9c>)
 800049c:	695b      	ldr	r3, [r3, #20]
 800049e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80004a2:	613b      	str	r3, [r7, #16]
 80004a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80004a6:	4b1b      	ldr	r3, [pc, #108]	; (8000514 <MX_GPIO_Init+0x9c>)
 80004a8:	695b      	ldr	r3, [r3, #20]
 80004aa:	4a1a      	ldr	r2, [pc, #104]	; (8000514 <MX_GPIO_Init+0x9c>)
 80004ac:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80004b0:	6153      	str	r3, [r2, #20]
 80004b2:	4b18      	ldr	r3, [pc, #96]	; (8000514 <MX_GPIO_Init+0x9c>)
 80004b4:	695b      	ldr	r3, [r3, #20]
 80004b6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80004ba:	60fb      	str	r3, [r7, #12]
 80004bc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80004be:	4b15      	ldr	r3, [pc, #84]	; (8000514 <MX_GPIO_Init+0x9c>)
 80004c0:	695b      	ldr	r3, [r3, #20]
 80004c2:	4a14      	ldr	r2, [pc, #80]	; (8000514 <MX_GPIO_Init+0x9c>)
 80004c4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80004c8:	6153      	str	r3, [r2, #20]
 80004ca:	4b12      	ldr	r3, [pc, #72]	; (8000514 <MX_GPIO_Init+0x9c>)
 80004cc:	695b      	ldr	r3, [r3, #20]
 80004ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80004d2:	60bb      	str	r3, [r7, #8]
 80004d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80004d6:	4b0f      	ldr	r3, [pc, #60]	; (8000514 <MX_GPIO_Init+0x9c>)
 80004d8:	695b      	ldr	r3, [r3, #20]
 80004da:	4a0e      	ldr	r2, [pc, #56]	; (8000514 <MX_GPIO_Init+0x9c>)
 80004dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80004e0:	6153      	str	r3, [r2, #20]
 80004e2:	4b0c      	ldr	r3, [pc, #48]	; (8000514 <MX_GPIO_Init+0x9c>)
 80004e4:	695b      	ldr	r3, [r3, #20]
 80004e6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80004ea:	607b      	str	r3, [r7, #4]
 80004ec:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80004ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80004f2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80004f4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80004f8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004fa:	2300      	movs	r3, #0
 80004fc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80004fe:	f107 0314 	add.w	r3, r7, #20
 8000502:	4619      	mov	r1, r3
 8000504:	4804      	ldr	r0, [pc, #16]	; (8000518 <MX_GPIO_Init+0xa0>)
 8000506:	f000 fab5 	bl	8000a74 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800050a:	bf00      	nop
 800050c:	3728      	adds	r7, #40	; 0x28
 800050e:	46bd      	mov	sp, r7
 8000510:	bd80      	pop	{r7, pc}
 8000512:	bf00      	nop
 8000514:	40021000 	.word	0x40021000
 8000518:	48000800 	.word	0x48000800

0800051c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800051c:	b480      	push	{r7}
 800051e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000520:	b672      	cpsid	i
}
 8000522:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000524:	e7fe      	b.n	8000524 <Error_Handler+0x8>
	...

08000528 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000528:	b580      	push	{r7, lr}
 800052a:	b082      	sub	sp, #8
 800052c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800052e:	4b0f      	ldr	r3, [pc, #60]	; (800056c <HAL_MspInit+0x44>)
 8000530:	699b      	ldr	r3, [r3, #24]
 8000532:	4a0e      	ldr	r2, [pc, #56]	; (800056c <HAL_MspInit+0x44>)
 8000534:	f043 0301 	orr.w	r3, r3, #1
 8000538:	6193      	str	r3, [r2, #24]
 800053a:	4b0c      	ldr	r3, [pc, #48]	; (800056c <HAL_MspInit+0x44>)
 800053c:	699b      	ldr	r3, [r3, #24]
 800053e:	f003 0301 	and.w	r3, r3, #1
 8000542:	607b      	str	r3, [r7, #4]
 8000544:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000546:	4b09      	ldr	r3, [pc, #36]	; (800056c <HAL_MspInit+0x44>)
 8000548:	69db      	ldr	r3, [r3, #28]
 800054a:	4a08      	ldr	r2, [pc, #32]	; (800056c <HAL_MspInit+0x44>)
 800054c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000550:	61d3      	str	r3, [r2, #28]
 8000552:	4b06      	ldr	r3, [pc, #24]	; (800056c <HAL_MspInit+0x44>)
 8000554:	69db      	ldr	r3, [r3, #28]
 8000556:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800055a:	603b      	str	r3, [r7, #0]
 800055c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800055e:	2007      	movs	r0, #7
 8000560:	f000 fa46 	bl	80009f0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000564:	bf00      	nop
 8000566:	3708      	adds	r7, #8
 8000568:	46bd      	mov	sp, r7
 800056a:	bd80      	pop	{r7, pc}
 800056c:	40021000 	.word	0x40021000

08000570 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000570:	b580      	push	{r7, lr}
 8000572:	b084      	sub	sp, #16
 8000574:	af00      	add	r7, sp, #0
 8000576:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000578:	687b      	ldr	r3, [r7, #4]
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000580:	d113      	bne.n	80005aa <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000582:	4b0c      	ldr	r3, [pc, #48]	; (80005b4 <HAL_TIM_Base_MspInit+0x44>)
 8000584:	69db      	ldr	r3, [r3, #28]
 8000586:	4a0b      	ldr	r2, [pc, #44]	; (80005b4 <HAL_TIM_Base_MspInit+0x44>)
 8000588:	f043 0301 	orr.w	r3, r3, #1
 800058c:	61d3      	str	r3, [r2, #28]
 800058e:	4b09      	ldr	r3, [pc, #36]	; (80005b4 <HAL_TIM_Base_MspInit+0x44>)
 8000590:	69db      	ldr	r3, [r3, #28]
 8000592:	f003 0301 	and.w	r3, r3, #1
 8000596:	60fb      	str	r3, [r7, #12]
 8000598:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800059a:	2200      	movs	r2, #0
 800059c:	2100      	movs	r1, #0
 800059e:	201c      	movs	r0, #28
 80005a0:	f000 fa31 	bl	8000a06 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80005a4:	201c      	movs	r0, #28
 80005a6:	f000 fa4a 	bl	8000a3e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80005aa:	bf00      	nop
 80005ac:	3710      	adds	r7, #16
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bd80      	pop	{r7, pc}
 80005b2:	bf00      	nop
 80005b4:	40021000 	.word	0x40021000

080005b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b088      	sub	sp, #32
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c0:	f107 030c 	add.w	r3, r7, #12
 80005c4:	2200      	movs	r2, #0
 80005c6:	601a      	str	r2, [r3, #0]
 80005c8:	605a      	str	r2, [r3, #4]
 80005ca:	609a      	str	r2, [r3, #8]
 80005cc:	60da      	str	r2, [r3, #12]
 80005ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80005d8:	d11c      	bne.n	8000614 <HAL_TIM_MspPostInit+0x5c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80005da:	4b10      	ldr	r3, [pc, #64]	; (800061c <HAL_TIM_MspPostInit+0x64>)
 80005dc:	695b      	ldr	r3, [r3, #20]
 80005de:	4a0f      	ldr	r2, [pc, #60]	; (800061c <HAL_TIM_MspPostInit+0x64>)
 80005e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005e4:	6153      	str	r3, [r2, #20]
 80005e6:	4b0d      	ldr	r3, [pc, #52]	; (800061c <HAL_TIM_MspPostInit+0x64>)
 80005e8:	695b      	ldr	r3, [r3, #20]
 80005ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80005ee:	60bb      	str	r3, [r7, #8]
 80005f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80005f2:	2320      	movs	r3, #32
 80005f4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80005f6:	2302      	movs	r3, #2
 80005f8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80005fa:	2300      	movs	r3, #0
 80005fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80005fe:	2300      	movs	r3, #0
 8000600:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000602:	2301      	movs	r3, #1
 8000604:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000606:	f107 030c 	add.w	r3, r7, #12
 800060a:	4619      	mov	r1, r3
 800060c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000610:	f000 fa30 	bl	8000a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000614:	bf00      	nop
 8000616:	3720      	adds	r7, #32
 8000618:	46bd      	mov	sp, r7
 800061a:	bd80      	pop	{r7, pc}
 800061c:	40021000 	.word	0x40021000

08000620 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b08a      	sub	sp, #40	; 0x28
 8000624:	af00      	add	r7, sp, #0
 8000626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000628:	f107 0314 	add.w	r3, r7, #20
 800062c:	2200      	movs	r2, #0
 800062e:	601a      	str	r2, [r3, #0]
 8000630:	605a      	str	r2, [r3, #4]
 8000632:	609a      	str	r2, [r3, #8]
 8000634:	60da      	str	r2, [r3, #12]
 8000636:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000638:	687b      	ldr	r3, [r7, #4]
 800063a:	681b      	ldr	r3, [r3, #0]
 800063c:	4a17      	ldr	r2, [pc, #92]	; (800069c <HAL_UART_MspInit+0x7c>)
 800063e:	4293      	cmp	r3, r2
 8000640:	d128      	bne.n	8000694 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000642:	4b17      	ldr	r3, [pc, #92]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000644:	69db      	ldr	r3, [r3, #28]
 8000646:	4a16      	ldr	r2, [pc, #88]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000648:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800064c:	61d3      	str	r3, [r2, #28]
 800064e:	4b14      	ldr	r3, [pc, #80]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000650:	69db      	ldr	r3, [r3, #28]
 8000652:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000656:	613b      	str	r3, [r7, #16]
 8000658:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <HAL_UART_MspInit+0x80>)
 800065c:	695b      	ldr	r3, [r3, #20]
 800065e:	4a10      	ldr	r2, [pc, #64]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000660:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000664:	6153      	str	r3, [r2, #20]
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <HAL_UART_MspInit+0x80>)
 8000668:	695b      	ldr	r3, [r3, #20]
 800066a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800066e:	60fb      	str	r3, [r7, #12]
 8000670:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8000672:	230c      	movs	r3, #12
 8000674:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000676:	2302      	movs	r3, #2
 8000678:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000682:	2307      	movs	r3, #7
 8000684:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000686:	f107 0314 	add.w	r3, r7, #20
 800068a:	4619      	mov	r1, r3
 800068c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000690:	f000 f9f0 	bl	8000a74 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000694:	bf00      	nop
 8000696:	3728      	adds	r7, #40	; 0x28
 8000698:	46bd      	mov	sp, r7
 800069a:	bd80      	pop	{r7, pc}
 800069c:	40004400 	.word	0x40004400
 80006a0:	40021000 	.word	0x40021000

080006a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006a4:	b480      	push	{r7}
 80006a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80006a8:	e7fe      	b.n	80006a8 <NMI_Handler+0x4>

080006aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006aa:	b480      	push	{r7}
 80006ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ae:	e7fe      	b.n	80006ae <HardFault_Handler+0x4>

080006b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006b0:	b480      	push	{r7}
 80006b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006b4:	e7fe      	b.n	80006b4 <MemManage_Handler+0x4>

080006b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006b6:	b480      	push	{r7}
 80006b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006ba:	e7fe      	b.n	80006ba <BusFault_Handler+0x4>

080006bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80006bc:	b480      	push	{r7}
 80006be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80006c0:	e7fe      	b.n	80006c0 <UsageFault_Handler+0x4>

080006c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80006c2:	b480      	push	{r7}
 80006c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80006c6:	bf00      	nop
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr

080006d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80006d0:	b480      	push	{r7}
 80006d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80006d4:	bf00      	nop
 80006d6:	46bd      	mov	sp, r7
 80006d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006dc:	4770      	bx	lr

080006de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80006de:	b480      	push	{r7}
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80006e2:	bf00      	nop
 80006e4:	46bd      	mov	sp, r7
 80006e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ea:	4770      	bx	lr

080006ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80006ec:	b580      	push	{r7, lr}
 80006ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80006f0:	f000 f88e 	bl	8000810 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80006f4:	bf00      	nop
 80006f6:	bd80      	pop	{r7, pc}

080006f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80006f8:	b580      	push	{r7, lr}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80006fc:	4802      	ldr	r0, [pc, #8]	; (8000708 <TIM2_IRQHandler+0x10>)
 80006fe:	f002 fa21 	bl	8002b44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000702:	bf00      	nop
 8000704:	bd80      	pop	{r7, pc}
 8000706:	bf00      	nop
 8000708:	20000028 	.word	0x20000028

0800070c <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800070c:	b480      	push	{r7}
 800070e:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000710:	4b06      	ldr	r3, [pc, #24]	; (800072c <SystemInit+0x20>)
 8000712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000716:	4a05      	ldr	r2, [pc, #20]	; (800072c <SystemInit+0x20>)
 8000718:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800071c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000720:	bf00      	nop
 8000722:	46bd      	mov	sp, r7
 8000724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000728:	4770      	bx	lr
 800072a:	bf00      	nop
 800072c:	e000ed00 	.word	0xe000ed00

08000730 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000730:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000768 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8000734:	f7ff ffea 	bl	800070c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000738:	480c      	ldr	r0, [pc, #48]	; (800076c <LoopForever+0x6>)
  ldr r1, =_edata
 800073a:	490d      	ldr	r1, [pc, #52]	; (8000770 <LoopForever+0xa>)
  ldr r2, =_sidata
 800073c:	4a0d      	ldr	r2, [pc, #52]	; (8000774 <LoopForever+0xe>)
  movs r3, #0
 800073e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000740:	e002      	b.n	8000748 <LoopCopyDataInit>

08000742 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000742:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000744:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000746:	3304      	adds	r3, #4

08000748 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000748:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800074a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800074c:	d3f9      	bcc.n	8000742 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800074e:	4a0a      	ldr	r2, [pc, #40]	; (8000778 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000750:	4c0a      	ldr	r4, [pc, #40]	; (800077c <LoopForever+0x16>)
  movs r3, #0
 8000752:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000754:	e001      	b.n	800075a <LoopFillZerobss>

08000756 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000756:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000758:	3204      	adds	r2, #4

0800075a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800075a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800075c:	d3fb      	bcc.n	8000756 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800075e:	f003 fe5d 	bl	800441c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000762:	f7ff fd6b 	bl	800023c <main>

08000766 <LoopForever>:

LoopForever:
    b LoopForever
 8000766:	e7fe      	b.n	8000766 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8000768:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800076c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000770:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000774:	080044cc 	.word	0x080044cc
  ldr r2, =_sbss
 8000778:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 800077c:	20000104 	.word	0x20000104

08000780 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000780:	e7fe      	b.n	8000780 <ADC1_2_IRQHandler>
	...

08000784 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000788:	4b08      	ldr	r3, [pc, #32]	; (80007ac <HAL_Init+0x28>)
 800078a:	681b      	ldr	r3, [r3, #0]
 800078c:	4a07      	ldr	r2, [pc, #28]	; (80007ac <HAL_Init+0x28>)
 800078e:	f043 0310 	orr.w	r3, r3, #16
 8000792:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000794:	2003      	movs	r0, #3
 8000796:	f000 f92b 	bl	80009f0 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800079a:	2000      	movs	r0, #0
 800079c:	f000 f808 	bl	80007b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80007a0:	f7ff fec2 	bl	8000528 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80007a4:	2300      	movs	r3, #0
}
 80007a6:	4618      	mov	r0, r3
 80007a8:	bd80      	pop	{r7, pc}
 80007aa:	bf00      	nop
 80007ac:	40022000 	.word	0x40022000

080007b0 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	b082      	sub	sp, #8
 80007b4:	af00      	add	r7, sp, #0
 80007b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80007b8:	4b12      	ldr	r3, [pc, #72]	; (8000804 <HAL_InitTick+0x54>)
 80007ba:	681a      	ldr	r2, [r3, #0]
 80007bc:	4b12      	ldr	r3, [pc, #72]	; (8000808 <HAL_InitTick+0x58>)
 80007be:	781b      	ldrb	r3, [r3, #0]
 80007c0:	4619      	mov	r1, r3
 80007c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80007c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80007ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80007ce:	4618      	mov	r0, r3
 80007d0:	f000 f943 	bl	8000a5a <HAL_SYSTICK_Config>
 80007d4:	4603      	mov	r3, r0
 80007d6:	2b00      	cmp	r3, #0
 80007d8:	d001      	beq.n	80007de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80007da:	2301      	movs	r3, #1
 80007dc:	e00e      	b.n	80007fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	2b0f      	cmp	r3, #15
 80007e2:	d80a      	bhi.n	80007fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80007e4:	2200      	movs	r2, #0
 80007e6:	6879      	ldr	r1, [r7, #4]
 80007e8:	f04f 30ff 	mov.w	r0, #4294967295
 80007ec:	f000 f90b 	bl	8000a06 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80007f0:	4a06      	ldr	r2, [pc, #24]	; (800080c <HAL_InitTick+0x5c>)
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80007f6:	2300      	movs	r3, #0
 80007f8:	e000      	b.n	80007fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80007fa:	2301      	movs	r3, #1
}
 80007fc:	4618      	mov	r0, r3
 80007fe:	3708      	adds	r7, #8
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20000000 	.word	0x20000000
 8000808:	20000008 	.word	0x20000008
 800080c:	20000004 	.word	0x20000004

08000810 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000810:	b480      	push	{r7}
 8000812:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000814:	4b06      	ldr	r3, [pc, #24]	; (8000830 <HAL_IncTick+0x20>)
 8000816:	781b      	ldrb	r3, [r3, #0]
 8000818:	461a      	mov	r2, r3
 800081a:	4b06      	ldr	r3, [pc, #24]	; (8000834 <HAL_IncTick+0x24>)
 800081c:	681b      	ldr	r3, [r3, #0]
 800081e:	4413      	add	r3, r2
 8000820:	4a04      	ldr	r2, [pc, #16]	; (8000834 <HAL_IncTick+0x24>)
 8000822:	6013      	str	r3, [r2, #0]
}
 8000824:	bf00      	nop
 8000826:	46bd      	mov	sp, r7
 8000828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800082c:	4770      	bx	lr
 800082e:	bf00      	nop
 8000830:	20000008 	.word	0x20000008
 8000834:	20000100 	.word	0x20000100

08000838 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000838:	b480      	push	{r7}
 800083a:	af00      	add	r7, sp, #0
  return uwTick;  
 800083c:	4b03      	ldr	r3, [pc, #12]	; (800084c <HAL_GetTick+0x14>)
 800083e:	681b      	ldr	r3, [r3, #0]
}
 8000840:	4618      	mov	r0, r3
 8000842:	46bd      	mov	sp, r7
 8000844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000848:	4770      	bx	lr
 800084a:	bf00      	nop
 800084c:	20000100 	.word	0x20000100

08000850 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000850:	b480      	push	{r7}
 8000852:	b085      	sub	sp, #20
 8000854:	af00      	add	r7, sp, #0
 8000856:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	f003 0307 	and.w	r3, r3, #7
 800085e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000860:	4b0c      	ldr	r3, [pc, #48]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000862:	68db      	ldr	r3, [r3, #12]
 8000864:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000866:	68ba      	ldr	r2, [r7, #8]
 8000868:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800086c:	4013      	ands	r3, r2
 800086e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000874:	68bb      	ldr	r3, [r7, #8]
 8000876:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000878:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800087c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000880:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000882:	4a04      	ldr	r2, [pc, #16]	; (8000894 <__NVIC_SetPriorityGrouping+0x44>)
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	60d3      	str	r3, [r2, #12]
}
 8000888:	bf00      	nop
 800088a:	3714      	adds	r7, #20
 800088c:	46bd      	mov	sp, r7
 800088e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000892:	4770      	bx	lr
 8000894:	e000ed00 	.word	0xe000ed00

08000898 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000898:	b480      	push	{r7}
 800089a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800089c:	4b04      	ldr	r3, [pc, #16]	; (80008b0 <__NVIC_GetPriorityGrouping+0x18>)
 800089e:	68db      	ldr	r3, [r3, #12]
 80008a0:	0a1b      	lsrs	r3, r3, #8
 80008a2:	f003 0307 	and.w	r3, r3, #7
}
 80008a6:	4618      	mov	r0, r3
 80008a8:	46bd      	mov	sp, r7
 80008aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ae:	4770      	bx	lr
 80008b0:	e000ed00 	.word	0xe000ed00

080008b4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80008b4:	b480      	push	{r7}
 80008b6:	b083      	sub	sp, #12
 80008b8:	af00      	add	r7, sp, #0
 80008ba:	4603      	mov	r3, r0
 80008bc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	db0b      	blt.n	80008de <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80008c6:	79fb      	ldrb	r3, [r7, #7]
 80008c8:	f003 021f 	and.w	r2, r3, #31
 80008cc:	4907      	ldr	r1, [pc, #28]	; (80008ec <__NVIC_EnableIRQ+0x38>)
 80008ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80008d2:	095b      	lsrs	r3, r3, #5
 80008d4:	2001      	movs	r0, #1
 80008d6:	fa00 f202 	lsl.w	r2, r0, r2
 80008da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80008de:	bf00      	nop
 80008e0:	370c      	adds	r7, #12
 80008e2:	46bd      	mov	sp, r7
 80008e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008e8:	4770      	bx	lr
 80008ea:	bf00      	nop
 80008ec:	e000e100 	.word	0xe000e100

080008f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	4603      	mov	r3, r0
 80008f8:	6039      	str	r1, [r7, #0]
 80008fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80008fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000900:	2b00      	cmp	r3, #0
 8000902:	db0a      	blt.n	800091a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000904:	683b      	ldr	r3, [r7, #0]
 8000906:	b2da      	uxtb	r2, r3
 8000908:	490c      	ldr	r1, [pc, #48]	; (800093c <__NVIC_SetPriority+0x4c>)
 800090a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800090e:	0112      	lsls	r2, r2, #4
 8000910:	b2d2      	uxtb	r2, r2
 8000912:	440b      	add	r3, r1
 8000914:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000918:	e00a      	b.n	8000930 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800091a:	683b      	ldr	r3, [r7, #0]
 800091c:	b2da      	uxtb	r2, r3
 800091e:	4908      	ldr	r1, [pc, #32]	; (8000940 <__NVIC_SetPriority+0x50>)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	f003 030f 	and.w	r3, r3, #15
 8000926:	3b04      	subs	r3, #4
 8000928:	0112      	lsls	r2, r2, #4
 800092a:	b2d2      	uxtb	r2, r2
 800092c:	440b      	add	r3, r1
 800092e:	761a      	strb	r2, [r3, #24]
}
 8000930:	bf00      	nop
 8000932:	370c      	adds	r7, #12
 8000934:	46bd      	mov	sp, r7
 8000936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800093a:	4770      	bx	lr
 800093c:	e000e100 	.word	0xe000e100
 8000940:	e000ed00 	.word	0xe000ed00

08000944 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000944:	b480      	push	{r7}
 8000946:	b089      	sub	sp, #36	; 0x24
 8000948:	af00      	add	r7, sp, #0
 800094a:	60f8      	str	r0, [r7, #12]
 800094c:	60b9      	str	r1, [r7, #8]
 800094e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000950:	68fb      	ldr	r3, [r7, #12]
 8000952:	f003 0307 	and.w	r3, r3, #7
 8000956:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 0307 	rsb	r3, r3, #7
 800095e:	2b04      	cmp	r3, #4
 8000960:	bf28      	it	cs
 8000962:	2304      	movcs	r3, #4
 8000964:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000966:	69fb      	ldr	r3, [r7, #28]
 8000968:	3304      	adds	r3, #4
 800096a:	2b06      	cmp	r3, #6
 800096c:	d902      	bls.n	8000974 <NVIC_EncodePriority+0x30>
 800096e:	69fb      	ldr	r3, [r7, #28]
 8000970:	3b03      	subs	r3, #3
 8000972:	e000      	b.n	8000976 <NVIC_EncodePriority+0x32>
 8000974:	2300      	movs	r3, #0
 8000976:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000978:	f04f 32ff 	mov.w	r2, #4294967295
 800097c:	69bb      	ldr	r3, [r7, #24]
 800097e:	fa02 f303 	lsl.w	r3, r2, r3
 8000982:	43da      	mvns	r2, r3
 8000984:	68bb      	ldr	r3, [r7, #8]
 8000986:	401a      	ands	r2, r3
 8000988:	697b      	ldr	r3, [r7, #20]
 800098a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800098c:	f04f 31ff 	mov.w	r1, #4294967295
 8000990:	697b      	ldr	r3, [r7, #20]
 8000992:	fa01 f303 	lsl.w	r3, r1, r3
 8000996:	43d9      	mvns	r1, r3
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800099c:	4313      	orrs	r3, r2
         );
}
 800099e:	4618      	mov	r0, r3
 80009a0:	3724      	adds	r7, #36	; 0x24
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr
	...

080009ac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80009ac:	b580      	push	{r7, lr}
 80009ae:	b082      	sub	sp, #8
 80009b0:	af00      	add	r7, sp, #0
 80009b2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80009b4:	687b      	ldr	r3, [r7, #4]
 80009b6:	3b01      	subs	r3, #1
 80009b8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80009bc:	d301      	bcc.n	80009c2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80009be:	2301      	movs	r3, #1
 80009c0:	e00f      	b.n	80009e2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80009c2:	4a0a      	ldr	r2, [pc, #40]	; (80009ec <SysTick_Config+0x40>)
 80009c4:	687b      	ldr	r3, [r7, #4]
 80009c6:	3b01      	subs	r3, #1
 80009c8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80009ca:	210f      	movs	r1, #15
 80009cc:	f04f 30ff 	mov.w	r0, #4294967295
 80009d0:	f7ff ff8e 	bl	80008f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80009d4:	4b05      	ldr	r3, [pc, #20]	; (80009ec <SysTick_Config+0x40>)
 80009d6:	2200      	movs	r2, #0
 80009d8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80009da:	4b04      	ldr	r3, [pc, #16]	; (80009ec <SysTick_Config+0x40>)
 80009dc:	2207      	movs	r2, #7
 80009de:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80009e0:	2300      	movs	r3, #0
}
 80009e2:	4618      	mov	r0, r3
 80009e4:	3708      	adds	r7, #8
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	e000e010 	.word	0xe000e010

080009f0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80009f0:	b580      	push	{r7, lr}
 80009f2:	b082      	sub	sp, #8
 80009f4:	af00      	add	r7, sp, #0
 80009f6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80009f8:	6878      	ldr	r0, [r7, #4]
 80009fa:	f7ff ff29 	bl	8000850 <__NVIC_SetPriorityGrouping>
}
 80009fe:	bf00      	nop
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b086      	sub	sp, #24
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	4603      	mov	r3, r0
 8000a0e:	60b9      	str	r1, [r7, #8]
 8000a10:	607a      	str	r2, [r7, #4]
 8000a12:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000a14:	2300      	movs	r3, #0
 8000a16:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000a18:	f7ff ff3e 	bl	8000898 <__NVIC_GetPriorityGrouping>
 8000a1c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000a1e:	687a      	ldr	r2, [r7, #4]
 8000a20:	68b9      	ldr	r1, [r7, #8]
 8000a22:	6978      	ldr	r0, [r7, #20]
 8000a24:	f7ff ff8e 	bl	8000944 <NVIC_EncodePriority>
 8000a28:	4602      	mov	r2, r0
 8000a2a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000a2e:	4611      	mov	r1, r2
 8000a30:	4618      	mov	r0, r3
 8000a32:	f7ff ff5d 	bl	80008f0 <__NVIC_SetPriority>
}
 8000a36:	bf00      	nop
 8000a38:	3718      	adds	r7, #24
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}

08000a3e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000a3e:	b580      	push	{r7, lr}
 8000a40:	b082      	sub	sp, #8
 8000a42:	af00      	add	r7, sp, #0
 8000a44:	4603      	mov	r3, r0
 8000a46:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000a48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff ff31 	bl	80008b4 <__NVIC_EnableIRQ>
}
 8000a52:	bf00      	nop
 8000a54:	3708      	adds	r7, #8
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000a5a:	b580      	push	{r7, lr}
 8000a5c:	b082      	sub	sp, #8
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000a62:	6878      	ldr	r0, [r7, #4]
 8000a64:	f7ff ffa2 	bl	80009ac <SysTick_Config>
 8000a68:	4603      	mov	r3, r0
}
 8000a6a:	4618      	mov	r0, r3
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
	...

08000a74 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000a74:	b480      	push	{r7}
 8000a76:	b087      	sub	sp, #28
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
 8000a7c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000a82:	e160      	b.n	8000d46 <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8000a84:	683b      	ldr	r3, [r7, #0]
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	2101      	movs	r1, #1
 8000a8a:	697b      	ldr	r3, [r7, #20]
 8000a8c:	fa01 f303 	lsl.w	r3, r1, r3
 8000a90:	4013      	ands	r3, r2
 8000a92:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	f000 8152 	beq.w	8000d40 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000a9c:	683b      	ldr	r3, [r7, #0]
 8000a9e:	685b      	ldr	r3, [r3, #4]
 8000aa0:	f003 0303 	and.w	r3, r3, #3
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d005      	beq.n	8000ab4 <HAL_GPIO_Init+0x40>
 8000aa8:	683b      	ldr	r3, [r7, #0]
 8000aaa:	685b      	ldr	r3, [r3, #4]
 8000aac:	f003 0303 	and.w	r3, r3, #3
 8000ab0:	2b02      	cmp	r3, #2
 8000ab2:	d130      	bne.n	8000b16 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000ab4:	687b      	ldr	r3, [r7, #4]
 8000ab6:	689b      	ldr	r3, [r3, #8]
 8000ab8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8000aba:	697b      	ldr	r3, [r7, #20]
 8000abc:	005b      	lsls	r3, r3, #1
 8000abe:	2203      	movs	r2, #3
 8000ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac4:	43db      	mvns	r3, r3
 8000ac6:	693a      	ldr	r2, [r7, #16]
 8000ac8:	4013      	ands	r3, r2
 8000aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000acc:	683b      	ldr	r3, [r7, #0]
 8000ace:	68da      	ldr	r2, [r3, #12]
 8000ad0:	697b      	ldr	r3, [r7, #20]
 8000ad2:	005b      	lsls	r3, r3, #1
 8000ad4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad8:	693a      	ldr	r2, [r7, #16]
 8000ada:	4313      	orrs	r3, r2
 8000adc:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000ade:	687b      	ldr	r3, [r7, #4]
 8000ae0:	693a      	ldr	r2, [r7, #16]
 8000ae2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000ae4:	687b      	ldr	r3, [r7, #4]
 8000ae6:	685b      	ldr	r3, [r3, #4]
 8000ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000aea:	2201      	movs	r2, #1
 8000aec:	697b      	ldr	r3, [r7, #20]
 8000aee:	fa02 f303 	lsl.w	r3, r2, r3
 8000af2:	43db      	mvns	r3, r3
 8000af4:	693a      	ldr	r2, [r7, #16]
 8000af6:	4013      	ands	r3, r2
 8000af8:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	685b      	ldr	r3, [r3, #4]
 8000afe:	091b      	lsrs	r3, r3, #4
 8000b00:	f003 0201 	and.w	r2, r3, #1
 8000b04:	697b      	ldr	r3, [r7, #20]
 8000b06:	fa02 f303 	lsl.w	r3, r2, r3
 8000b0a:	693a      	ldr	r2, [r7, #16]
 8000b0c:	4313      	orrs	r3, r2
 8000b0e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	693a      	ldr	r2, [r7, #16]
 8000b14:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	685b      	ldr	r3, [r3, #4]
 8000b1a:	f003 0303 	and.w	r3, r3, #3
 8000b1e:	2b03      	cmp	r3, #3
 8000b20:	d017      	beq.n	8000b52 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000b22:	687b      	ldr	r3, [r7, #4]
 8000b24:	68db      	ldr	r3, [r3, #12]
 8000b26:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8000b28:	697b      	ldr	r3, [r7, #20]
 8000b2a:	005b      	lsls	r3, r3, #1
 8000b2c:	2203      	movs	r2, #3
 8000b2e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b32:	43db      	mvns	r3, r3
 8000b34:	693a      	ldr	r2, [r7, #16]
 8000b36:	4013      	ands	r3, r2
 8000b38:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000b3a:	683b      	ldr	r3, [r7, #0]
 8000b3c:	689a      	ldr	r2, [r3, #8]
 8000b3e:	697b      	ldr	r3, [r7, #20]
 8000b40:	005b      	lsls	r3, r3, #1
 8000b42:	fa02 f303 	lsl.w	r3, r2, r3
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	4313      	orrs	r3, r2
 8000b4a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	693a      	ldr	r2, [r7, #16]
 8000b50:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	685b      	ldr	r3, [r3, #4]
 8000b56:	f003 0303 	and.w	r3, r3, #3
 8000b5a:	2b02      	cmp	r3, #2
 8000b5c:	d123      	bne.n	8000ba6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000b5e:	697b      	ldr	r3, [r7, #20]
 8000b60:	08da      	lsrs	r2, r3, #3
 8000b62:	687b      	ldr	r3, [r7, #4]
 8000b64:	3208      	adds	r2, #8
 8000b66:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000b6a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	f003 0307 	and.w	r3, r3, #7
 8000b72:	009b      	lsls	r3, r3, #2
 8000b74:	220f      	movs	r2, #15
 8000b76:	fa02 f303 	lsl.w	r3, r2, r3
 8000b7a:	43db      	mvns	r3, r3
 8000b7c:	693a      	ldr	r2, [r7, #16]
 8000b7e:	4013      	ands	r3, r2
 8000b80:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	691a      	ldr	r2, [r3, #16]
 8000b86:	697b      	ldr	r3, [r7, #20]
 8000b88:	f003 0307 	and.w	r3, r3, #7
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b92:	693a      	ldr	r2, [r7, #16]
 8000b94:	4313      	orrs	r3, r2
 8000b96:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8000b98:	697b      	ldr	r3, [r7, #20]
 8000b9a:	08da      	lsrs	r2, r3, #3
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	3208      	adds	r2, #8
 8000ba0:	6939      	ldr	r1, [r7, #16]
 8000ba2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	681b      	ldr	r3, [r3, #0]
 8000baa:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8000bac:	697b      	ldr	r3, [r7, #20]
 8000bae:	005b      	lsls	r3, r3, #1
 8000bb0:	2203      	movs	r2, #3
 8000bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000bb6:	43db      	mvns	r3, r3
 8000bb8:	693a      	ldr	r2, [r7, #16]
 8000bba:	4013      	ands	r3, r2
 8000bbc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8000bbe:	683b      	ldr	r3, [r7, #0]
 8000bc0:	685b      	ldr	r3, [r3, #4]
 8000bc2:	f003 0203 	and.w	r2, r3, #3
 8000bc6:	697b      	ldr	r3, [r7, #20]
 8000bc8:	005b      	lsls	r3, r3, #1
 8000bca:	fa02 f303 	lsl.w	r3, r2, r3
 8000bce:	693a      	ldr	r2, [r7, #16]
 8000bd0:	4313      	orrs	r3, r2
 8000bd2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000bd4:	687b      	ldr	r3, [r7, #4]
 8000bd6:	693a      	ldr	r2, [r7, #16]
 8000bd8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8000bda:	683b      	ldr	r3, [r7, #0]
 8000bdc:	685b      	ldr	r3, [r3, #4]
 8000bde:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000be2:	2b00      	cmp	r3, #0
 8000be4:	f000 80ac 	beq.w	8000d40 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000be8:	4b5e      	ldr	r3, [pc, #376]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	4a5d      	ldr	r2, [pc, #372]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000bee:	f043 0301 	orr.w	r3, r3, #1
 8000bf2:	6193      	str	r3, [r2, #24]
 8000bf4:	4b5b      	ldr	r3, [pc, #364]	; (8000d64 <HAL_GPIO_Init+0x2f0>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	f003 0301 	and.w	r3, r3, #1
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000c00:	4a59      	ldr	r2, [pc, #356]	; (8000d68 <HAL_GPIO_Init+0x2f4>)
 8000c02:	697b      	ldr	r3, [r7, #20]
 8000c04:	089b      	lsrs	r3, r3, #2
 8000c06:	3302      	adds	r3, #2
 8000c08:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000c0c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000c0e:	697b      	ldr	r3, [r7, #20]
 8000c10:	f003 0303 	and.w	r3, r3, #3
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	220f      	movs	r2, #15
 8000c18:	fa02 f303 	lsl.w	r3, r2, r3
 8000c1c:	43db      	mvns	r3, r3
 8000c1e:	693a      	ldr	r2, [r7, #16]
 8000c20:	4013      	ands	r3, r2
 8000c22:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000c2a:	d025      	beq.n	8000c78 <HAL_GPIO_Init+0x204>
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	4a4f      	ldr	r2, [pc, #316]	; (8000d6c <HAL_GPIO_Init+0x2f8>)
 8000c30:	4293      	cmp	r3, r2
 8000c32:	d01f      	beq.n	8000c74 <HAL_GPIO_Init+0x200>
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	4a4e      	ldr	r2, [pc, #312]	; (8000d70 <HAL_GPIO_Init+0x2fc>)
 8000c38:	4293      	cmp	r3, r2
 8000c3a:	d019      	beq.n	8000c70 <HAL_GPIO_Init+0x1fc>
 8000c3c:	687b      	ldr	r3, [r7, #4]
 8000c3e:	4a4d      	ldr	r2, [pc, #308]	; (8000d74 <HAL_GPIO_Init+0x300>)
 8000c40:	4293      	cmp	r3, r2
 8000c42:	d013      	beq.n	8000c6c <HAL_GPIO_Init+0x1f8>
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	4a4c      	ldr	r2, [pc, #304]	; (8000d78 <HAL_GPIO_Init+0x304>)
 8000c48:	4293      	cmp	r3, r2
 8000c4a:	d00d      	beq.n	8000c68 <HAL_GPIO_Init+0x1f4>
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	4a4b      	ldr	r2, [pc, #300]	; (8000d7c <HAL_GPIO_Init+0x308>)
 8000c50:	4293      	cmp	r3, r2
 8000c52:	d007      	beq.n	8000c64 <HAL_GPIO_Init+0x1f0>
 8000c54:	687b      	ldr	r3, [r7, #4]
 8000c56:	4a4a      	ldr	r2, [pc, #296]	; (8000d80 <HAL_GPIO_Init+0x30c>)
 8000c58:	4293      	cmp	r3, r2
 8000c5a:	d101      	bne.n	8000c60 <HAL_GPIO_Init+0x1ec>
 8000c5c:	2306      	movs	r3, #6
 8000c5e:	e00c      	b.n	8000c7a <HAL_GPIO_Init+0x206>
 8000c60:	2307      	movs	r3, #7
 8000c62:	e00a      	b.n	8000c7a <HAL_GPIO_Init+0x206>
 8000c64:	2305      	movs	r3, #5
 8000c66:	e008      	b.n	8000c7a <HAL_GPIO_Init+0x206>
 8000c68:	2304      	movs	r3, #4
 8000c6a:	e006      	b.n	8000c7a <HAL_GPIO_Init+0x206>
 8000c6c:	2303      	movs	r3, #3
 8000c6e:	e004      	b.n	8000c7a <HAL_GPIO_Init+0x206>
 8000c70:	2302      	movs	r3, #2
 8000c72:	e002      	b.n	8000c7a <HAL_GPIO_Init+0x206>
 8000c74:	2301      	movs	r3, #1
 8000c76:	e000      	b.n	8000c7a <HAL_GPIO_Init+0x206>
 8000c78:	2300      	movs	r3, #0
 8000c7a:	697a      	ldr	r2, [r7, #20]
 8000c7c:	f002 0203 	and.w	r2, r2, #3
 8000c80:	0092      	lsls	r2, r2, #2
 8000c82:	4093      	lsls	r3, r2
 8000c84:	693a      	ldr	r2, [r7, #16]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000c8a:	4937      	ldr	r1, [pc, #220]	; (8000d68 <HAL_GPIO_Init+0x2f4>)
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	089b      	lsrs	r3, r3, #2
 8000c90:	3302      	adds	r3, #2
 8000c92:	693a      	ldr	r2, [r7, #16]
 8000c94:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000c98:	4b3a      	ldr	r3, [pc, #232]	; (8000d84 <HAL_GPIO_Init+0x310>)
 8000c9a:	689b      	ldr	r3, [r3, #8]
 8000c9c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	43db      	mvns	r3, r3
 8000ca2:	693a      	ldr	r2, [r7, #16]
 8000ca4:	4013      	ands	r3, r2
 8000ca6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8000ca8:	683b      	ldr	r3, [r7, #0]
 8000caa:	685b      	ldr	r3, [r3, #4]
 8000cac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000cb0:	2b00      	cmp	r3, #0
 8000cb2:	d003      	beq.n	8000cbc <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8000cb4:	693a      	ldr	r2, [r7, #16]
 8000cb6:	68fb      	ldr	r3, [r7, #12]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000cbc:	4a31      	ldr	r2, [pc, #196]	; (8000d84 <HAL_GPIO_Init+0x310>)
 8000cbe:	693b      	ldr	r3, [r7, #16]
 8000cc0:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000cc2:	4b30      	ldr	r3, [pc, #192]	; (8000d84 <HAL_GPIO_Init+0x310>)
 8000cc4:	68db      	ldr	r3, [r3, #12]
 8000cc6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cc8:	68fb      	ldr	r3, [r7, #12]
 8000cca:	43db      	mvns	r3, r3
 8000ccc:	693a      	ldr	r2, [r7, #16]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8000cd2:	683b      	ldr	r3, [r7, #0]
 8000cd4:	685b      	ldr	r3, [r3, #4]
 8000cd6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d003      	beq.n	8000ce6 <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8000cde:	693a      	ldr	r2, [r7, #16]
 8000ce0:	68fb      	ldr	r3, [r7, #12]
 8000ce2:	4313      	orrs	r3, r2
 8000ce4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000ce6:	4a27      	ldr	r2, [pc, #156]	; (8000d84 <HAL_GPIO_Init+0x310>)
 8000ce8:	693b      	ldr	r3, [r7, #16]
 8000cea:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000cec:	4b25      	ldr	r3, [pc, #148]	; (8000d84 <HAL_GPIO_Init+0x310>)
 8000cee:	685b      	ldr	r3, [r3, #4]
 8000cf0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000cf2:	68fb      	ldr	r3, [r7, #12]
 8000cf4:	43db      	mvns	r3, r3
 8000cf6:	693a      	ldr	r2, [r7, #16]
 8000cf8:	4013      	ands	r3, r2
 8000cfa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8000cfc:	683b      	ldr	r3, [r7, #0]
 8000cfe:	685b      	ldr	r3, [r3, #4]
 8000d00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d003      	beq.n	8000d10 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8000d08:	693a      	ldr	r2, [r7, #16]
 8000d0a:	68fb      	ldr	r3, [r7, #12]
 8000d0c:	4313      	orrs	r3, r2
 8000d0e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000d10:	4a1c      	ldr	r2, [pc, #112]	; (8000d84 <HAL_GPIO_Init+0x310>)
 8000d12:	693b      	ldr	r3, [r7, #16]
 8000d14:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000d16:	4b1b      	ldr	r3, [pc, #108]	; (8000d84 <HAL_GPIO_Init+0x310>)
 8000d18:	681b      	ldr	r3, [r3, #0]
 8000d1a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000d1c:	68fb      	ldr	r3, [r7, #12]
 8000d1e:	43db      	mvns	r3, r3
 8000d20:	693a      	ldr	r2, [r7, #16]
 8000d22:	4013      	ands	r3, r2
 8000d24:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8000d26:	683b      	ldr	r3, [r7, #0]
 8000d28:	685b      	ldr	r3, [r3, #4]
 8000d2a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d003      	beq.n	8000d3a <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8000d32:	693a      	ldr	r2, [r7, #16]
 8000d34:	68fb      	ldr	r3, [r7, #12]
 8000d36:	4313      	orrs	r3, r2
 8000d38:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000d3a:	4a12      	ldr	r2, [pc, #72]	; (8000d84 <HAL_GPIO_Init+0x310>)
 8000d3c:	693b      	ldr	r3, [r7, #16]
 8000d3e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000d40:	697b      	ldr	r3, [r7, #20]
 8000d42:	3301      	adds	r3, #1
 8000d44:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000d46:	683b      	ldr	r3, [r7, #0]
 8000d48:	681a      	ldr	r2, [r3, #0]
 8000d4a:	697b      	ldr	r3, [r7, #20]
 8000d4c:	fa22 f303 	lsr.w	r3, r2, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	f47f ae97 	bne.w	8000a84 <HAL_GPIO_Init+0x10>
  }
}
 8000d56:	bf00      	nop
 8000d58:	bf00      	nop
 8000d5a:	371c      	adds	r7, #28
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	40021000 	.word	0x40021000
 8000d68:	40010000 	.word	0x40010000
 8000d6c:	48000400 	.word	0x48000400
 8000d70:	48000800 	.word	0x48000800
 8000d74:	48000c00 	.word	0x48000c00
 8000d78:	48001000 	.word	0x48001000
 8000d7c:	48001400 	.word	0x48001400
 8000d80:	48001800 	.word	0x48001800
 8000d84:	40010400 	.word	0x40010400

08000d88 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	f5ad 7d02 	sub.w	sp, sp, #520	; 0x208
 8000d8e:	af00      	add	r7, sp, #0
 8000d90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d94:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000d98:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000d9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000d9e:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d102      	bne.n	8000dae <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8000da8:	2301      	movs	r3, #1
 8000daa:	f001 b83a 	b.w	8001e22 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000dae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000db2:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	681b      	ldr	r3, [r3, #0]
 8000dba:	f003 0301 	and.w	r3, r3, #1
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	f000 816f 	beq.w	80010a2 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8000dc4:	4bb5      	ldr	r3, [pc, #724]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000dc6:	685b      	ldr	r3, [r3, #4]
 8000dc8:	f003 030c 	and.w	r3, r3, #12
 8000dcc:	2b04      	cmp	r3, #4
 8000dce:	d00c      	beq.n	8000dea <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8000dd0:	4bb2      	ldr	r3, [pc, #712]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000dd2:	685b      	ldr	r3, [r3, #4]
 8000dd4:	f003 030c 	and.w	r3, r3, #12
 8000dd8:	2b08      	cmp	r3, #8
 8000dda:	d15c      	bne.n	8000e96 <HAL_RCC_OscConfig+0x10e>
 8000ddc:	4baf      	ldr	r3, [pc, #700]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000dde:	685b      	ldr	r3, [r3, #4]
 8000de0:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 8000de4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000de8:	d155      	bne.n	8000e96 <HAL_RCC_OscConfig+0x10e>
 8000dea:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000dee:	f8c7 31f4 	str.w	r3, [r7, #500]	; 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000df2:	f8d7 31f4 	ldr.w	r3, [r7, #500]	; 0x1f4
 8000df6:	fa93 f3a3 	rbit	r3, r3
 8000dfa:	f8c7 31f0 	str.w	r3, [r7, #496]	; 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8000dfe:	f8d7 31f0 	ldr.w	r3, [r7, #496]	; 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000e02:	fab3 f383 	clz	r3, r3
 8000e06:	b2db      	uxtb	r3, r3
 8000e08:	095b      	lsrs	r3, r3, #5
 8000e0a:	b2db      	uxtb	r3, r3
 8000e0c:	f043 0301 	orr.w	r3, r3, #1
 8000e10:	b2db      	uxtb	r3, r3
 8000e12:	2b01      	cmp	r3, #1
 8000e14:	d102      	bne.n	8000e1c <HAL_RCC_OscConfig+0x94>
 8000e16:	4ba1      	ldr	r3, [pc, #644]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	e015      	b.n	8000e48 <HAL_RCC_OscConfig+0xc0>
 8000e1c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e20:	f8c7 31ec 	str.w	r3, [r7, #492]	; 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000e24:	f8d7 31ec 	ldr.w	r3, [r7, #492]	; 0x1ec
 8000e28:	fa93 f3a3 	rbit	r3, r3
 8000e2c:	f8c7 31e8 	str.w	r3, [r7, #488]	; 0x1e8
 8000e30:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000e34:	f8c7 31e4 	str.w	r3, [r7, #484]	; 0x1e4
 8000e38:	f8d7 31e4 	ldr.w	r3, [r7, #484]	; 0x1e4
 8000e3c:	fa93 f3a3 	rbit	r3, r3
 8000e40:	f8c7 31e0 	str.w	r3, [r7, #480]	; 0x1e0
 8000e44:	4b95      	ldr	r3, [pc, #596]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000e48:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000e4c:	f8c7 21dc 	str.w	r2, [r7, #476]	; 0x1dc
 8000e50:	f8d7 21dc 	ldr.w	r2, [r7, #476]	; 0x1dc
 8000e54:	fa92 f2a2 	rbit	r2, r2
 8000e58:	f8c7 21d8 	str.w	r2, [r7, #472]	; 0x1d8
  return result;
 8000e5c:	f8d7 21d8 	ldr.w	r2, [r7, #472]	; 0x1d8
 8000e60:	fab2 f282 	clz	r2, r2
 8000e64:	b2d2      	uxtb	r2, r2
 8000e66:	f042 0220 	orr.w	r2, r2, #32
 8000e6a:	b2d2      	uxtb	r2, r2
 8000e6c:	f002 021f 	and.w	r2, r2, #31
 8000e70:	2101      	movs	r1, #1
 8000e72:	fa01 f202 	lsl.w	r2, r1, r2
 8000e76:	4013      	ands	r3, r2
 8000e78:	2b00      	cmp	r3, #0
 8000e7a:	f000 8111 	beq.w	80010a0 <HAL_RCC_OscConfig+0x318>
 8000e7e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e82:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	685b      	ldr	r3, [r3, #4]
 8000e8a:	2b00      	cmp	r3, #0
 8000e8c:	f040 8108 	bne.w	80010a0 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8000e90:	2301      	movs	r3, #1
 8000e92:	f000 bfc6 	b.w	8001e22 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000e96:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000e9a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8000ea6:	d106      	bne.n	8000eb6 <HAL_RCC_OscConfig+0x12e>
 8000ea8:	4b7c      	ldr	r3, [pc, #496]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a7b      	ldr	r2, [pc, #492]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000eae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000eb2:	6013      	str	r3, [r2, #0]
 8000eb4:	e036      	b.n	8000f24 <HAL_RCC_OscConfig+0x19c>
 8000eb6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000eba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d10c      	bne.n	8000ee0 <HAL_RCC_OscConfig+0x158>
 8000ec6:	4b75      	ldr	r3, [pc, #468]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	4a74      	ldr	r2, [pc, #464]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000ecc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000ed0:	6013      	str	r3, [r2, #0]
 8000ed2:	4b72      	ldr	r3, [pc, #456]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a71      	ldr	r2, [pc, #452]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000ed8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000edc:	6013      	str	r3, [r2, #0]
 8000ede:	e021      	b.n	8000f24 <HAL_RCC_OscConfig+0x19c>
 8000ee0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000ee4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8000ef0:	d10c      	bne.n	8000f0c <HAL_RCC_OscConfig+0x184>
 8000ef2:	4b6a      	ldr	r3, [pc, #424]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4a69      	ldr	r2, [pc, #420]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000ef8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000efc:	6013      	str	r3, [r2, #0]
 8000efe:	4b67      	ldr	r3, [pc, #412]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	4a66      	ldr	r2, [pc, #408]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f08:	6013      	str	r3, [r2, #0]
 8000f0a:	e00b      	b.n	8000f24 <HAL_RCC_OscConfig+0x19c>
 8000f0c:	4b63      	ldr	r3, [pc, #396]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	4a62      	ldr	r2, [pc, #392]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000f12:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8000f16:	6013      	str	r3, [r2, #0]
 8000f18:	4b60      	ldr	r3, [pc, #384]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	4a5f      	ldr	r2, [pc, #380]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000f1e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8000f22:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f24:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8000f28:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8000f2c:	681b      	ldr	r3, [r3, #0]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d059      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f34:	f7ff fc80 	bl	8000838 <HAL_GetTick>
 8000f38:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f3c:	e00a      	b.n	8000f54 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000f3e:	f7ff fc7b 	bl	8000838 <HAL_GetTick>
 8000f42:	4602      	mov	r2, r0
 8000f44:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000f48:	1ad3      	subs	r3, r2, r3
 8000f4a:	2b64      	cmp	r3, #100	; 0x64
 8000f4c:	d902      	bls.n	8000f54 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8000f4e:	2303      	movs	r3, #3
 8000f50:	f000 bf67 	b.w	8001e22 <HAL_RCC_OscConfig+0x109a>
 8000f54:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f58:	f8c7 31d4 	str.w	r3, [r7, #468]	; 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f5c:	f8d7 31d4 	ldr.w	r3, [r7, #468]	; 0x1d4
 8000f60:	fa93 f3a3 	rbit	r3, r3
 8000f64:	f8c7 31d0 	str.w	r3, [r7, #464]	; 0x1d0
  return result;
 8000f68:	f8d7 31d0 	ldr.w	r3, [r7, #464]	; 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8000f6c:	fab3 f383 	clz	r3, r3
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	095b      	lsrs	r3, r3, #5
 8000f74:	b2db      	uxtb	r3, r3
 8000f76:	f043 0301 	orr.w	r3, r3, #1
 8000f7a:	b2db      	uxtb	r3, r3
 8000f7c:	2b01      	cmp	r3, #1
 8000f7e:	d102      	bne.n	8000f86 <HAL_RCC_OscConfig+0x1fe>
 8000f80:	4b46      	ldr	r3, [pc, #280]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	e015      	b.n	8000fb2 <HAL_RCC_OscConfig+0x22a>
 8000f86:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f8a:	f8c7 31cc 	str.w	r3, [r7, #460]	; 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8000f8e:	f8d7 31cc 	ldr.w	r3, [r7, #460]	; 0x1cc
 8000f92:	fa93 f3a3 	rbit	r3, r3
 8000f96:	f8c7 31c8 	str.w	r3, [r7, #456]	; 0x1c8
 8000f9a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8000f9e:	f8c7 31c4 	str.w	r3, [r7, #452]	; 0x1c4
 8000fa2:	f8d7 31c4 	ldr.w	r3, [r7, #452]	; 0x1c4
 8000fa6:	fa93 f3a3 	rbit	r3, r3
 8000faa:	f8c7 31c0 	str.w	r3, [r7, #448]	; 0x1c0
 8000fae:	4b3b      	ldr	r3, [pc, #236]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8000fb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fb2:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8000fb6:	f8c7 21bc 	str.w	r2, [r7, #444]	; 0x1bc
 8000fba:	f8d7 21bc 	ldr.w	r2, [r7, #444]	; 0x1bc
 8000fbe:	fa92 f2a2 	rbit	r2, r2
 8000fc2:	f8c7 21b8 	str.w	r2, [r7, #440]	; 0x1b8
  return result;
 8000fc6:	f8d7 21b8 	ldr.w	r2, [r7, #440]	; 0x1b8
 8000fca:	fab2 f282 	clz	r2, r2
 8000fce:	b2d2      	uxtb	r2, r2
 8000fd0:	f042 0220 	orr.w	r2, r2, #32
 8000fd4:	b2d2      	uxtb	r2, r2
 8000fd6:	f002 021f 	and.w	r2, r2, #31
 8000fda:	2101      	movs	r1, #1
 8000fdc:	fa01 f202 	lsl.w	r2, r1, r2
 8000fe0:	4013      	ands	r3, r2
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d0ab      	beq.n	8000f3e <HAL_RCC_OscConfig+0x1b6>
 8000fe6:	e05c      	b.n	80010a2 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fe8:	f7ff fc26 	bl	8000838 <HAL_GetTick>
 8000fec:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8000ff0:	e00a      	b.n	8001008 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000ff2:	f7ff fc21 	bl	8000838 <HAL_GetTick>
 8000ff6:	4602      	mov	r2, r0
 8000ff8:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8000ffc:	1ad3      	subs	r3, r2, r3
 8000ffe:	2b64      	cmp	r3, #100	; 0x64
 8001000:	d902      	bls.n	8001008 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 8001002:	2303      	movs	r3, #3
 8001004:	f000 bf0d 	b.w	8001e22 <HAL_RCC_OscConfig+0x109a>
 8001008:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800100c:	f8c7 31b4 	str.w	r3, [r7, #436]	; 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001010:	f8d7 31b4 	ldr.w	r3, [r7, #436]	; 0x1b4
 8001014:	fa93 f3a3 	rbit	r3, r3
 8001018:	f8c7 31b0 	str.w	r3, [r7, #432]	; 0x1b0
  return result;
 800101c:	f8d7 31b0 	ldr.w	r3, [r7, #432]	; 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001020:	fab3 f383 	clz	r3, r3
 8001024:	b2db      	uxtb	r3, r3
 8001026:	095b      	lsrs	r3, r3, #5
 8001028:	b2db      	uxtb	r3, r3
 800102a:	f043 0301 	orr.w	r3, r3, #1
 800102e:	b2db      	uxtb	r3, r3
 8001030:	2b01      	cmp	r3, #1
 8001032:	d102      	bne.n	800103a <HAL_RCC_OscConfig+0x2b2>
 8001034:	4b19      	ldr	r3, [pc, #100]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8001036:	681b      	ldr	r3, [r3, #0]
 8001038:	e015      	b.n	8001066 <HAL_RCC_OscConfig+0x2de>
 800103a:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 800103e:	f8c7 31ac 	str.w	r3, [r7, #428]	; 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001042:	f8d7 31ac 	ldr.w	r3, [r7, #428]	; 0x1ac
 8001046:	fa93 f3a3 	rbit	r3, r3
 800104a:	f8c7 31a8 	str.w	r3, [r7, #424]	; 0x1a8
 800104e:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001052:	f8c7 31a4 	str.w	r3, [r7, #420]	; 0x1a4
 8001056:	f8d7 31a4 	ldr.w	r3, [r7, #420]	; 0x1a4
 800105a:	fa93 f3a3 	rbit	r3, r3
 800105e:	f8c7 31a0 	str.w	r3, [r7, #416]	; 0x1a0
 8001062:	4b0e      	ldr	r3, [pc, #56]	; (800109c <HAL_RCC_OscConfig+0x314>)
 8001064:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001066:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800106a:	f8c7 219c 	str.w	r2, [r7, #412]	; 0x19c
 800106e:	f8d7 219c 	ldr.w	r2, [r7, #412]	; 0x19c
 8001072:	fa92 f2a2 	rbit	r2, r2
 8001076:	f8c7 2198 	str.w	r2, [r7, #408]	; 0x198
  return result;
 800107a:	f8d7 2198 	ldr.w	r2, [r7, #408]	; 0x198
 800107e:	fab2 f282 	clz	r2, r2
 8001082:	b2d2      	uxtb	r2, r2
 8001084:	f042 0220 	orr.w	r2, r2, #32
 8001088:	b2d2      	uxtb	r2, r2
 800108a:	f002 021f 	and.w	r2, r2, #31
 800108e:	2101      	movs	r1, #1
 8001090:	fa01 f202 	lsl.w	r2, r1, r2
 8001094:	4013      	ands	r3, r2
 8001096:	2b00      	cmp	r3, #0
 8001098:	d1ab      	bne.n	8000ff2 <HAL_RCC_OscConfig+0x26a>
 800109a:	e002      	b.n	80010a2 <HAL_RCC_OscConfig+0x31a>
 800109c:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010a0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010a2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80010a6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f003 0302 	and.w	r3, r3, #2
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	f000 817f 	beq.w	80013b6 <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80010b8:	4ba7      	ldr	r3, [pc, #668]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 80010ba:	685b      	ldr	r3, [r3, #4]
 80010bc:	f003 030c 	and.w	r3, r3, #12
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d00c      	beq.n	80010de <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80010c4:	4ba4      	ldr	r3, [pc, #656]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 80010c6:	685b      	ldr	r3, [r3, #4]
 80010c8:	f003 030c 	and.w	r3, r3, #12
 80010cc:	2b08      	cmp	r3, #8
 80010ce:	d173      	bne.n	80011b8 <HAL_RCC_OscConfig+0x430>
 80010d0:	4ba1      	ldr	r3, [pc, #644]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f403 33c0 	and.w	r3, r3, #98304	; 0x18000
 80010d8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80010dc:	d16c      	bne.n	80011b8 <HAL_RCC_OscConfig+0x430>
 80010de:	2302      	movs	r3, #2
 80010e0:	f8c7 3194 	str.w	r3, [r7, #404]	; 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80010e4:	f8d7 3194 	ldr.w	r3, [r7, #404]	; 0x194
 80010e8:	fa93 f3a3 	rbit	r3, r3
 80010ec:	f8c7 3190 	str.w	r3, [r7, #400]	; 0x190
  return result;
 80010f0:	f8d7 3190 	ldr.w	r3, [r7, #400]	; 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80010f4:	fab3 f383 	clz	r3, r3
 80010f8:	b2db      	uxtb	r3, r3
 80010fa:	095b      	lsrs	r3, r3, #5
 80010fc:	b2db      	uxtb	r3, r3
 80010fe:	f043 0301 	orr.w	r3, r3, #1
 8001102:	b2db      	uxtb	r3, r3
 8001104:	2b01      	cmp	r3, #1
 8001106:	d102      	bne.n	800110e <HAL_RCC_OscConfig+0x386>
 8001108:	4b93      	ldr	r3, [pc, #588]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 800110a:	681b      	ldr	r3, [r3, #0]
 800110c:	e013      	b.n	8001136 <HAL_RCC_OscConfig+0x3ae>
 800110e:	2302      	movs	r3, #2
 8001110:	f8c7 318c 	str.w	r3, [r7, #396]	; 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001114:	f8d7 318c 	ldr.w	r3, [r7, #396]	; 0x18c
 8001118:	fa93 f3a3 	rbit	r3, r3
 800111c:	f8c7 3188 	str.w	r3, [r7, #392]	; 0x188
 8001120:	2302      	movs	r3, #2
 8001122:	f8c7 3184 	str.w	r3, [r7, #388]	; 0x184
 8001126:	f8d7 3184 	ldr.w	r3, [r7, #388]	; 0x184
 800112a:	fa93 f3a3 	rbit	r3, r3
 800112e:	f8c7 3180 	str.w	r3, [r7, #384]	; 0x180
 8001132:	4b89      	ldr	r3, [pc, #548]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 8001134:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001136:	2202      	movs	r2, #2
 8001138:	f8c7 217c 	str.w	r2, [r7, #380]	; 0x17c
 800113c:	f8d7 217c 	ldr.w	r2, [r7, #380]	; 0x17c
 8001140:	fa92 f2a2 	rbit	r2, r2
 8001144:	f8c7 2178 	str.w	r2, [r7, #376]	; 0x178
  return result;
 8001148:	f8d7 2178 	ldr.w	r2, [r7, #376]	; 0x178
 800114c:	fab2 f282 	clz	r2, r2
 8001150:	b2d2      	uxtb	r2, r2
 8001152:	f042 0220 	orr.w	r2, r2, #32
 8001156:	b2d2      	uxtb	r2, r2
 8001158:	f002 021f 	and.w	r2, r2, #31
 800115c:	2101      	movs	r1, #1
 800115e:	fa01 f202 	lsl.w	r2, r1, r2
 8001162:	4013      	ands	r3, r2
 8001164:	2b00      	cmp	r3, #0
 8001166:	d00a      	beq.n	800117e <HAL_RCC_OscConfig+0x3f6>
 8001168:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800116c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	2b01      	cmp	r3, #1
 8001176:	d002      	beq.n	800117e <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 8001178:	2301      	movs	r3, #1
 800117a:	f000 be52 	b.w	8001e22 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800117e:	4b76      	ldr	r3, [pc, #472]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001186:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800118a:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	691b      	ldr	r3, [r3, #16]
 8001192:	21f8      	movs	r1, #248	; 0xf8
 8001194:	f8c7 1174 	str.w	r1, [r7, #372]	; 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001198:	f8d7 1174 	ldr.w	r1, [r7, #372]	; 0x174
 800119c:	fa91 f1a1 	rbit	r1, r1
 80011a0:	f8c7 1170 	str.w	r1, [r7, #368]	; 0x170
  return result;
 80011a4:	f8d7 1170 	ldr.w	r1, [r7, #368]	; 0x170
 80011a8:	fab1 f181 	clz	r1, r1
 80011ac:	b2c9      	uxtb	r1, r1
 80011ae:	408b      	lsls	r3, r1
 80011b0:	4969      	ldr	r1, [pc, #420]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 80011b2:	4313      	orrs	r3, r2
 80011b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80011b6:	e0fe      	b.n	80013b6 <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80011b8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80011bc:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	68db      	ldr	r3, [r3, #12]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	f000 8088 	beq.w	80012da <HAL_RCC_OscConfig+0x552>
 80011ca:	2301      	movs	r3, #1
 80011cc:	f8c7 316c 	str.w	r3, [r7, #364]	; 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80011d0:	f8d7 316c 	ldr.w	r3, [r7, #364]	; 0x16c
 80011d4:	fa93 f3a3 	rbit	r3, r3
 80011d8:	f8c7 3168 	str.w	r3, [r7, #360]	; 0x168
  return result;
 80011dc:	f8d7 3168 	ldr.w	r3, [r7, #360]	; 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80011e0:	fab3 f383 	clz	r3, r3
 80011e4:	b2db      	uxtb	r3, r3
 80011e6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80011ea:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80011ee:	009b      	lsls	r3, r3, #2
 80011f0:	461a      	mov	r2, r3
 80011f2:	2301      	movs	r3, #1
 80011f4:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011f6:	f7ff fb1f 	bl	8000838 <HAL_GetTick>
 80011fa:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80011fe:	e00a      	b.n	8001216 <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001200:	f7ff fb1a 	bl	8000838 <HAL_GetTick>
 8001204:	4602      	mov	r2, r0
 8001206:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800120a:	1ad3      	subs	r3, r2, r3
 800120c:	2b02      	cmp	r3, #2
 800120e:	d902      	bls.n	8001216 <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8001210:	2303      	movs	r3, #3
 8001212:	f000 be06 	b.w	8001e22 <HAL_RCC_OscConfig+0x109a>
 8001216:	2302      	movs	r3, #2
 8001218:	f8c7 3164 	str.w	r3, [r7, #356]	; 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800121c:	f8d7 3164 	ldr.w	r3, [r7, #356]	; 0x164
 8001220:	fa93 f3a3 	rbit	r3, r3
 8001224:	f8c7 3160 	str.w	r3, [r7, #352]	; 0x160
  return result;
 8001228:	f8d7 3160 	ldr.w	r3, [r7, #352]	; 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800122c:	fab3 f383 	clz	r3, r3
 8001230:	b2db      	uxtb	r3, r3
 8001232:	095b      	lsrs	r3, r3, #5
 8001234:	b2db      	uxtb	r3, r3
 8001236:	f043 0301 	orr.w	r3, r3, #1
 800123a:	b2db      	uxtb	r3, r3
 800123c:	2b01      	cmp	r3, #1
 800123e:	d102      	bne.n	8001246 <HAL_RCC_OscConfig+0x4be>
 8001240:	4b45      	ldr	r3, [pc, #276]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	e013      	b.n	800126e <HAL_RCC_OscConfig+0x4e6>
 8001246:	2302      	movs	r3, #2
 8001248:	f8c7 315c 	str.w	r3, [r7, #348]	; 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800124c:	f8d7 315c 	ldr.w	r3, [r7, #348]	; 0x15c
 8001250:	fa93 f3a3 	rbit	r3, r3
 8001254:	f8c7 3158 	str.w	r3, [r7, #344]	; 0x158
 8001258:	2302      	movs	r3, #2
 800125a:	f8c7 3154 	str.w	r3, [r7, #340]	; 0x154
 800125e:	f8d7 3154 	ldr.w	r3, [r7, #340]	; 0x154
 8001262:	fa93 f3a3 	rbit	r3, r3
 8001266:	f8c7 3150 	str.w	r3, [r7, #336]	; 0x150
 800126a:	4b3b      	ldr	r3, [pc, #236]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 800126c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800126e:	2202      	movs	r2, #2
 8001270:	f8c7 214c 	str.w	r2, [r7, #332]	; 0x14c
 8001274:	f8d7 214c 	ldr.w	r2, [r7, #332]	; 0x14c
 8001278:	fa92 f2a2 	rbit	r2, r2
 800127c:	f8c7 2148 	str.w	r2, [r7, #328]	; 0x148
  return result;
 8001280:	f8d7 2148 	ldr.w	r2, [r7, #328]	; 0x148
 8001284:	fab2 f282 	clz	r2, r2
 8001288:	b2d2      	uxtb	r2, r2
 800128a:	f042 0220 	orr.w	r2, r2, #32
 800128e:	b2d2      	uxtb	r2, r2
 8001290:	f002 021f 	and.w	r2, r2, #31
 8001294:	2101      	movs	r1, #1
 8001296:	fa01 f202 	lsl.w	r2, r1, r2
 800129a:	4013      	ands	r3, r2
 800129c:	2b00      	cmp	r3, #0
 800129e:	d0af      	beq.n	8001200 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80012a0:	4b2d      	ldr	r3, [pc, #180]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80012a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80012ac:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80012b0:	681b      	ldr	r3, [r3, #0]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	21f8      	movs	r1, #248	; 0xf8
 80012b6:	f8c7 1144 	str.w	r1, [r7, #324]	; 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012ba:	f8d7 1144 	ldr.w	r1, [r7, #324]	; 0x144
 80012be:	fa91 f1a1 	rbit	r1, r1
 80012c2:	f8c7 1140 	str.w	r1, [r7, #320]	; 0x140
  return result;
 80012c6:	f8d7 1140 	ldr.w	r1, [r7, #320]	; 0x140
 80012ca:	fab1 f181 	clz	r1, r1
 80012ce:	b2c9      	uxtb	r1, r1
 80012d0:	408b      	lsls	r3, r1
 80012d2:	4921      	ldr	r1, [pc, #132]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 80012d4:	4313      	orrs	r3, r2
 80012d6:	600b      	str	r3, [r1, #0]
 80012d8:	e06d      	b.n	80013b6 <HAL_RCC_OscConfig+0x62e>
 80012da:	2301      	movs	r3, #1
 80012dc:	f8c7 313c 	str.w	r3, [r7, #316]	; 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80012e0:	f8d7 313c 	ldr.w	r3, [r7, #316]	; 0x13c
 80012e4:	fa93 f3a3 	rbit	r3, r3
 80012e8:	f8c7 3138 	str.w	r3, [r7, #312]	; 0x138
  return result;
 80012ec:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80012f0:	fab3 f383 	clz	r3, r3
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80012fa:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80012fe:	009b      	lsls	r3, r3, #2
 8001300:	461a      	mov	r2, r3
 8001302:	2300      	movs	r3, #0
 8001304:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001306:	f7ff fa97 	bl	8000838 <HAL_GetTick>
 800130a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800130e:	e00a      	b.n	8001326 <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001310:	f7ff fa92 	bl	8000838 <HAL_GetTick>
 8001314:	4602      	mov	r2, r0
 8001316:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	2b02      	cmp	r3, #2
 800131e:	d902      	bls.n	8001326 <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8001320:	2303      	movs	r3, #3
 8001322:	f000 bd7e 	b.w	8001e22 <HAL_RCC_OscConfig+0x109a>
 8001326:	2302      	movs	r3, #2
 8001328:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800132c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8001330:	fa93 f3a3 	rbit	r3, r3
 8001334:	f8c7 3130 	str.w	r3, [r7, #304]	; 0x130
  return result;
 8001338:	f8d7 3130 	ldr.w	r3, [r7, #304]	; 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800133c:	fab3 f383 	clz	r3, r3
 8001340:	b2db      	uxtb	r3, r3
 8001342:	095b      	lsrs	r3, r3, #5
 8001344:	b2db      	uxtb	r3, r3
 8001346:	f043 0301 	orr.w	r3, r3, #1
 800134a:	b2db      	uxtb	r3, r3
 800134c:	2b01      	cmp	r3, #1
 800134e:	d105      	bne.n	800135c <HAL_RCC_OscConfig+0x5d4>
 8001350:	4b01      	ldr	r3, [pc, #4]	; (8001358 <HAL_RCC_OscConfig+0x5d0>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	e016      	b.n	8001384 <HAL_RCC_OscConfig+0x5fc>
 8001356:	bf00      	nop
 8001358:	40021000 	.word	0x40021000
 800135c:	2302      	movs	r3, #2
 800135e:	f8c7 312c 	str.w	r3, [r7, #300]	; 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001362:	f8d7 312c 	ldr.w	r3, [r7, #300]	; 0x12c
 8001366:	fa93 f3a3 	rbit	r3, r3
 800136a:	f8c7 3128 	str.w	r3, [r7, #296]	; 0x128
 800136e:	2302      	movs	r3, #2
 8001370:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
 8001374:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8001378:	fa93 f3a3 	rbit	r3, r3
 800137c:	f8c7 3120 	str.w	r3, [r7, #288]	; 0x120
 8001380:	4bbf      	ldr	r3, [pc, #764]	; (8001680 <HAL_RCC_OscConfig+0x8f8>)
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2202      	movs	r2, #2
 8001386:	f8c7 211c 	str.w	r2, [r7, #284]	; 0x11c
 800138a:	f8d7 211c 	ldr.w	r2, [r7, #284]	; 0x11c
 800138e:	fa92 f2a2 	rbit	r2, r2
 8001392:	f8c7 2118 	str.w	r2, [r7, #280]	; 0x118
  return result;
 8001396:	f8d7 2118 	ldr.w	r2, [r7, #280]	; 0x118
 800139a:	fab2 f282 	clz	r2, r2
 800139e:	b2d2      	uxtb	r2, r2
 80013a0:	f042 0220 	orr.w	r2, r2, #32
 80013a4:	b2d2      	uxtb	r2, r2
 80013a6:	f002 021f 	and.w	r2, r2, #31
 80013aa:	2101      	movs	r1, #1
 80013ac:	fa01 f202 	lsl.w	r2, r1, r2
 80013b0:	4013      	ands	r3, r2
 80013b2:	2b00      	cmp	r3, #0
 80013b4:	d1ac      	bne.n	8001310 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80013b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	f003 0308 	and.w	r3, r3, #8
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	f000 8113 	beq.w	80015f2 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80013cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80013d0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	695b      	ldr	r3, [r3, #20]
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d07c      	beq.n	80014d6 <HAL_RCC_OscConfig+0x74e>
 80013dc:	2301      	movs	r3, #1
 80013de:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80013e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	; 0x114
 80013e6:	fa93 f3a3 	rbit	r3, r3
 80013ea:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
  return result;
 80013ee:	f8d7 3110 	ldr.w	r3, [r7, #272]	; 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80013f2:	fab3 f383 	clz	r3, r3
 80013f6:	b2db      	uxtb	r3, r3
 80013f8:	461a      	mov	r2, r3
 80013fa:	4ba2      	ldr	r3, [pc, #648]	; (8001684 <HAL_RCC_OscConfig+0x8fc>)
 80013fc:	4413      	add	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	461a      	mov	r2, r3
 8001402:	2301      	movs	r3, #1
 8001404:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001406:	f7ff fa17 	bl	8000838 <HAL_GetTick>
 800140a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800140e:	e00a      	b.n	8001426 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001410:	f7ff fa12 	bl	8000838 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800141a:	1ad3      	subs	r3, r2, r3
 800141c:	2b02      	cmp	r3, #2
 800141e:	d902      	bls.n	8001426 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8001420:	2303      	movs	r3, #3
 8001422:	f000 bcfe 	b.w	8001e22 <HAL_RCC_OscConfig+0x109a>
 8001426:	2302      	movs	r3, #2
 8001428:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800142c:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8001430:	fa93 f2a3 	rbit	r2, r3
 8001434:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001438:	f5a3 7380 	sub.w	r3, r3, #256	; 0x100
 800143c:	601a      	str	r2, [r3, #0]
 800143e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001442:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001446:	2202      	movs	r2, #2
 8001448:	601a      	str	r2, [r3, #0]
 800144a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800144e:	f5a3 7382 	sub.w	r3, r3, #260	; 0x104
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	fa93 f2a3 	rbit	r2, r3
 8001458:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800145c:	f5a3 7384 	sub.w	r3, r3, #264	; 0x108
 8001460:	601a      	str	r2, [r3, #0]
 8001462:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001466:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 800146a:	2202      	movs	r2, #2
 800146c:	601a      	str	r2, [r3, #0]
 800146e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001472:	f5a3 7386 	sub.w	r3, r3, #268	; 0x10c
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	fa93 f2a3 	rbit	r2, r3
 800147c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001480:	f5a3 7388 	sub.w	r3, r3, #272	; 0x110
 8001484:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001486:	4b7e      	ldr	r3, [pc, #504]	; (8001680 <HAL_RCC_OscConfig+0x8f8>)
 8001488:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800148a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800148e:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 8001492:	2102      	movs	r1, #2
 8001494:	6019      	str	r1, [r3, #0]
 8001496:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800149a:	f5a3 738a 	sub.w	r3, r3, #276	; 0x114
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	fa93 f1a3 	rbit	r1, r3
 80014a4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014a8:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014ac:	6019      	str	r1, [r3, #0]
  return result;
 80014ae:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014b2:	f5a3 738c 	sub.w	r3, r3, #280	; 0x118
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	fab3 f383 	clz	r3, r3
 80014bc:	b2db      	uxtb	r3, r3
 80014be:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	f003 031f 	and.w	r3, r3, #31
 80014c8:	2101      	movs	r1, #1
 80014ca:	fa01 f303 	lsl.w	r3, r1, r3
 80014ce:	4013      	ands	r3, r2
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d09d      	beq.n	8001410 <HAL_RCC_OscConfig+0x688>
 80014d4:	e08d      	b.n	80015f2 <HAL_RCC_OscConfig+0x86a>
 80014d6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014da:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014de:	2201      	movs	r2, #1
 80014e0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80014e2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014e6:	f5a3 738e 	sub.w	r3, r3, #284	; 0x11c
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	fa93 f2a3 	rbit	r2, r3
 80014f0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014f4:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 80014f8:	601a      	str	r2, [r3, #0]
  return result;
 80014fa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80014fe:	f5a3 7390 	sub.w	r3, r3, #288	; 0x120
 8001502:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001504:	fab3 f383 	clz	r3, r3
 8001508:	b2db      	uxtb	r3, r3
 800150a:	461a      	mov	r2, r3
 800150c:	4b5d      	ldr	r3, [pc, #372]	; (8001684 <HAL_RCC_OscConfig+0x8fc>)
 800150e:	4413      	add	r3, r2
 8001510:	009b      	lsls	r3, r3, #2
 8001512:	461a      	mov	r2, r3
 8001514:	2300      	movs	r3, #0
 8001516:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001518:	f7ff f98e 	bl	8000838 <HAL_GetTick>
 800151c:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001520:	e00a      	b.n	8001538 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001522:	f7ff f989 	bl	8000838 <HAL_GetTick>
 8001526:	4602      	mov	r2, r0
 8001528:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800152c:	1ad3      	subs	r3, r2, r3
 800152e:	2b02      	cmp	r3, #2
 8001530:	d902      	bls.n	8001538 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8001532:	2303      	movs	r3, #3
 8001534:	f000 bc75 	b.w	8001e22 <HAL_RCC_OscConfig+0x109a>
 8001538:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800153c:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 8001540:	2202      	movs	r2, #2
 8001542:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001544:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001548:	f5a3 7392 	sub.w	r3, r3, #292	; 0x124
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	fa93 f2a3 	rbit	r2, r3
 8001552:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001556:	f5a3 7394 	sub.w	r3, r3, #296	; 0x128
 800155a:	601a      	str	r2, [r3, #0]
 800155c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001560:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001564:	2202      	movs	r2, #2
 8001566:	601a      	str	r2, [r3, #0]
 8001568:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800156c:	f5a3 7396 	sub.w	r3, r3, #300	; 0x12c
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	fa93 f2a3 	rbit	r2, r3
 8001576:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800157a:	f5a3 7398 	sub.w	r3, r3, #304	; 0x130
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001584:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001588:	2202      	movs	r2, #2
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001590:	f5a3 739a 	sub.w	r3, r3, #308	; 0x134
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	fa93 f2a3 	rbit	r2, r3
 800159a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800159e:	f5a3 739c 	sub.w	r3, r3, #312	; 0x138
 80015a2:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b36      	ldr	r3, [pc, #216]	; (8001680 <HAL_RCC_OscConfig+0x8f8>)
 80015a6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015ac:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015b0:	2102      	movs	r1, #2
 80015b2:	6019      	str	r1, [r3, #0]
 80015b4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015b8:	f5a3 739e 	sub.w	r3, r3, #316	; 0x13c
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	fa93 f1a3 	rbit	r1, r3
 80015c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015c6:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015ca:	6019      	str	r1, [r3, #0]
  return result;
 80015cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015d0:	f5a3 73a0 	sub.w	r3, r3, #320	; 0x140
 80015d4:	681b      	ldr	r3, [r3, #0]
 80015d6:	fab3 f383 	clz	r3, r3
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80015e0:	b2db      	uxtb	r3, r3
 80015e2:	f003 031f 	and.w	r3, r3, #31
 80015e6:	2101      	movs	r1, #1
 80015e8:	fa01 f303 	lsl.w	r3, r1, r3
 80015ec:	4013      	ands	r3, r2
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d197      	bne.n	8001522 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015f2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80015f6:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	2b00      	cmp	r3, #0
 8001604:	f000 81a5 	beq.w	8001952 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001608:	2300      	movs	r3, #0
 800160a:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800160e:	4b1c      	ldr	r3, [pc, #112]	; (8001680 <HAL_RCC_OscConfig+0x8f8>)
 8001610:	69db      	ldr	r3, [r3, #28]
 8001612:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001616:	2b00      	cmp	r3, #0
 8001618:	d116      	bne.n	8001648 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800161a:	4b19      	ldr	r3, [pc, #100]	; (8001680 <HAL_RCC_OscConfig+0x8f8>)
 800161c:	69db      	ldr	r3, [r3, #28]
 800161e:	4a18      	ldr	r2, [pc, #96]	; (8001680 <HAL_RCC_OscConfig+0x8f8>)
 8001620:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001624:	61d3      	str	r3, [r2, #28]
 8001626:	4b16      	ldr	r3, [pc, #88]	; (8001680 <HAL_RCC_OscConfig+0x8f8>)
 8001628:	69db      	ldr	r3, [r3, #28]
 800162a:	f003 5280 	and.w	r2, r3, #268435456	; 0x10000000
 800162e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001632:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800163c:	f5a3 73fe 	sub.w	r3, r3, #508	; 0x1fc
 8001640:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8001642:	2301      	movs	r3, #1
 8001644:	f887 3207 	strb.w	r3, [r7, #519]	; 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001648:	4b0f      	ldr	r3, [pc, #60]	; (8001688 <HAL_RCC_OscConfig+0x900>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001650:	2b00      	cmp	r3, #0
 8001652:	d121      	bne.n	8001698 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <HAL_RCC_OscConfig+0x900>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	4a0b      	ldr	r2, [pc, #44]	; (8001688 <HAL_RCC_OscConfig+0x900>)
 800165a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165e:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001660:	f7ff f8ea 	bl	8000838 <HAL_GetTick>
 8001664:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001668:	e010      	b.n	800168c <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800166a:	f7ff f8e5 	bl	8000838 <HAL_GetTick>
 800166e:	4602      	mov	r2, r0
 8001670:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	2b64      	cmp	r3, #100	; 0x64
 8001678:	d908      	bls.n	800168c <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 800167a:	2303      	movs	r3, #3
 800167c:	e3d1      	b.n	8001e22 <HAL_RCC_OscConfig+0x109a>
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	10908120 	.word	0x10908120
 8001688:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800168c:	4b8d      	ldr	r3, [pc, #564]	; (80018c4 <HAL_RCC_OscConfig+0xb3c>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001694:	2b00      	cmp	r3, #0
 8001696:	d0e8      	beq.n	800166a <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001698:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800169c:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	689b      	ldr	r3, [r3, #8]
 80016a4:	2b01      	cmp	r3, #1
 80016a6:	d106      	bne.n	80016b6 <HAL_RCC_OscConfig+0x92e>
 80016a8:	4b87      	ldr	r3, [pc, #540]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80016aa:	6a1b      	ldr	r3, [r3, #32]
 80016ac:	4a86      	ldr	r2, [pc, #536]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80016ae:	f043 0301 	orr.w	r3, r3, #1
 80016b2:	6213      	str	r3, [r2, #32]
 80016b4:	e035      	b.n	8001722 <HAL_RCC_OscConfig+0x99a>
 80016b6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016ba:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	689b      	ldr	r3, [r3, #8]
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d10c      	bne.n	80016e0 <HAL_RCC_OscConfig+0x958>
 80016c6:	4b80      	ldr	r3, [pc, #512]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80016c8:	6a1b      	ldr	r3, [r3, #32]
 80016ca:	4a7f      	ldr	r2, [pc, #508]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80016cc:	f023 0301 	bic.w	r3, r3, #1
 80016d0:	6213      	str	r3, [r2, #32]
 80016d2:	4b7d      	ldr	r3, [pc, #500]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80016d4:	6a1b      	ldr	r3, [r3, #32]
 80016d6:	4a7c      	ldr	r2, [pc, #496]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80016d8:	f023 0304 	bic.w	r3, r3, #4
 80016dc:	6213      	str	r3, [r2, #32]
 80016de:	e020      	b.n	8001722 <HAL_RCC_OscConfig+0x99a>
 80016e0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80016e4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	689b      	ldr	r3, [r3, #8]
 80016ec:	2b05      	cmp	r3, #5
 80016ee:	d10c      	bne.n	800170a <HAL_RCC_OscConfig+0x982>
 80016f0:	4b75      	ldr	r3, [pc, #468]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80016f2:	6a1b      	ldr	r3, [r3, #32]
 80016f4:	4a74      	ldr	r2, [pc, #464]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80016f6:	f043 0304 	orr.w	r3, r3, #4
 80016fa:	6213      	str	r3, [r2, #32]
 80016fc:	4b72      	ldr	r3, [pc, #456]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80016fe:	6a1b      	ldr	r3, [r3, #32]
 8001700:	4a71      	ldr	r2, [pc, #452]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 8001702:	f043 0301 	orr.w	r3, r3, #1
 8001706:	6213      	str	r3, [r2, #32]
 8001708:	e00b      	b.n	8001722 <HAL_RCC_OscConfig+0x99a>
 800170a:	4b6f      	ldr	r3, [pc, #444]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 800170c:	6a1b      	ldr	r3, [r3, #32]
 800170e:	4a6e      	ldr	r2, [pc, #440]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 8001710:	f023 0301 	bic.w	r3, r3, #1
 8001714:	6213      	str	r3, [r2, #32]
 8001716:	4b6c      	ldr	r3, [pc, #432]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 8001718:	6a1b      	ldr	r3, [r3, #32]
 800171a:	4a6b      	ldr	r2, [pc, #428]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 800171c:	f023 0304 	bic.w	r3, r3, #4
 8001720:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001722:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001726:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	2b00      	cmp	r3, #0
 8001730:	f000 8081 	beq.w	8001836 <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001734:	f7ff f880 	bl	8000838 <HAL_GetTick>
 8001738:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800173c:	e00b      	b.n	8001756 <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800173e:	f7ff f87b 	bl	8000838 <HAL_GetTick>
 8001742:	4602      	mov	r2, r0
 8001744:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	f241 3288 	movw	r2, #5000	; 0x1388
 800174e:	4293      	cmp	r3, r2
 8001750:	d901      	bls.n	8001756 <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8001752:	2303      	movs	r3, #3
 8001754:	e365      	b.n	8001e22 <HAL_RCC_OscConfig+0x109a>
 8001756:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800175a:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800175e:	2202      	movs	r2, #2
 8001760:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001762:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001766:	f5a3 73a2 	sub.w	r3, r3, #324	; 0x144
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	fa93 f2a3 	rbit	r2, r3
 8001770:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001774:	f5a3 73a4 	sub.w	r3, r3, #328	; 0x148
 8001778:	601a      	str	r2, [r3, #0]
 800177a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800177e:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 8001782:	2202      	movs	r2, #2
 8001784:	601a      	str	r2, [r3, #0]
 8001786:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800178a:	f5a3 73a6 	sub.w	r3, r3, #332	; 0x14c
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	fa93 f2a3 	rbit	r2, r3
 8001794:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001798:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 800179c:	601a      	str	r2, [r3, #0]
  return result;
 800179e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017a2:	f5a3 73a8 	sub.w	r3, r3, #336	; 0x150
 80017a6:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a8:	fab3 f383 	clz	r3, r3
 80017ac:	b2db      	uxtb	r3, r3
 80017ae:	095b      	lsrs	r3, r3, #5
 80017b0:	b2db      	uxtb	r3, r3
 80017b2:	f043 0302 	orr.w	r3, r3, #2
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	2b02      	cmp	r3, #2
 80017ba:	d102      	bne.n	80017c2 <HAL_RCC_OscConfig+0xa3a>
 80017bc:	4b42      	ldr	r3, [pc, #264]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80017be:	6a1b      	ldr	r3, [r3, #32]
 80017c0:	e013      	b.n	80017ea <HAL_RCC_OscConfig+0xa62>
 80017c2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017c6:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017ca:	2202      	movs	r2, #2
 80017cc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80017ce:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017d2:	f5a3 73aa 	sub.w	r3, r3, #340	; 0x154
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	fa93 f2a3 	rbit	r2, r3
 80017dc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80017e0:	f5a3 73ac 	sub.w	r3, r3, #344	; 0x158
 80017e4:	601a      	str	r2, [r3, #0]
 80017e6:	4b38      	ldr	r3, [pc, #224]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80017e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ea:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017ee:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017f2:	2102      	movs	r1, #2
 80017f4:	6011      	str	r1, [r2, #0]
 80017f6:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80017fa:	f5a2 72ae 	sub.w	r2, r2, #348	; 0x15c
 80017fe:	6812      	ldr	r2, [r2, #0]
 8001800:	fa92 f1a2 	rbit	r1, r2
 8001804:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001808:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 800180c:	6011      	str	r1, [r2, #0]
  return result;
 800180e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001812:	f5a2 72b0 	sub.w	r2, r2, #352	; 0x160
 8001816:	6812      	ldr	r2, [r2, #0]
 8001818:	fab2 f282 	clz	r2, r2
 800181c:	b2d2      	uxtb	r2, r2
 800181e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8001822:	b2d2      	uxtb	r2, r2
 8001824:	f002 021f 	and.w	r2, r2, #31
 8001828:	2101      	movs	r1, #1
 800182a:	fa01 f202 	lsl.w	r2, r1, r2
 800182e:	4013      	ands	r3, r2
 8001830:	2b00      	cmp	r3, #0
 8001832:	d084      	beq.n	800173e <HAL_RCC_OscConfig+0x9b6>
 8001834:	e083      	b.n	800193e <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001836:	f7fe ffff 	bl	8000838 <HAL_GetTick>
 800183a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800183e:	e00b      	b.n	8001858 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001840:	f7fe fffa 	bl	8000838 <HAL_GetTick>
 8001844:	4602      	mov	r2, r0
 8001846:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 800184a:	1ad3      	subs	r3, r2, r3
 800184c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001850:	4293      	cmp	r3, r2
 8001852:	d901      	bls.n	8001858 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8001854:	2303      	movs	r3, #3
 8001856:	e2e4      	b.n	8001e22 <HAL_RCC_OscConfig+0x109a>
 8001858:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800185c:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 8001860:	2202      	movs	r2, #2
 8001862:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001864:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001868:	f5a3 73b2 	sub.w	r3, r3, #356	; 0x164
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	fa93 f2a3 	rbit	r2, r3
 8001872:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001876:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
 800187a:	601a      	str	r2, [r3, #0]
 800187c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001880:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001884:	2202      	movs	r2, #2
 8001886:	601a      	str	r2, [r3, #0]
 8001888:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800188c:	f5a3 73b6 	sub.w	r3, r3, #364	; 0x16c
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	fa93 f2a3 	rbit	r2, r3
 8001896:	f507 7302 	add.w	r3, r7, #520	; 0x208
 800189a:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 800189e:	601a      	str	r2, [r3, #0]
  return result;
 80018a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018a4:	f5a3 73b8 	sub.w	r3, r3, #368	; 0x170
 80018a8:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80018aa:	fab3 f383 	clz	r3, r3
 80018ae:	b2db      	uxtb	r3, r3
 80018b0:	095b      	lsrs	r3, r3, #5
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	f043 0302 	orr.w	r3, r3, #2
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b02      	cmp	r3, #2
 80018bc:	d106      	bne.n	80018cc <HAL_RCC_OscConfig+0xb44>
 80018be:	4b02      	ldr	r3, [pc, #8]	; (80018c8 <HAL_RCC_OscConfig+0xb40>)
 80018c0:	6a1b      	ldr	r3, [r3, #32]
 80018c2:	e017      	b.n	80018f4 <HAL_RCC_OscConfig+0xb6c>
 80018c4:	40007000 	.word	0x40007000
 80018c8:	40021000 	.word	0x40021000
 80018cc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018d0:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018d4:	2202      	movs	r2, #2
 80018d6:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80018d8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018dc:	f5a3 73ba 	sub.w	r3, r3, #372	; 0x174
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	fa93 f2a3 	rbit	r2, r3
 80018e6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80018ea:	f5a3 73bc 	sub.w	r3, r3, #376	; 0x178
 80018ee:	601a      	str	r2, [r3, #0]
 80018f0:	4bb3      	ldr	r3, [pc, #716]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 80018f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018f4:	f507 7202 	add.w	r2, r7, #520	; 0x208
 80018f8:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 80018fc:	2102      	movs	r1, #2
 80018fe:	6011      	str	r1, [r2, #0]
 8001900:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001904:	f5a2 72be 	sub.w	r2, r2, #380	; 0x17c
 8001908:	6812      	ldr	r2, [r2, #0]
 800190a:	fa92 f1a2 	rbit	r1, r2
 800190e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001912:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001916:	6011      	str	r1, [r2, #0]
  return result;
 8001918:	f507 7202 	add.w	r2, r7, #520	; 0x208
 800191c:	f5a2 72c0 	sub.w	r2, r2, #384	; 0x180
 8001920:	6812      	ldr	r2, [r2, #0]
 8001922:	fab2 f282 	clz	r2, r2
 8001926:	b2d2      	uxtb	r2, r2
 8001928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800192c:	b2d2      	uxtb	r2, r2
 800192e:	f002 021f 	and.w	r2, r2, #31
 8001932:	2101      	movs	r1, #1
 8001934:	fa01 f202 	lsl.w	r2, r1, r2
 8001938:	4013      	ands	r3, r2
 800193a:	2b00      	cmp	r3, #0
 800193c:	d180      	bne.n	8001840 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800193e:	f897 3207 	ldrb.w	r3, [r7, #519]	; 0x207
 8001942:	2b01      	cmp	r3, #1
 8001944:	d105      	bne.n	8001952 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001946:	4b9e      	ldr	r3, [pc, #632]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 8001948:	69db      	ldr	r3, [r3, #28]
 800194a:	4a9d      	ldr	r2, [pc, #628]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 800194c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001950:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001952:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001956:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	699b      	ldr	r3, [r3, #24]
 800195e:	2b00      	cmp	r3, #0
 8001960:	f000 825e 	beq.w	8001e20 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001964:	4b96      	ldr	r3, [pc, #600]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 8001966:	685b      	ldr	r3, [r3, #4]
 8001968:	f003 030c 	and.w	r3, r3, #12
 800196c:	2b08      	cmp	r3, #8
 800196e:	f000 821f 	beq.w	8001db0 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001972:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001976:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	699b      	ldr	r3, [r3, #24]
 800197e:	2b02      	cmp	r3, #2
 8001980:	f040 8170 	bne.w	8001c64 <HAL_RCC_OscConfig+0xedc>
 8001984:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001988:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800198c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001990:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001992:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001996:	f5a3 73c2 	sub.w	r3, r3, #388	; 0x184
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	fa93 f2a3 	rbit	r2, r3
 80019a0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019a4:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019a8:	601a      	str	r2, [r3, #0]
  return result;
 80019aa:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ae:	f5a3 73c4 	sub.w	r3, r3, #392	; 0x188
 80019b2:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019b4:	fab3 f383 	clz	r3, r3
 80019b8:	b2db      	uxtb	r3, r3
 80019ba:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 80019be:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	461a      	mov	r2, r3
 80019c6:	2300      	movs	r3, #0
 80019c8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019ca:	f7fe ff35 	bl	8000838 <HAL_GetTick>
 80019ce:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019d2:	e009      	b.n	80019e8 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80019d4:	f7fe ff30 	bl	8000838 <HAL_GetTick>
 80019d8:	4602      	mov	r2, r0
 80019da:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 80019de:	1ad3      	subs	r3, r2, r3
 80019e0:	2b02      	cmp	r3, #2
 80019e2:	d901      	bls.n	80019e8 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 80019e4:	2303      	movs	r3, #3
 80019e6:	e21c      	b.n	8001e22 <HAL_RCC_OscConfig+0x109a>
 80019e8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019ec:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019f0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80019f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80019f6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 80019fa:	f5a3 73c6 	sub.w	r3, r3, #396	; 0x18c
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	fa93 f2a3 	rbit	r2, r3
 8001a04:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a08:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a0c:	601a      	str	r2, [r3, #0]
  return result;
 8001a0e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a12:	f5a3 73c8 	sub.w	r3, r3, #400	; 0x190
 8001a16:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a18:	fab3 f383 	clz	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	095b      	lsrs	r3, r3, #5
 8001a20:	b2db      	uxtb	r3, r3
 8001a22:	f043 0301 	orr.w	r3, r3, #1
 8001a26:	b2db      	uxtb	r3, r3
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d102      	bne.n	8001a32 <HAL_RCC_OscConfig+0xcaa>
 8001a2c:	4b64      	ldr	r3, [pc, #400]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	e027      	b.n	8001a82 <HAL_RCC_OscConfig+0xcfa>
 8001a32:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a36:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a3a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a3e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001a40:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a44:	f5a3 73ca 	sub.w	r3, r3, #404	; 0x194
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	fa93 f2a3 	rbit	r2, r3
 8001a4e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a52:	f5a3 73cc 	sub.w	r3, r3, #408	; 0x198
 8001a56:	601a      	str	r2, [r3, #0]
 8001a58:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a5c:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a60:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001a64:	601a      	str	r2, [r3, #0]
 8001a66:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a6a:	f5a3 73ce 	sub.w	r3, r3, #412	; 0x19c
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	fa93 f2a3 	rbit	r2, r3
 8001a74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001a78:	f5a3 73d0 	sub.w	r3, r3, #416	; 0x1a0
 8001a7c:	601a      	str	r2, [r3, #0]
 8001a7e:	4b50      	ldr	r3, [pc, #320]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 8001a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a82:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a86:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a8a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001a8e:	6011      	str	r1, [r2, #0]
 8001a90:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001a94:	f5a2 72d2 	sub.w	r2, r2, #420	; 0x1a4
 8001a98:	6812      	ldr	r2, [r2, #0]
 8001a9a:	fa92 f1a2 	rbit	r1, r2
 8001a9e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aa2:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001aa6:	6011      	str	r1, [r2, #0]
  return result;
 8001aa8:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001aac:	f5a2 72d4 	sub.w	r2, r2, #424	; 0x1a8
 8001ab0:	6812      	ldr	r2, [r2, #0]
 8001ab2:	fab2 f282 	clz	r2, r2
 8001ab6:	b2d2      	uxtb	r2, r2
 8001ab8:	f042 0220 	orr.w	r2, r2, #32
 8001abc:	b2d2      	uxtb	r2, r2
 8001abe:	f002 021f 	and.w	r2, r2, #31
 8001ac2:	2101      	movs	r1, #1
 8001ac4:	fa01 f202 	lsl.w	r2, r1, r2
 8001ac8:	4013      	ands	r3, r2
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d182      	bne.n	80019d4 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001ace:	4b3c      	ldr	r3, [pc, #240]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 8001ad0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ad2:	f023 020f 	bic.w	r2, r3, #15
 8001ad6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ada:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae2:	4937      	ldr	r1, [pc, #220]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 8001ae4:	4313      	orrs	r3, r2
 8001ae6:	62cb      	str	r3, [r1, #44]	; 0x2c
 8001ae8:	4b35      	ldr	r3, [pc, #212]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 8001aea:	685b      	ldr	r3, [r3, #4]
 8001aec:	f423 1276 	bic.w	r2, r3, #4030464	; 0x3d8000
 8001af0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001af4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	6a19      	ldr	r1, [r3, #32]
 8001afc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b00:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	69db      	ldr	r3, [r3, #28]
 8001b08:	430b      	orrs	r3, r1
 8001b0a:	492d      	ldr	r1, [pc, #180]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 8001b0c:	4313      	orrs	r3, r2
 8001b0e:	604b      	str	r3, [r1, #4]
 8001b10:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b14:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b18:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001b1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b1e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b22:	f5a3 73d6 	sub.w	r3, r3, #428	; 0x1ac
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	fa93 f2a3 	rbit	r2, r3
 8001b2c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b30:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b34:	601a      	str	r2, [r3, #0]
  return result;
 8001b36:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b3a:	f5a3 73d8 	sub.w	r3, r3, #432	; 0x1b0
 8001b3e:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001b40:	fab3 f383 	clz	r3, r3
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001b4a:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001b4e:	009b      	lsls	r3, r3, #2
 8001b50:	461a      	mov	r2, r3
 8001b52:	2301      	movs	r3, #1
 8001b54:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b56:	f7fe fe6f 	bl	8000838 <HAL_GetTick>
 8001b5a:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001b5e:	e009      	b.n	8001b74 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001b60:	f7fe fe6a 	bl	8000838 <HAL_GetTick>
 8001b64:	4602      	mov	r2, r0
 8001b66:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001b6a:	1ad3      	subs	r3, r2, r3
 8001b6c:	2b02      	cmp	r3, #2
 8001b6e:	d901      	bls.n	8001b74 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8001b70:	2303      	movs	r3, #3
 8001b72:	e156      	b.n	8001e22 <HAL_RCC_OscConfig+0x109a>
 8001b74:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b78:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b7c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001b80:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001b82:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b86:	f5a3 73da 	sub.w	r3, r3, #436	; 0x1b4
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	fa93 f2a3 	rbit	r2, r3
 8001b90:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b94:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001b98:	601a      	str	r2, [r3, #0]
  return result;
 8001b9a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001b9e:	f5a3 73dc 	sub.w	r3, r3, #440	; 0x1b8
 8001ba2:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001ba4:	fab3 f383 	clz	r3, r3
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	095b      	lsrs	r3, r3, #5
 8001bac:	b2db      	uxtb	r3, r3
 8001bae:	f043 0301 	orr.w	r3, r3, #1
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	2b01      	cmp	r3, #1
 8001bb6:	d105      	bne.n	8001bc4 <HAL_RCC_OscConfig+0xe3c>
 8001bb8:	4b01      	ldr	r3, [pc, #4]	; (8001bc0 <HAL_RCC_OscConfig+0xe38>)
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	e02a      	b.n	8001c14 <HAL_RCC_OscConfig+0xe8c>
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bc8:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bcc:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bd0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001bd2:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bd6:	f5a3 73de 	sub.w	r3, r3, #444	; 0x1bc
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	fa93 f2a3 	rbit	r2, r3
 8001be0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001be4:	f5a3 73e0 	sub.w	r3, r3, #448	; 0x1c0
 8001be8:	601a      	str	r2, [r3, #0]
 8001bea:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bee:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001bf2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001bf6:	601a      	str	r2, [r3, #0]
 8001bf8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001bfc:	f5a3 73e2 	sub.w	r3, r3, #452	; 0x1c4
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	fa93 f2a3 	rbit	r2, r3
 8001c06:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c0a:	f5a3 73e4 	sub.w	r3, r3, #456	; 0x1c8
 8001c0e:	601a      	str	r2, [r3, #0]
 8001c10:	4b86      	ldr	r3, [pc, #536]	; (8001e2c <HAL_RCC_OscConfig+0x10a4>)
 8001c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001c14:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c18:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c1c:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001c20:	6011      	str	r1, [r2, #0]
 8001c22:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c26:	f5a2 72e6 	sub.w	r2, r2, #460	; 0x1cc
 8001c2a:	6812      	ldr	r2, [r2, #0]
 8001c2c:	fa92 f1a2 	rbit	r1, r2
 8001c30:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c34:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c38:	6011      	str	r1, [r2, #0]
  return result;
 8001c3a:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001c3e:	f5a2 72e8 	sub.w	r2, r2, #464	; 0x1d0
 8001c42:	6812      	ldr	r2, [r2, #0]
 8001c44:	fab2 f282 	clz	r2, r2
 8001c48:	b2d2      	uxtb	r2, r2
 8001c4a:	f042 0220 	orr.w	r2, r2, #32
 8001c4e:	b2d2      	uxtb	r2, r2
 8001c50:	f002 021f 	and.w	r2, r2, #31
 8001c54:	2101      	movs	r1, #1
 8001c56:	fa01 f202 	lsl.w	r2, r1, r2
 8001c5a:	4013      	ands	r3, r2
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	f43f af7f 	beq.w	8001b60 <HAL_RCC_OscConfig+0xdd8>
 8001c62:	e0dd      	b.n	8001e20 <HAL_RCC_OscConfig+0x1098>
 8001c64:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c68:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c6c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8001c70:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c72:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c76:	f5a3 73ea 	sub.w	r3, r3, #468	; 0x1d4
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	fa93 f2a3 	rbit	r2, r3
 8001c80:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c84:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c88:	601a      	str	r2, [r3, #0]
  return result;
 8001c8a:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001c8e:	f5a3 73ec 	sub.w	r3, r3, #472	; 0x1d8
 8001c92:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c94:	fab3 f383 	clz	r3, r3
 8001c98:	b2db      	uxtb	r3, r3
 8001c9a:	f103 5384 	add.w	r3, r3, #276824064	; 0x10800000
 8001c9e:	f503 1384 	add.w	r3, r3, #1081344	; 0x108000
 8001ca2:	009b      	lsls	r3, r3, #2
 8001ca4:	461a      	mov	r2, r3
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001caa:	f7fe fdc5 	bl	8000838 <HAL_GetTick>
 8001cae:	f8c7 0200 	str.w	r0, [r7, #512]	; 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cb2:	e009      	b.n	8001cc8 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001cb4:	f7fe fdc0 	bl	8000838 <HAL_GetTick>
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f8d7 3200 	ldr.w	r3, [r7, #512]	; 0x200
 8001cbe:	1ad3      	subs	r3, r2, r3
 8001cc0:	2b02      	cmp	r3, #2
 8001cc2:	d901      	bls.n	8001cc8 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8001cc4:	2303      	movs	r3, #3
 8001cc6:	e0ac      	b.n	8001e22 <HAL_RCC_OscConfig+0x109a>
 8001cc8:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ccc:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cd0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001cd4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001cd6:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cda:	f5a3 73ee 	sub.w	r3, r3, #476	; 0x1dc
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	fa93 f2a3 	rbit	r2, r3
 8001ce4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001ce8:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cec:	601a      	str	r2, [r3, #0]
  return result;
 8001cee:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001cf2:	f5a3 73f0 	sub.w	r3, r3, #480	; 0x1e0
 8001cf6:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001cf8:	fab3 f383 	clz	r3, r3
 8001cfc:	b2db      	uxtb	r3, r3
 8001cfe:	095b      	lsrs	r3, r3, #5
 8001d00:	b2db      	uxtb	r3, r3
 8001d02:	f043 0301 	orr.w	r3, r3, #1
 8001d06:	b2db      	uxtb	r3, r3
 8001d08:	2b01      	cmp	r3, #1
 8001d0a:	d102      	bne.n	8001d12 <HAL_RCC_OscConfig+0xf8a>
 8001d0c:	4b47      	ldr	r3, [pc, #284]	; (8001e2c <HAL_RCC_OscConfig+0x10a4>)
 8001d0e:	681b      	ldr	r3, [r3, #0]
 8001d10:	e027      	b.n	8001d62 <HAL_RCC_OscConfig+0xfda>
 8001d12:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d16:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d1a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d1e:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d20:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d24:	f5a3 73f2 	sub.w	r3, r3, #484	; 0x1e4
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	fa93 f2a3 	rbit	r2, r3
 8001d2e:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d32:	f5a3 73f4 	sub.w	r3, r3, #488	; 0x1e8
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d3c:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d40:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001d44:	601a      	str	r2, [r3, #0]
 8001d46:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d4a:	f5a3 73f6 	sub.w	r3, r3, #492	; 0x1ec
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	fa93 f2a3 	rbit	r2, r3
 8001d54:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001d58:	f5a3 73f8 	sub.w	r3, r3, #496	; 0x1f0
 8001d5c:	601a      	str	r2, [r3, #0]
 8001d5e:	4b33      	ldr	r3, [pc, #204]	; (8001e2c <HAL_RCC_OscConfig+0x10a4>)
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d66:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d6a:	f04f 7100 	mov.w	r1, #33554432	; 0x2000000
 8001d6e:	6011      	str	r1, [r2, #0]
 8001d70:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d74:	f5a2 72fa 	sub.w	r2, r2, #500	; 0x1f4
 8001d78:	6812      	ldr	r2, [r2, #0]
 8001d7a:	fa92 f1a2 	rbit	r1, r2
 8001d7e:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d82:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001d86:	6011      	str	r1, [r2, #0]
  return result;
 8001d88:	f507 7202 	add.w	r2, r7, #520	; 0x208
 8001d8c:	f5a2 72fc 	sub.w	r2, r2, #504	; 0x1f8
 8001d90:	6812      	ldr	r2, [r2, #0]
 8001d92:	fab2 f282 	clz	r2, r2
 8001d96:	b2d2      	uxtb	r2, r2
 8001d98:	f042 0220 	orr.w	r2, r2, #32
 8001d9c:	b2d2      	uxtb	r2, r2
 8001d9e:	f002 021f 	and.w	r2, r2, #31
 8001da2:	2101      	movs	r1, #1
 8001da4:	fa01 f202 	lsl.w	r2, r1, r2
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d182      	bne.n	8001cb4 <HAL_RCC_OscConfig+0xf2c>
 8001dae:	e037      	b.n	8001e20 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001db0:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001db4:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	2b01      	cmp	r3, #1
 8001dbe:	d101      	bne.n	8001dc4 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8001dc0:	2301      	movs	r3, #1
 8001dc2:	e02e      	b.n	8001e22 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001dc4:	4b19      	ldr	r3, [pc, #100]	; (8001e2c <HAL_RCC_OscConfig+0x10a4>)
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f8c7 31fc 	str.w	r3, [r7, #508]	; 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8001dcc:	4b17      	ldr	r3, [pc, #92]	; (8001e2c <HAL_RCC_OscConfig+0x10a4>)
 8001dce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001dd0:	f8c7 31f8 	str.w	r3, [r7, #504]	; 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001dd4:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001dd8:	f403 32c0 	and.w	r2, r3, #98304	; 0x18000
 8001ddc:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001de0:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	69db      	ldr	r3, [r3, #28]
 8001de8:	429a      	cmp	r2, r3
 8001dea:	d117      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001dec:	f8d7 31fc 	ldr.w	r3, [r7, #508]	; 0x1fc
 8001df0:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001df4:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001df8:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8001e00:	429a      	cmp	r2, r3
 8001e02:	d10b      	bne.n	8001e1c <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 8001e04:	f8d7 31f8 	ldr.w	r3, [r7, #504]	; 0x1f8
 8001e08:	f003 020f 	and.w	r2, r3, #15
 8001e0c:	f507 7302 	add.w	r3, r7, #520	; 0x208
 8001e10:	f5a3 7301 	sub.w	r3, r3, #516	; 0x204
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	d001      	beq.n	8001e20 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	e000      	b.n	8001e22 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8001e20:	2300      	movs	r3, #0
}
 8001e22:	4618      	mov	r0, r3
 8001e24:	f507 7702 	add.w	r7, r7, #520	; 0x208
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021000 	.word	0x40021000

08001e30 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b09e      	sub	sp, #120	; 0x78
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	6078      	str	r0, [r7, #4]
 8001e38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	677b      	str	r3, [r7, #116]	; 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d101      	bne.n	8001e48 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001e44:	2301      	movs	r3, #1
 8001e46:	e162      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001e48:	4b90      	ldr	r3, [pc, #576]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	f003 0307 	and.w	r3, r3, #7
 8001e50:	683a      	ldr	r2, [r7, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	d910      	bls.n	8001e78 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e56:	4b8d      	ldr	r3, [pc, #564]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8001e58:	681b      	ldr	r3, [r3, #0]
 8001e5a:	f023 0207 	bic.w	r2, r3, #7
 8001e5e:	498b      	ldr	r1, [pc, #556]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8001e60:	683b      	ldr	r3, [r7, #0]
 8001e62:	4313      	orrs	r3, r2
 8001e64:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e66:	4b89      	ldr	r3, [pc, #548]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	f003 0307 	and.w	r3, r3, #7
 8001e6e:	683a      	ldr	r2, [r7, #0]
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e14a      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f003 0302 	and.w	r3, r3, #2
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d008      	beq.n	8001e96 <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e84:	4b82      	ldr	r3, [pc, #520]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	689b      	ldr	r3, [r3, #8]
 8001e90:	497f      	ldr	r1, [pc, #508]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001e92:	4313      	orrs	r3, r2
 8001e94:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	f003 0301 	and.w	r3, r3, #1
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	f000 80dc 	beq.w	800205c <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	685b      	ldr	r3, [r3, #4]
 8001ea8:	2b01      	cmp	r3, #1
 8001eaa:	d13c      	bne.n	8001f26 <HAL_RCC_ClockConfig+0xf6>
 8001eac:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eb0:	673b      	str	r3, [r7, #112]	; 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001eb2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001eb4:	fa93 f3a3 	rbit	r3, r3
 8001eb8:	66fb      	str	r3, [r7, #108]	; 0x6c
  return result;
 8001eba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ebc:	fab3 f383 	clz	r3, r3
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	095b      	lsrs	r3, r3, #5
 8001ec4:	b2db      	uxtb	r3, r3
 8001ec6:	f043 0301 	orr.w	r3, r3, #1
 8001eca:	b2db      	uxtb	r3, r3
 8001ecc:	2b01      	cmp	r3, #1
 8001ece:	d102      	bne.n	8001ed6 <HAL_RCC_ClockConfig+0xa6>
 8001ed0:	4b6f      	ldr	r3, [pc, #444]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	e00f      	b.n	8001ef6 <HAL_RCC_ClockConfig+0xc6>
 8001ed6:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001eda:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001edc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001ede:	fa93 f3a3 	rbit	r3, r3
 8001ee2:	667b      	str	r3, [r7, #100]	; 0x64
 8001ee4:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001ee8:	663b      	str	r3, [r7, #96]	; 0x60
 8001eea:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001eec:	fa93 f3a3 	rbit	r3, r3
 8001ef0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001ef2:	4b67      	ldr	r3, [pc, #412]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001ef4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ef6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 8001efa:	65ba      	str	r2, [r7, #88]	; 0x58
 8001efc:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8001efe:	fa92 f2a2 	rbit	r2, r2
 8001f02:	657a      	str	r2, [r7, #84]	; 0x54
  return result;
 8001f04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8001f06:	fab2 f282 	clz	r2, r2
 8001f0a:	b2d2      	uxtb	r2, r2
 8001f0c:	f042 0220 	orr.w	r2, r2, #32
 8001f10:	b2d2      	uxtb	r2, r2
 8001f12:	f002 021f 	and.w	r2, r2, #31
 8001f16:	2101      	movs	r1, #1
 8001f18:	fa01 f202 	lsl.w	r2, r1, r2
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d17b      	bne.n	800201a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e0f3      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b02      	cmp	r3, #2
 8001f2c:	d13c      	bne.n	8001fa8 <HAL_RCC_ClockConfig+0x178>
 8001f2e:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f32:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8001f3c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001f3e:	fab3 f383 	clz	r3, r3
 8001f42:	b2db      	uxtb	r3, r3
 8001f44:	095b      	lsrs	r3, r3, #5
 8001f46:	b2db      	uxtb	r3, r3
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	b2db      	uxtb	r3, r3
 8001f4e:	2b01      	cmp	r3, #1
 8001f50:	d102      	bne.n	8001f58 <HAL_RCC_ClockConfig+0x128>
 8001f52:	4b4f      	ldr	r3, [pc, #316]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	e00f      	b.n	8001f78 <HAL_RCC_ClockConfig+0x148>
 8001f58:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f5c:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f5e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001f60:	fa93 f3a3 	rbit	r3, r3
 8001f64:	647b      	str	r3, [r7, #68]	; 0x44
 8001f66:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001f6a:	643b      	str	r3, [r7, #64]	; 0x40
 8001f6c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8001f6e:	fa93 f3a3 	rbit	r3, r3
 8001f72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001f74:	4b46      	ldr	r3, [pc, #280]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f78:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8001f7c:	63ba      	str	r2, [r7, #56]	; 0x38
 8001f7e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001f80:	fa92 f2a2 	rbit	r2, r2
 8001f84:	637a      	str	r2, [r7, #52]	; 0x34
  return result;
 8001f86:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001f88:	fab2 f282 	clz	r2, r2
 8001f8c:	b2d2      	uxtb	r2, r2
 8001f8e:	f042 0220 	orr.w	r2, r2, #32
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	f002 021f 	and.w	r2, r2, #31
 8001f98:	2101      	movs	r1, #1
 8001f9a:	fa01 f202 	lsl.w	r2, r1, r2
 8001f9e:	4013      	ands	r3, r2
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d13a      	bne.n	800201a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8001fa4:	2301      	movs	r3, #1
 8001fa6:	e0b2      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
 8001fa8:	2302      	movs	r3, #2
 8001faa:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001fae:	fa93 f3a3 	rbit	r3, r3
 8001fb2:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8001fb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001fb6:	fab3 f383 	clz	r3, r3
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	095b      	lsrs	r3, r3, #5
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	f043 0301 	orr.w	r3, r3, #1
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	2b01      	cmp	r3, #1
 8001fc8:	d102      	bne.n	8001fd0 <HAL_RCC_ClockConfig+0x1a0>
 8001fca:	4b31      	ldr	r3, [pc, #196]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	e00d      	b.n	8001fec <HAL_RCC_ClockConfig+0x1bc>
 8001fd0:	2302      	movs	r3, #2
 8001fd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	fa93 f3a3 	rbit	r3, r3
 8001fda:	627b      	str	r3, [r7, #36]	; 0x24
 8001fdc:	2302      	movs	r3, #2
 8001fde:	623b      	str	r3, [r7, #32]
 8001fe0:	6a3b      	ldr	r3, [r7, #32]
 8001fe2:	fa93 f3a3 	rbit	r3, r3
 8001fe6:	61fb      	str	r3, [r7, #28]
 8001fe8:	4b29      	ldr	r3, [pc, #164]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8001fea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fec:	2202      	movs	r2, #2
 8001fee:	61ba      	str	r2, [r7, #24]
 8001ff0:	69ba      	ldr	r2, [r7, #24]
 8001ff2:	fa92 f2a2 	rbit	r2, r2
 8001ff6:	617a      	str	r2, [r7, #20]
  return result;
 8001ff8:	697a      	ldr	r2, [r7, #20]
 8001ffa:	fab2 f282 	clz	r2, r2
 8001ffe:	b2d2      	uxtb	r2, r2
 8002000:	f042 0220 	orr.w	r2, r2, #32
 8002004:	b2d2      	uxtb	r2, r2
 8002006:	f002 021f 	and.w	r2, r2, #31
 800200a:	2101      	movs	r1, #1
 800200c:	fa01 f202 	lsl.w	r2, r1, r2
 8002010:	4013      	ands	r3, r2
 8002012:	2b00      	cmp	r3, #0
 8002014:	d101      	bne.n	800201a <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8002016:	2301      	movs	r3, #1
 8002018:	e079      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800201a:	4b1d      	ldr	r3, [pc, #116]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 800201c:	685b      	ldr	r3, [r3, #4]
 800201e:	f023 0203 	bic.w	r2, r3, #3
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	491a      	ldr	r1, [pc, #104]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 8002028:	4313      	orrs	r3, r2
 800202a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800202c:	f7fe fc04 	bl	8000838 <HAL_GetTick>
 8002030:	6778      	str	r0, [r7, #116]	; 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002032:	e00a      	b.n	800204a <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002034:	f7fe fc00 	bl	8000838 <HAL_GetTick>
 8002038:	4602      	mov	r2, r0
 800203a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800203c:	1ad3      	subs	r3, r2, r3
 800203e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002042:	4293      	cmp	r3, r2
 8002044:	d901      	bls.n	800204a <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 8002046:	2303      	movs	r3, #3
 8002048:	e061      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800204a:	4b11      	ldr	r3, [pc, #68]	; (8002090 <HAL_RCC_ClockConfig+0x260>)
 800204c:	685b      	ldr	r3, [r3, #4]
 800204e:	f003 020c 	and.w	r2, r3, #12
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	685b      	ldr	r3, [r3, #4]
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	429a      	cmp	r2, r3
 800205a:	d1eb      	bne.n	8002034 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800205c:	4b0b      	ldr	r3, [pc, #44]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0307 	and.w	r3, r3, #7
 8002064:	683a      	ldr	r2, [r7, #0]
 8002066:	429a      	cmp	r2, r3
 8002068:	d214      	bcs.n	8002094 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800206a:	4b08      	ldr	r3, [pc, #32]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 800206c:	681b      	ldr	r3, [r3, #0]
 800206e:	f023 0207 	bic.w	r2, r3, #7
 8002072:	4906      	ldr	r1, [pc, #24]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 8002074:	683b      	ldr	r3, [r7, #0]
 8002076:	4313      	orrs	r3, r2
 8002078:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800207a:	4b04      	ldr	r3, [pc, #16]	; (800208c <HAL_RCC_ClockConfig+0x25c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f003 0307 	and.w	r3, r3, #7
 8002082:	683a      	ldr	r2, [r7, #0]
 8002084:	429a      	cmp	r2, r3
 8002086:	d005      	beq.n	8002094 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 8002088:	2301      	movs	r3, #1
 800208a:	e040      	b.n	800210e <HAL_RCC_ClockConfig+0x2de>
 800208c:	40022000 	.word	0x40022000
 8002090:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	f003 0304 	and.w	r3, r3, #4
 800209c:	2b00      	cmp	r3, #0
 800209e:	d008      	beq.n	80020b2 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80020a0:	4b1d      	ldr	r3, [pc, #116]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	68db      	ldr	r3, [r3, #12]
 80020ac:	491a      	ldr	r1, [pc, #104]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020ae:	4313      	orrs	r3, r2
 80020b0:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d009      	beq.n	80020d2 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80020be:	4b16      	ldr	r3, [pc, #88]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020c0:	685b      	ldr	r3, [r3, #4]
 80020c2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	691b      	ldr	r3, [r3, #16]
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4912      	ldr	r1, [pc, #72]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020ce:	4313      	orrs	r3, r2
 80020d0:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80020d2:	f000 f829 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 80020d6:	4601      	mov	r1, r0
 80020d8:	4b0f      	ldr	r3, [pc, #60]	; (8002118 <HAL_RCC_ClockConfig+0x2e8>)
 80020da:	685b      	ldr	r3, [r3, #4]
 80020dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80020e0:	22f0      	movs	r2, #240	; 0xf0
 80020e2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80020e4:	693a      	ldr	r2, [r7, #16]
 80020e6:	fa92 f2a2 	rbit	r2, r2
 80020ea:	60fa      	str	r2, [r7, #12]
  return result;
 80020ec:	68fa      	ldr	r2, [r7, #12]
 80020ee:	fab2 f282 	clz	r2, r2
 80020f2:	b2d2      	uxtb	r2, r2
 80020f4:	40d3      	lsrs	r3, r2
 80020f6:	4a09      	ldr	r2, [pc, #36]	; (800211c <HAL_RCC_ClockConfig+0x2ec>)
 80020f8:	5cd3      	ldrb	r3, [r2, r3]
 80020fa:	fa21 f303 	lsr.w	r3, r1, r3
 80020fe:	4a08      	ldr	r2, [pc, #32]	; (8002120 <HAL_RCC_ClockConfig+0x2f0>)
 8002100:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 8002102:	4b08      	ldr	r3, [pc, #32]	; (8002124 <HAL_RCC_ClockConfig+0x2f4>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7fe fb52 	bl	80007b0 <HAL_InitTick>
  
  return HAL_OK;
 800210c:	2300      	movs	r3, #0
}
 800210e:	4618      	mov	r0, r3
 8002110:	3778      	adds	r7, #120	; 0x78
 8002112:	46bd      	mov	sp, r7
 8002114:	bd80      	pop	{r7, pc}
 8002116:	bf00      	nop
 8002118:	40021000 	.word	0x40021000
 800211c:	0800448c 	.word	0x0800448c
 8002120:	20000000 	.word	0x20000000
 8002124:	20000004 	.word	0x20000004

08002128 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002128:	b480      	push	{r7}
 800212a:	b08b      	sub	sp, #44	; 0x2c
 800212c:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800212e:	2300      	movs	r3, #0
 8002130:	61fb      	str	r3, [r7, #28]
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
 8002136:	2300      	movs	r3, #0
 8002138:	627b      	str	r3, [r7, #36]	; 0x24
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800213e:	2300      	movs	r3, #0
 8002140:	623b      	str	r3, [r7, #32]
  
  tmpreg = RCC->CFGR;
 8002142:	4b2a      	ldr	r3, [pc, #168]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	61fb      	str	r3, [r7, #28]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002148:	69fb      	ldr	r3, [r7, #28]
 800214a:	f003 030c 	and.w	r3, r3, #12
 800214e:	2b04      	cmp	r3, #4
 8002150:	d002      	beq.n	8002158 <HAL_RCC_GetSysClockFreq+0x30>
 8002152:	2b08      	cmp	r3, #8
 8002154:	d003      	beq.n	800215e <HAL_RCC_GetSysClockFreq+0x36>
 8002156:	e03f      	b.n	80021d8 <HAL_RCC_GetSysClockFreq+0xb0>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002158:	4b25      	ldr	r3, [pc, #148]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 800215a:	623b      	str	r3, [r7, #32]
      break;
 800215c:	e03f      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> POSITION_VAL(RCC_CFGR_PLLMUL)];
 800215e:	69fb      	ldr	r3, [r7, #28]
 8002160:	f403 1370 	and.w	r3, r3, #3932160	; 0x3c0000
 8002164:	f44f 1270 	mov.w	r2, #3932160	; 0x3c0000
 8002168:	60ba      	str	r2, [r7, #8]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	68ba      	ldr	r2, [r7, #8]
 800216c:	fa92 f2a2 	rbit	r2, r2
 8002170:	607a      	str	r2, [r7, #4]
  return result;
 8002172:	687a      	ldr	r2, [r7, #4]
 8002174:	fab2 f282 	clz	r2, r2
 8002178:	b2d2      	uxtb	r2, r2
 800217a:	40d3      	lsrs	r3, r2
 800217c:	4a1d      	ldr	r2, [pc, #116]	; (80021f4 <HAL_RCC_GetSysClockFreq+0xcc>)
 800217e:	5cd3      	ldrb	r3, [r2, r3]
 8002180:	617b      	str	r3, [r7, #20]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> POSITION_VAL(RCC_CFGR2_PREDIV)];
 8002182:	4b1a      	ldr	r3, [pc, #104]	; (80021ec <HAL_RCC_GetSysClockFreq+0xc4>)
 8002184:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002186:	f003 030f 	and.w	r3, r3, #15
 800218a:	220f      	movs	r2, #15
 800218c:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800218e:	693a      	ldr	r2, [r7, #16]
 8002190:	fa92 f2a2 	rbit	r2, r2
 8002194:	60fa      	str	r2, [r7, #12]
  return result;
 8002196:	68fa      	ldr	r2, [r7, #12]
 8002198:	fab2 f282 	clz	r2, r2
 800219c:	b2d2      	uxtb	r2, r2
 800219e:	40d3      	lsrs	r3, r2
 80021a0:	4a15      	ldr	r2, [pc, #84]	; (80021f8 <HAL_RCC_GetSysClockFreq+0xd0>)
 80021a2:	5cd3      	ldrb	r3, [r2, r3]
 80021a4:	61bb      	str	r3, [r7, #24]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80021a6:	69fb      	ldr	r3, [r7, #28]
 80021a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d008      	beq.n	80021c2 <HAL_RCC_GetSysClockFreq+0x9a>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021b0:	4a0f      	ldr	r2, [pc, #60]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021b2:	69bb      	ldr	r3, [r7, #24]
 80021b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80021b8:	697b      	ldr	r3, [r7, #20]
 80021ba:	fb02 f303 	mul.w	r3, r2, r3
 80021be:	627b      	str	r3, [r7, #36]	; 0x24
 80021c0:	e007      	b.n	80021d2 <HAL_RCC_GetSysClockFreq+0xaa>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80021c2:	4a0b      	ldr	r2, [pc, #44]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021c4:	69bb      	ldr	r3, [r7, #24]
 80021c6:	fbb2 f2f3 	udiv	r2, r2, r3
 80021ca:	697b      	ldr	r3, [r7, #20]
 80021cc:	fb02 f303 	mul.w	r3, r2, r3
 80021d0:	627b      	str	r3, [r7, #36]	; 0x24
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80021d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021d4:	623b      	str	r3, [r7, #32]
      break;
 80021d6:	e002      	b.n	80021de <HAL_RCC_GetSysClockFreq+0xb6>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80021d8:	4b05      	ldr	r3, [pc, #20]	; (80021f0 <HAL_RCC_GetSysClockFreq+0xc8>)
 80021da:	623b      	str	r3, [r7, #32]
      break;
 80021dc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80021de:	6a3b      	ldr	r3, [r7, #32]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	372c      	adds	r7, #44	; 0x2c
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	40021000 	.word	0x40021000
 80021f0:	007a1200 	.word	0x007a1200
 80021f4:	080044a4 	.word	0x080044a4
 80021f8:	080044b4 	.word	0x080044b4

080021fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80021fc:	b480      	push	{r7}
 80021fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002200:	4b03      	ldr	r3, [pc, #12]	; (8002210 <HAL_RCC_GetHCLKFreq+0x14>)
 8002202:	681b      	ldr	r3, [r3, #0]
}
 8002204:	4618      	mov	r0, r3
 8002206:	46bd      	mov	sp, r7
 8002208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800220c:	4770      	bx	lr
 800220e:	bf00      	nop
 8002210:	20000000 	.word	0x20000000

08002214 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b082      	sub	sp, #8
 8002218:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 800221a:	f7ff ffef 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 800221e:	4601      	mov	r1, r0
 8002220:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_GetPCLK1Freq+0x3c>)
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8002228:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800222c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800222e:	687a      	ldr	r2, [r7, #4]
 8002230:	fa92 f2a2 	rbit	r2, r2
 8002234:	603a      	str	r2, [r7, #0]
  return result;
 8002236:	683a      	ldr	r2, [r7, #0]
 8002238:	fab2 f282 	clz	r2, r2
 800223c:	b2d2      	uxtb	r2, r2
 800223e:	40d3      	lsrs	r3, r2
 8002240:	4a04      	ldr	r2, [pc, #16]	; (8002254 <HAL_RCC_GetPCLK1Freq+0x40>)
 8002242:	5cd3      	ldrb	r3, [r2, r3]
 8002244:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8002248:	4618      	mov	r0, r3
 800224a:	3708      	adds	r7, #8
 800224c:	46bd      	mov	sp, r7
 800224e:	bd80      	pop	{r7, pc}
 8002250:	40021000 	.word	0x40021000
 8002254:	0800449c 	.word	0x0800449c

08002258 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	b082      	sub	sp, #8
 800225c:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800225e:	f7ff ffcd 	bl	80021fc <HAL_RCC_GetHCLKFreq>
 8002262:	4601      	mov	r1, r0
 8002264:	4b0b      	ldr	r3, [pc, #44]	; (8002294 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 5360 	and.w	r3, r3, #14336	; 0x3800
 800226c:	f44f 5260 	mov.w	r2, #14336	; 0x3800
 8002270:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002272:	687a      	ldr	r2, [r7, #4]
 8002274:	fa92 f2a2 	rbit	r2, r2
 8002278:	603a      	str	r2, [r7, #0]
  return result;
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	fab2 f282 	clz	r2, r2
 8002280:	b2d2      	uxtb	r2, r2
 8002282:	40d3      	lsrs	r3, r2
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_RCC_GetPCLK2Freq+0x40>)
 8002286:	5cd3      	ldrb	r3, [r2, r3]
 8002288:	fa21 f303 	lsr.w	r3, r1, r3
} 
 800228c:	4618      	mov	r0, r3
 800228e:	3708      	adds	r7, #8
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	40021000 	.word	0x40021000
 8002298:	0800449c 	.word	0x0800449c

0800229c <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b092      	sub	sp, #72	; 0x48
 80022a0:	af00      	add	r7, sp, #0
 80022a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80022a4:	2300      	movs	r3, #0
 80022a6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t temp_reg = 0U;
 80022a8:	2300      	movs	r3, #0
 80022aa:	63fb      	str	r3, [r7, #60]	; 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80022ac:	2300      	movs	r3, #0
 80022ae:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	f000 80d4 	beq.w	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022c0:	4b4e      	ldr	r3, [pc, #312]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022c2:	69db      	ldr	r3, [r3, #28]
 80022c4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d10e      	bne.n	80022ea <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022cc:	4b4b      	ldr	r3, [pc, #300]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022ce:	69db      	ldr	r3, [r3, #28]
 80022d0:	4a4a      	ldr	r2, [pc, #296]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022d2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022d6:	61d3      	str	r3, [r2, #28]
 80022d8:	4b48      	ldr	r3, [pc, #288]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80022da:	69db      	ldr	r3, [r3, #28]
 80022dc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022e0:	60bb      	str	r3, [r7, #8]
 80022e2:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022e4:	2301      	movs	r3, #1
 80022e6:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ea:	4b45      	ldr	r3, [pc, #276]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d118      	bne.n	8002328 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022f6:	4b42      	ldr	r3, [pc, #264]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	4a41      	ldr	r2, [pc, #260]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80022fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002300:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002302:	f7fe fa99 	bl	8000838 <HAL_GetTick>
 8002306:	6438      	str	r0, [r7, #64]	; 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002308:	e008      	b.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800230a:	f7fe fa95 	bl	8000838 <HAL_GetTick>
 800230e:	4602      	mov	r2, r0
 8002310:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002312:	1ad3      	subs	r3, r2, r3
 8002314:	2b64      	cmp	r3, #100	; 0x64
 8002316:	d901      	bls.n	800231c <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8002318:	2303      	movs	r3, #3
 800231a:	e1d6      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800231c:	4b38      	ldr	r3, [pc, #224]	; (8002400 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002324:	2b00      	cmp	r3, #0
 8002326:	d0f0      	beq.n	800230a <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002328:	4b34      	ldr	r3, [pc, #208]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800232a:	6a1b      	ldr	r3, [r3, #32]
 800232c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002330:	63fb      	str	r3, [r7, #60]	; 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002334:	2b00      	cmp	r3, #0
 8002336:	f000 8084 	beq.w	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002342:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8002344:	429a      	cmp	r2, r3
 8002346:	d07c      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002348:	4b2c      	ldr	r3, [pc, #176]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800234a:	6a1b      	ldr	r3, [r3, #32]
 800234c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002350:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002352:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002356:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002358:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800235a:	fa93 f3a3 	rbit	r3, r3
 800235e:	62fb      	str	r3, [r7, #44]	; 0x2c
  return result;
 8002360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002362:	fab3 f383 	clz	r3, r3
 8002366:	b2db      	uxtb	r3, r3
 8002368:	461a      	mov	r2, r3
 800236a:	4b26      	ldr	r3, [pc, #152]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800236c:	4413      	add	r3, r2
 800236e:	009b      	lsls	r3, r3, #2
 8002370:	461a      	mov	r2, r3
 8002372:	2301      	movs	r3, #1
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800237a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002384:	6b7b      	ldr	r3, [r7, #52]	; 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002386:	fab3 f383 	clz	r3, r3
 800238a:	b2db      	uxtb	r3, r3
 800238c:	461a      	mov	r2, r3
 800238e:	4b1d      	ldr	r3, [pc, #116]	; (8002404 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002390:	4413      	add	r3, r2
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	461a      	mov	r2, r3
 8002396:	2300      	movs	r3, #0
 8002398:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 800239a:	4a18      	ldr	r2, [pc, #96]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800239c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800239e:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 80023a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80023a2:	f003 0301 	and.w	r3, r3, #1
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d04b      	beq.n	8002442 <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023aa:	f7fe fa45 	bl	8000838 <HAL_GetTick>
 80023ae:	6438      	str	r0, [r7, #64]	; 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	e00a      	b.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023b2:	f7fe fa41 	bl	8000838 <HAL_GetTick>
 80023b6:	4602      	mov	r2, r0
 80023b8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80023ba:	1ad3      	subs	r3, r2, r3
 80023bc:	f241 3288 	movw	r2, #5000	; 0x1388
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d901      	bls.n	80023c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80023c4:	2303      	movs	r3, #3
 80023c6:	e180      	b.n	80026ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80023c8:	2302      	movs	r3, #2
 80023ca:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80023ce:	fa93 f3a3 	rbit	r3, r3
 80023d2:	627b      	str	r3, [r7, #36]	; 0x24
 80023d4:	2302      	movs	r3, #2
 80023d6:	623b      	str	r3, [r7, #32]
 80023d8:	6a3b      	ldr	r3, [r7, #32]
 80023da:	fa93 f3a3 	rbit	r3, r3
 80023de:	61fb      	str	r3, [r7, #28]
  return result;
 80023e0:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023e2:	fab3 f383 	clz	r3, r3
 80023e6:	b2db      	uxtb	r3, r3
 80023e8:	095b      	lsrs	r3, r3, #5
 80023ea:	b2db      	uxtb	r3, r3
 80023ec:	f043 0302 	orr.w	r3, r3, #2
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	2b02      	cmp	r3, #2
 80023f4:	d108      	bne.n	8002408 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80023f6:	4b01      	ldr	r3, [pc, #4]	; (80023fc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	e00d      	b.n	8002418 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80023fc:	40021000 	.word	0x40021000
 8002400:	40007000 	.word	0x40007000
 8002404:	10908100 	.word	0x10908100
 8002408:	2302      	movs	r3, #2
 800240a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800240c:	69bb      	ldr	r3, [r7, #24]
 800240e:	fa93 f3a3 	rbit	r3, r3
 8002412:	617b      	str	r3, [r7, #20]
 8002414:	4b9a      	ldr	r3, [pc, #616]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002418:	2202      	movs	r2, #2
 800241a:	613a      	str	r2, [r7, #16]
 800241c:	693a      	ldr	r2, [r7, #16]
 800241e:	fa92 f2a2 	rbit	r2, r2
 8002422:	60fa      	str	r2, [r7, #12]
  return result;
 8002424:	68fa      	ldr	r2, [r7, #12]
 8002426:	fab2 f282 	clz	r2, r2
 800242a:	b2d2      	uxtb	r2, r2
 800242c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002430:	b2d2      	uxtb	r2, r2
 8002432:	f002 021f 	and.w	r2, r2, #31
 8002436:	2101      	movs	r1, #1
 8002438:	fa01 f202 	lsl.w	r2, r1, r2
 800243c:	4013      	ands	r3, r2
 800243e:	2b00      	cmp	r3, #0
 8002440:	d0b7      	beq.n	80023b2 <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 8002442:	4b8f      	ldr	r3, [pc, #572]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002444:	6a1b      	ldr	r3, [r3, #32]
 8002446:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685b      	ldr	r3, [r3, #4]
 800244e:	498c      	ldr	r1, [pc, #560]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002450:	4313      	orrs	r3, r2
 8002452:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8002454:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8002458:	2b01      	cmp	r3, #1
 800245a:	d105      	bne.n	8002468 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800245c:	4b88      	ldr	r3, [pc, #544]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800245e:	69db      	ldr	r3, [r3, #28]
 8002460:	4a87      	ldr	r2, [pc, #540]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002462:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002466:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f003 0301 	and.w	r3, r3, #1
 8002470:	2b00      	cmp	r3, #0
 8002472:	d008      	beq.n	8002486 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002474:	4b82      	ldr	r3, [pc, #520]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002478:	f023 0203 	bic.w	r2, r3, #3
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	497f      	ldr	r1, [pc, #508]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002482:	4313      	orrs	r3, r2
 8002484:	630b      	str	r3, [r1, #48]	; 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 0302 	and.w	r3, r3, #2
 800248e:	2b00      	cmp	r3, #0
 8002490:	d008      	beq.n	80024a4 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002492:	4b7b      	ldr	r3, [pc, #492]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002494:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002496:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	68db      	ldr	r3, [r3, #12]
 800249e:	4978      	ldr	r1, [pc, #480]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d008      	beq.n	80024c2 <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80024b0:	4b73      	ldr	r3, [pc, #460]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024b4:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	691b      	ldr	r3, [r3, #16]
 80024bc:	4970      	ldr	r1, [pc, #448]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024be:	4313      	orrs	r3, r2
 80024c0:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	681b      	ldr	r3, [r3, #0]
 80024c6:	f003 0320 	and.w	r3, r3, #32
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	d008      	beq.n	80024e0 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80024ce:	4b6c      	ldr	r3, [pc, #432]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024d2:	f023 0210 	bic.w	r2, r3, #16
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	69db      	ldr	r3, [r3, #28]
 80024da:	4969      	ldr	r1, [pc, #420]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	630b      	str	r3, [r1, #48]	; 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024e8:	2b00      	cmp	r3, #0
 80024ea:	d008      	beq.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80024ec:	4b64      	ldr	r3, [pc, #400]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80024f8:	4961      	ldr	r1, [pc, #388]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80024fa:	4313      	orrs	r3, r2
 80024fc:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002506:	2b00      	cmp	r3, #0
 8002508:	d008      	beq.n	800251c <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800250a:	4b5d      	ldr	r3, [pc, #372]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800250c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800250e:	f023 0220 	bic.w	r2, r3, #32
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	6a1b      	ldr	r3, [r3, #32]
 8002516:	495a      	ldr	r1, [pc, #360]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002518:	4313      	orrs	r3, r2
 800251a:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002524:	2b00      	cmp	r3, #0
 8002526:	d008      	beq.n	800253a <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002528:	4b55      	ldr	r3, [pc, #340]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800252a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800252c:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002534:	4952      	ldr	r1, [pc, #328]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002536:	4313      	orrs	r3, r2
 8002538:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	f003 0308 	and.w	r3, r3, #8
 8002542:	2b00      	cmp	r3, #0
 8002544:	d008      	beq.n	8002558 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002546:	4b4e      	ldr	r3, [pc, #312]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002548:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	695b      	ldr	r3, [r3, #20]
 8002552:	494b      	ldr	r1, [pc, #300]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002554:	4313      	orrs	r3, r2
 8002556:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	f003 0310 	and.w	r3, r3, #16
 8002560:	2b00      	cmp	r3, #0
 8002562:	d008      	beq.n	8002576 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002564:	4b46      	ldr	r3, [pc, #280]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002566:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002568:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	4943      	ldr	r1, [pc, #268]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002572:	4313      	orrs	r3, r2
 8002574:	630b      	str	r3, [r1, #48]	; 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800257e:	2b00      	cmp	r3, #0
 8002580:	d008      	beq.n	8002594 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002582:	4b3f      	ldr	r3, [pc, #252]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800258e:	493c      	ldr	r1, [pc, #240]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002590:	4313      	orrs	r3, r2
 8002592:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800259c:	2b00      	cmp	r3, #0
 800259e:	d008      	beq.n	80025b2 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80025a0:	4b37      	ldr	r3, [pc, #220]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025a4:	f423 72f8 	bic.w	r2, r3, #496	; 0x1f0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025ac:	4934      	ldr	r1, [pc, #208]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	62cb      	str	r3, [r1, #44]	; 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d008      	beq.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80025be:	4b30      	ldr	r3, [pc, #192]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025c0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025c2:	f423 5278 	bic.w	r2, r3, #15872	; 0x3e00
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ca:	492d      	ldr	r1, [pc, #180]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025cc:	4313      	orrs	r3, r2
 80025ce:	62cb      	str	r3, [r1, #44]	; 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80025d8:	2b00      	cmp	r3, #0
 80025da:	d008      	beq.n	80025ee <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80025dc:	4b28      	ldr	r3, [pc, #160]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80025e8:	4925      	ldr	r1, [pc, #148]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025ea:	4313      	orrs	r3, r2
 80025ec:	630b      	str	r3, [r1, #48]	; 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d008      	beq.n	800260c <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80025fa:	4b21      	ldr	r3, [pc, #132]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002606:	491e      	ldr	r1, [pc, #120]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002608:	4313      	orrs	r3, r2
 800260a:	630b      	str	r3, [r1, #48]	; 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 800260c:	687b      	ldr	r3, [r7, #4]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002614:	2b00      	cmp	r3, #0
 8002616:	d008      	beq.n	800262a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8002618:	4b19      	ldr	r3, [pc, #100]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800261a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800261c:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002624:	4916      	ldr	r1, [pc, #88]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002626:	4313      	orrs	r3, r2
 8002628:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002632:	2b00      	cmp	r3, #0
 8002634:	d008      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8002636:	4b12      	ldr	r3, [pc, #72]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800263a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002642:	490f      	ldr	r1, [pc, #60]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002644:	4313      	orrs	r3, r2
 8002646:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002650:	2b00      	cmp	r3, #0
 8002652:	d008      	beq.n	8002666 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8002654:	4b0a      	ldr	r3, [pc, #40]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002658:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002660:	4907      	ldr	r1, [pc, #28]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002662:	4313      	orrs	r3, r2
 8002664:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d00c      	beq.n	800268c <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8002672:	4b03      	ldr	r3, [pc, #12]	; (8002680 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8002674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002676:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	e002      	b.n	8002684 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800267e:	bf00      	nop
 8002680:	40021000 	.word	0x40021000
 8002684:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002686:	4913      	ldr	r1, [pc, #76]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8002688:	4313      	orrs	r3, r2
 800268a:	630b      	str	r3, [r1, #48]	; 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8002698:	4b0e      	ldr	r3, [pc, #56]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 800269a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026a4:	490b      	ldr	r1, [pc, #44]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026a6:	4313      	orrs	r3, r2
 80026a8:	630b      	str	r3, [r1, #48]	; 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	681b      	ldr	r3, [r3, #0]
 80026ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d008      	beq.n	80026c8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80026b6:	4b07      	ldr	r3, [pc, #28]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ba:	f423 4200 	bic.w	r2, r3, #32768	; 0x8000
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026c2:	4904      	ldr	r1, [pc, #16]	; (80026d4 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80026c4:	4313      	orrs	r3, r2
 80026c6:	630b      	str	r3, [r1, #48]	; 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	3748      	adds	r7, #72	; 0x48
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bd80      	pop	{r7, pc}
 80026d2:	bf00      	nop
 80026d4:	40021000 	.word	0x40021000

080026d8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80026d8:	b580      	push	{r7, lr}
 80026da:	b082      	sub	sp, #8
 80026dc:	af00      	add	r7, sp, #0
 80026de:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d101      	bne.n	80026ea <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80026e6:	2301      	movs	r3, #1
 80026e8:	e049      	b.n	800277e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d106      	bne.n	8002704 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2200      	movs	r2, #0
 80026fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80026fe:	6878      	ldr	r0, [r7, #4]
 8002700:	f7fd ff36 	bl	8000570 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	2202      	movs	r2, #2
 8002708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3304      	adds	r3, #4
 8002714:	4619      	mov	r1, r3
 8002716:	4610      	mov	r0, r2
 8002718:	f000 fd3a 	bl	8003190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	2201      	movs	r2, #1
 8002720:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2201      	movs	r2, #1
 8002728:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	2201      	movs	r2, #1
 8002730:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	2201      	movs	r2, #1
 8002738:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	2201      	movs	r2, #1
 8002740:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2201      	movs	r2, #1
 8002748:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	2201      	movs	r2, #1
 8002750:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2201      	movs	r2, #1
 8002758:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2201      	movs	r2, #1
 8002760:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	2201      	movs	r2, #1
 8002768:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	2201      	movs	r2, #1
 8002770:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2201      	movs	r2, #1
 8002778:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800277c:	2300      	movs	r3, #0
}
 800277e:	4618      	mov	r0, r3
 8002780:	3708      	adds	r7, #8
 8002782:	46bd      	mov	sp, r7
 8002784:	bd80      	pop	{r7, pc}
	...

08002788 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002788:	b480      	push	{r7}
 800278a:	b085      	sub	sp, #20
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b01      	cmp	r3, #1
 800279a:	d001      	beq.n	80027a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	e04f      	b.n	8002840 <HAL_TIM_Base_Start_IT+0xb8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	68da      	ldr	r2, [r3, #12]
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f042 0201 	orr.w	r2, r2, #1
 80027b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a23      	ldr	r2, [pc, #140]	; (800284c <HAL_TIM_Base_Start_IT+0xc4>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d01d      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x76>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80027ca:	d018      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x76>
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a1f      	ldr	r2, [pc, #124]	; (8002850 <HAL_TIM_Base_Start_IT+0xc8>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d013      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x76>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4a1e      	ldr	r2, [pc, #120]	; (8002854 <HAL_TIM_Base_Start_IT+0xcc>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d00e      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x76>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a1c      	ldr	r2, [pc, #112]	; (8002858 <HAL_TIM_Base_Start_IT+0xd0>)
 80027e6:	4293      	cmp	r3, r2
 80027e8:	d009      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x76>
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a1b      	ldr	r2, [pc, #108]	; (800285c <HAL_TIM_Base_Start_IT+0xd4>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d004      	beq.n	80027fe <HAL_TIM_Base_Start_IT+0x76>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	4a19      	ldr	r2, [pc, #100]	; (8002860 <HAL_TIM_Base_Start_IT+0xd8>)
 80027fa:	4293      	cmp	r3, r2
 80027fc:	d115      	bne.n	800282a <HAL_TIM_Base_Start_IT+0xa2>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	689a      	ldr	r2, [r3, #8]
 8002804:	4b17      	ldr	r3, [pc, #92]	; (8002864 <HAL_TIM_Base_Start_IT+0xdc>)
 8002806:	4013      	ands	r3, r2
 8002808:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2b06      	cmp	r3, #6
 800280e:	d015      	beq.n	800283c <HAL_TIM_Base_Start_IT+0xb4>
 8002810:	68fb      	ldr	r3, [r7, #12]
 8002812:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002816:	d011      	beq.n	800283c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	f042 0201 	orr.w	r2, r2, #1
 8002826:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002828:	e008      	b.n	800283c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	681a      	ldr	r2, [r3, #0]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 0201 	orr.w	r2, r2, #1
 8002838:	601a      	str	r2, [r3, #0]
 800283a:	e000      	b.n	800283e <HAL_TIM_Base_Start_IT+0xb6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800283c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800283e:	2300      	movs	r3, #0
}
 8002840:	4618      	mov	r0, r3
 8002842:	3714      	adds	r7, #20
 8002844:	46bd      	mov	sp, r7
 8002846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284a:	4770      	bx	lr
 800284c:	40012c00 	.word	0x40012c00
 8002850:	40000400 	.word	0x40000400
 8002854:	40000800 	.word	0x40000800
 8002858:	40013400 	.word	0x40013400
 800285c:	40014000 	.word	0x40014000
 8002860:	40015000 	.word	0x40015000
 8002864:	00010007 	.word	0x00010007

08002868 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b082      	sub	sp, #8
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2b00      	cmp	r3, #0
 8002874:	d101      	bne.n	800287a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002876:	2301      	movs	r3, #1
 8002878:	e049      	b.n	800290e <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002880:	b2db      	uxtb	r3, r3
 8002882:	2b00      	cmp	r3, #0
 8002884:	d106      	bne.n	8002894 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	2200      	movs	r2, #0
 800288a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800288e:	6878      	ldr	r0, [r7, #4]
 8002890:	f000 f841 	bl	8002916 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	2202      	movs	r2, #2
 8002898:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681a      	ldr	r2, [r3, #0]
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	3304      	adds	r3, #4
 80028a4:	4619      	mov	r1, r3
 80028a6:	4610      	mov	r0, r2
 80028a8:	f000 fc72 	bl	8003190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	2201      	movs	r2, #1
 80028b0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	2201      	movs	r2, #1
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	2201      	movs	r2, #1
 80028c0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	2201      	movs	r2, #1
 80028d0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2201      	movs	r2, #1
 80028d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	2201      	movs	r2, #1
 80028e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2201      	movs	r2, #1
 80028e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	2201      	movs	r2, #1
 80028f0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2201      	movs	r2, #1
 80028f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800290c:	2300      	movs	r3, #0
}
 800290e:	4618      	mov	r0, r3
 8002910:	3708      	adds	r7, #8
 8002912:	46bd      	mov	sp, r7
 8002914:	bd80      	pop	{r7, pc}

08002916 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002916:	b480      	push	{r7}
 8002918:	b083      	sub	sp, #12
 800291a:	af00      	add	r7, sp, #0
 800291c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800291e:	bf00      	nop
 8002920:	370c      	adds	r7, #12
 8002922:	46bd      	mov	sp, r7
 8002924:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002928:	4770      	bx	lr
	...

0800292c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected (*)
  *         (*) Value not defined for all devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b084      	sub	sp, #16
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
 8002934:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b00      	cmp	r3, #0
 800293a:	d109      	bne.n	8002950 <HAL_TIM_PWM_Start+0x24>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002942:	b2db      	uxtb	r3, r3
 8002944:	2b01      	cmp	r3, #1
 8002946:	bf14      	ite	ne
 8002948:	2301      	movne	r3, #1
 800294a:	2300      	moveq	r3, #0
 800294c:	b2db      	uxtb	r3, r3
 800294e:	e03c      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 8002950:	683b      	ldr	r3, [r7, #0]
 8002952:	2b04      	cmp	r3, #4
 8002954:	d109      	bne.n	800296a <HAL_TIM_PWM_Start+0x3e>
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800295c:	b2db      	uxtb	r3, r3
 800295e:	2b01      	cmp	r3, #1
 8002960:	bf14      	ite	ne
 8002962:	2301      	movne	r3, #1
 8002964:	2300      	moveq	r3, #0
 8002966:	b2db      	uxtb	r3, r3
 8002968:	e02f      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 800296a:	683b      	ldr	r3, [r7, #0]
 800296c:	2b08      	cmp	r3, #8
 800296e:	d109      	bne.n	8002984 <HAL_TIM_PWM_Start+0x58>
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002976:	b2db      	uxtb	r3, r3
 8002978:	2b01      	cmp	r3, #1
 800297a:	bf14      	ite	ne
 800297c:	2301      	movne	r3, #1
 800297e:	2300      	moveq	r3, #0
 8002980:	b2db      	uxtb	r3, r3
 8002982:	e022      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 8002984:	683b      	ldr	r3, [r7, #0]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d109      	bne.n	800299e <HAL_TIM_PWM_Start+0x72>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002990:	b2db      	uxtb	r3, r3
 8002992:	2b01      	cmp	r3, #1
 8002994:	bf14      	ite	ne
 8002996:	2301      	movne	r3, #1
 8002998:	2300      	moveq	r3, #0
 800299a:	b2db      	uxtb	r3, r3
 800299c:	e015      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 800299e:	683b      	ldr	r3, [r7, #0]
 80029a0:	2b10      	cmp	r3, #16
 80029a2:	d109      	bne.n	80029b8 <HAL_TIM_PWM_Start+0x8c>
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80029aa:	b2db      	uxtb	r3, r3
 80029ac:	2b01      	cmp	r3, #1
 80029ae:	bf14      	ite	ne
 80029b0:	2301      	movne	r3, #1
 80029b2:	2300      	moveq	r3, #0
 80029b4:	b2db      	uxtb	r3, r3
 80029b6:	e008      	b.n	80029ca <HAL_TIM_PWM_Start+0x9e>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80029be:	b2db      	uxtb	r3, r3
 80029c0:	2b01      	cmp	r3, #1
 80029c2:	bf14      	ite	ne
 80029c4:	2301      	movne	r3, #1
 80029c6:	2300      	moveq	r3, #0
 80029c8:	b2db      	uxtb	r3, r3
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e0a1      	b.n	8002b16 <HAL_TIM_PWM_Start+0x1ea>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d104      	bne.n	80029e2 <HAL_TIM_PWM_Start+0xb6>
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	2202      	movs	r2, #2
 80029dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80029e0:	e023      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	2b04      	cmp	r3, #4
 80029e6:	d104      	bne.n	80029f2 <HAL_TIM_PWM_Start+0xc6>
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	2202      	movs	r2, #2
 80029ec:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80029f0:	e01b      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	2b08      	cmp	r3, #8
 80029f6:	d104      	bne.n	8002a02 <HAL_TIM_PWM_Start+0xd6>
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2202      	movs	r2, #2
 80029fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a00:	e013      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 8002a02:	683b      	ldr	r3, [r7, #0]
 8002a04:	2b0c      	cmp	r3, #12
 8002a06:	d104      	bne.n	8002a12 <HAL_TIM_PWM_Start+0xe6>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	2202      	movs	r2, #2
 8002a0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002a10:	e00b      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	2b10      	cmp	r3, #16
 8002a16:	d104      	bne.n	8002a22 <HAL_TIM_PWM_Start+0xf6>
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	2202      	movs	r2, #2
 8002a1c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a20:	e003      	b.n	8002a2a <HAL_TIM_PWM_Start+0xfe>
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2202      	movs	r2, #2
 8002a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2201      	movs	r2, #1
 8002a30:	6839      	ldr	r1, [r7, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f000 ffea 	bl	8003a0c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	4a38      	ldr	r2, [pc, #224]	; (8002b20 <HAL_TIM_PWM_Start+0x1f4>)
 8002a3e:	4293      	cmp	r3, r2
 8002a40:	d018      	beq.n	8002a74 <HAL_TIM_PWM_Start+0x148>
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a37      	ldr	r2, [pc, #220]	; (8002b24 <HAL_TIM_PWM_Start+0x1f8>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	d013      	beq.n	8002a74 <HAL_TIM_PWM_Start+0x148>
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	4a35      	ldr	r2, [pc, #212]	; (8002b28 <HAL_TIM_PWM_Start+0x1fc>)
 8002a52:	4293      	cmp	r3, r2
 8002a54:	d00e      	beq.n	8002a74 <HAL_TIM_PWM_Start+0x148>
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	4a34      	ldr	r2, [pc, #208]	; (8002b2c <HAL_TIM_PWM_Start+0x200>)
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d009      	beq.n	8002a74 <HAL_TIM_PWM_Start+0x148>
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a32      	ldr	r2, [pc, #200]	; (8002b30 <HAL_TIM_PWM_Start+0x204>)
 8002a66:	4293      	cmp	r3, r2
 8002a68:	d004      	beq.n	8002a74 <HAL_TIM_PWM_Start+0x148>
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a31      	ldr	r2, [pc, #196]	; (8002b34 <HAL_TIM_PWM_Start+0x208>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d101      	bne.n	8002a78 <HAL_TIM_PWM_Start+0x14c>
 8002a74:	2301      	movs	r3, #1
 8002a76:	e000      	b.n	8002a7a <HAL_TIM_PWM_Start+0x14e>
 8002a78:	2300      	movs	r3, #0
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d007      	beq.n	8002a8e <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a8c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a23      	ldr	r2, [pc, #140]	; (8002b20 <HAL_TIM_PWM_Start+0x1f4>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	d01d      	beq.n	8002ad4 <HAL_TIM_PWM_Start+0x1a8>
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002aa0:	d018      	beq.n	8002ad4 <HAL_TIM_PWM_Start+0x1a8>
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	4a24      	ldr	r2, [pc, #144]	; (8002b38 <HAL_TIM_PWM_Start+0x20c>)
 8002aa8:	4293      	cmp	r3, r2
 8002aaa:	d013      	beq.n	8002ad4 <HAL_TIM_PWM_Start+0x1a8>
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	4a22      	ldr	r2, [pc, #136]	; (8002b3c <HAL_TIM_PWM_Start+0x210>)
 8002ab2:	4293      	cmp	r3, r2
 8002ab4:	d00e      	beq.n	8002ad4 <HAL_TIM_PWM_Start+0x1a8>
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a1a      	ldr	r2, [pc, #104]	; (8002b24 <HAL_TIM_PWM_Start+0x1f8>)
 8002abc:	4293      	cmp	r3, r2
 8002abe:	d009      	beq.n	8002ad4 <HAL_TIM_PWM_Start+0x1a8>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a18      	ldr	r2, [pc, #96]	; (8002b28 <HAL_TIM_PWM_Start+0x1fc>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d004      	beq.n	8002ad4 <HAL_TIM_PWM_Start+0x1a8>
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a19      	ldr	r2, [pc, #100]	; (8002b34 <HAL_TIM_PWM_Start+0x208>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d115      	bne.n	8002b00 <HAL_TIM_PWM_Start+0x1d4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	689a      	ldr	r2, [r3, #8]
 8002ada:	4b19      	ldr	r3, [pc, #100]	; (8002b40 <HAL_TIM_PWM_Start+0x214>)
 8002adc:	4013      	ands	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	2b06      	cmp	r3, #6
 8002ae4:	d015      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x1e6>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002aec:	d011      	beq.n	8002b12 <HAL_TIM_PWM_Start+0x1e6>
    {
      __HAL_TIM_ENABLE(htim);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f042 0201 	orr.w	r2, r2, #1
 8002afc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002afe:	e008      	b.n	8002b12 <HAL_TIM_PWM_Start+0x1e6>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	681a      	ldr	r2, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	f042 0201 	orr.w	r2, r2, #1
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	e000      	b.n	8002b14 <HAL_TIM_PWM_Start+0x1e8>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002b12:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8002b14:	2300      	movs	r3, #0
}
 8002b16:	4618      	mov	r0, r3
 8002b18:	3710      	adds	r7, #16
 8002b1a:	46bd      	mov	sp, r7
 8002b1c:	bd80      	pop	{r7, pc}
 8002b1e:	bf00      	nop
 8002b20:	40012c00 	.word	0x40012c00
 8002b24:	40013400 	.word	0x40013400
 8002b28:	40014000 	.word	0x40014000
 8002b2c:	40014400 	.word	0x40014400
 8002b30:	40014800 	.word	0x40014800
 8002b34:	40015000 	.word	0x40015000
 8002b38:	40000400 	.word	0x40000400
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	00010007 	.word	0x00010007

08002b44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b082      	sub	sp, #8
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	691b      	ldr	r3, [r3, #16]
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b02      	cmp	r3, #2
 8002b58:	d122      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	68db      	ldr	r3, [r3, #12]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d11b      	bne.n	8002ba0 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0202 	mvn.w	r2, #2
 8002b70:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2201      	movs	r2, #1
 8002b76:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699b      	ldr	r3, [r3, #24]
 8002b7e:	f003 0303 	and.w	r3, r3, #3
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d003      	beq.n	8002b8e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f000 fae3 	bl	8003152 <HAL_TIM_IC_CaptureCallback>
 8002b8c:	e005      	b.n	8002b9a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b8e:	6878      	ldr	r0, [r7, #4]
 8002b90:	f000 fad5 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 fae6 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	2200      	movs	r2, #0
 8002b9e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	691b      	ldr	r3, [r3, #16]
 8002ba6:	f003 0304 	and.w	r3, r3, #4
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d122      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	68db      	ldr	r3, [r3, #12]
 8002bb4:	f003 0304 	and.w	r3, r3, #4
 8002bb8:	2b04      	cmp	r3, #4
 8002bba:	d11b      	bne.n	8002bf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f06f 0204 	mvn.w	r2, #4
 8002bc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	2202      	movs	r2, #2
 8002bca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	699b      	ldr	r3, [r3, #24]
 8002bd2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d003      	beq.n	8002be2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bda:	6878      	ldr	r0, [r7, #4]
 8002bdc:	f000 fab9 	bl	8003152 <HAL_TIM_IC_CaptureCallback>
 8002be0:	e005      	b.n	8002bee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f000 faab 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002be8:	6878      	ldr	r0, [r7, #4]
 8002bea:	f000 fabc 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	2200      	movs	r2, #0
 8002bf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	691b      	ldr	r3, [r3, #16]
 8002bfa:	f003 0308 	and.w	r3, r3, #8
 8002bfe:	2b08      	cmp	r3, #8
 8002c00:	d122      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	68db      	ldr	r3, [r3, #12]
 8002c08:	f003 0308 	and.w	r3, r3, #8
 8002c0c:	2b08      	cmp	r3, #8
 8002c0e:	d11b      	bne.n	8002c48 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f06f 0208 	mvn.w	r2, #8
 8002c18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2204      	movs	r2, #4
 8002c1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	69db      	ldr	r3, [r3, #28]
 8002c26:	f003 0303 	and.w	r3, r3, #3
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d003      	beq.n	8002c36 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c2e:	6878      	ldr	r0, [r7, #4]
 8002c30:	f000 fa8f 	bl	8003152 <HAL_TIM_IC_CaptureCallback>
 8002c34:	e005      	b.n	8002c42 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c36:	6878      	ldr	r0, [r7, #4]
 8002c38:	f000 fa81 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c3c:	6878      	ldr	r0, [r7, #4]
 8002c3e:	f000 fa92 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	691b      	ldr	r3, [r3, #16]
 8002c4e:	f003 0310 	and.w	r3, r3, #16
 8002c52:	2b10      	cmp	r3, #16
 8002c54:	d122      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	68db      	ldr	r3, [r3, #12]
 8002c5c:	f003 0310 	and.w	r3, r3, #16
 8002c60:	2b10      	cmp	r3, #16
 8002c62:	d11b      	bne.n	8002c9c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f06f 0210 	mvn.w	r2, #16
 8002c6c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2208      	movs	r2, #8
 8002c72:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	69db      	ldr	r3, [r3, #28]
 8002c7a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d003      	beq.n	8002c8a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 fa65 	bl	8003152 <HAL_TIM_IC_CaptureCallback>
 8002c88:	e005      	b.n	8002c96 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f000 fa57 	bl	800313e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 fa68 	bl	8003166 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	691b      	ldr	r3, [r3, #16]
 8002ca2:	f003 0301 	and.w	r3, r3, #1
 8002ca6:	2b01      	cmp	r3, #1
 8002ca8:	d10e      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	2b01      	cmp	r3, #1
 8002cb6:	d107      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	f06f 0201 	mvn.w	r2, #1
 8002cc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002cc2:	6878      	ldr	r0, [r7, #4]
 8002cc4:	f7fd fa86 	bl	80001d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cd2:	2b80      	cmp	r3, #128	; 0x80
 8002cd4:	d10e      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ce0:	2b80      	cmp	r3, #128	; 0x80
 8002ce2:	d107      	bne.n	8002cf4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002cec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002cee:	6878      	ldr	r0, [r7, #4]
 8002cf0:	f000 ff48 	bl	8003b84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#if defined(TIM_BDTR_BK2E)
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	691b      	ldr	r3, [r3, #16]
 8002cfa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002cfe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002d02:	d10e      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	68db      	ldr	r3, [r3, #12]
 8002d0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d0e:	2b80      	cmp	r3, #128	; 0x80
 8002d10:	d107      	bne.n	8002d22 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8002d1a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8002d1c:	6878      	ldr	r0, [r7, #4]
 8002d1e:	f000 ff3b 	bl	8003b98 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
#endif /* TIM_BDTR_BK2E */
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	691b      	ldr	r3, [r3, #16]
 8002d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d2c:	2b40      	cmp	r3, #64	; 0x40
 8002d2e:	d10e      	bne.n	8002d4e <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	68db      	ldr	r3, [r3, #12]
 8002d36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d3a:	2b40      	cmp	r3, #64	; 0x40
 8002d3c:	d107      	bne.n	8002d4e <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	681b      	ldr	r3, [r3, #0]
 8002d42:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002d46:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002d48:	6878      	ldr	r0, [r7, #4]
 8002d4a:	f000 fa16 	bl	800317a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002d4e:	687b      	ldr	r3, [r7, #4]
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	691b      	ldr	r3, [r3, #16]
 8002d54:	f003 0320 	and.w	r3, r3, #32
 8002d58:	2b20      	cmp	r3, #32
 8002d5a:	d10e      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	68db      	ldr	r3, [r3, #12]
 8002d62:	f003 0320 	and.w	r3, r3, #32
 8002d66:	2b20      	cmp	r3, #32
 8002d68:	d107      	bne.n	8002d7a <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	f06f 0220 	mvn.w	r2, #32
 8002d72:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002d74:	6878      	ldr	r0, [r7, #4]
 8002d76:	f000 fefb 	bl	8003b70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002d7a:	bf00      	nop
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b086      	sub	sp, #24
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	60f8      	str	r0, [r7, #12]
 8002d8c:	60b9      	str	r1, [r7, #8]
 8002d8e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d90:	2300      	movs	r3, #0
 8002d92:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002d9a:	2b01      	cmp	r3, #1
 8002d9c:	d101      	bne.n	8002da2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002d9e:	2302      	movs	r3, #2
 8002da0:	e0ff      	b.n	8002fa2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	2201      	movs	r2, #1
 8002da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	2b14      	cmp	r3, #20
 8002dae:	f200 80f0 	bhi.w	8002f92 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8002db2:	a201      	add	r2, pc, #4	; (adr r2, 8002db8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002db4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002db8:	08002e0d 	.word	0x08002e0d
 8002dbc:	08002f93 	.word	0x08002f93
 8002dc0:	08002f93 	.word	0x08002f93
 8002dc4:	08002f93 	.word	0x08002f93
 8002dc8:	08002e4d 	.word	0x08002e4d
 8002dcc:	08002f93 	.word	0x08002f93
 8002dd0:	08002f93 	.word	0x08002f93
 8002dd4:	08002f93 	.word	0x08002f93
 8002dd8:	08002e8f 	.word	0x08002e8f
 8002ddc:	08002f93 	.word	0x08002f93
 8002de0:	08002f93 	.word	0x08002f93
 8002de4:	08002f93 	.word	0x08002f93
 8002de8:	08002ecf 	.word	0x08002ecf
 8002dec:	08002f93 	.word	0x08002f93
 8002df0:	08002f93 	.word	0x08002f93
 8002df4:	08002f93 	.word	0x08002f93
 8002df8:	08002f11 	.word	0x08002f11
 8002dfc:	08002f93 	.word	0x08002f93
 8002e00:	08002f93 	.word	0x08002f93
 8002e04:	08002f93 	.word	0x08002f93
 8002e08:	08002f51 	.word	0x08002f51
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	68b9      	ldr	r1, [r7, #8]
 8002e12:	4618      	mov	r0, r3
 8002e14:	f000 fa5a 	bl	80032cc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e18:	68fb      	ldr	r3, [r7, #12]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	699a      	ldr	r2, [r3, #24]
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f042 0208 	orr.w	r2, r2, #8
 8002e26:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	699a      	ldr	r2, [r3, #24]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f022 0204 	bic.w	r2, r2, #4
 8002e36:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	6999      	ldr	r1, [r3, #24]
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	691a      	ldr	r2, [r3, #16]
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	619a      	str	r2, [r3, #24]
      break;
 8002e4a:	e0a5      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002e4c:	68fb      	ldr	r3, [r7, #12]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	68b9      	ldr	r1, [r7, #8]
 8002e52:	4618      	mov	r0, r3
 8002e54:	f000 fad4 	bl	8003400 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002e58:	68fb      	ldr	r3, [r7, #12]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	699a      	ldr	r2, [r3, #24]
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002e66:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	699a      	ldr	r2, [r3, #24]
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002e76:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	6999      	ldr	r1, [r3, #24]
 8002e7e:	68bb      	ldr	r3, [r7, #8]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	021a      	lsls	r2, r3, #8
 8002e84:	68fb      	ldr	r3, [r7, #12]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	619a      	str	r2, [r3, #24]
      break;
 8002e8c:	e084      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	68b9      	ldr	r1, [r7, #8]
 8002e94:	4618      	mov	r0, r3
 8002e96:	f000 fb47 	bl	8003528 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	69da      	ldr	r2, [r3, #28]
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	f042 0208 	orr.w	r2, r2, #8
 8002ea8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	69da      	ldr	r2, [r3, #28]
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	f022 0204 	bic.w	r2, r2, #4
 8002eb8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	69d9      	ldr	r1, [r3, #28]
 8002ec0:	68bb      	ldr	r3, [r7, #8]
 8002ec2:	691a      	ldr	r2, [r3, #16]
 8002ec4:	68fb      	ldr	r3, [r7, #12]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	430a      	orrs	r2, r1
 8002eca:	61da      	str	r2, [r3, #28]
      break;
 8002ecc:	e064      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68b9      	ldr	r1, [r7, #8]
 8002ed4:	4618      	mov	r0, r3
 8002ed6:	f000 fbb9 	bl	800364c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	69da      	ldr	r2, [r3, #28]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ee8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	69da      	ldr	r2, [r3, #28]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ef8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	69d9      	ldr	r1, [r3, #28]
 8002f00:	68bb      	ldr	r3, [r7, #8]
 8002f02:	691b      	ldr	r3, [r3, #16]
 8002f04:	021a      	lsls	r2, r3, #8
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	430a      	orrs	r2, r1
 8002f0c:	61da      	str	r2, [r3, #28]
      break;
 8002f0e:	e043      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f000 fc08 	bl	800372c <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f042 0208 	orr.w	r2, r2, #8
 8002f2a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	f022 0204 	bic.w	r2, r2, #4
 8002f3a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	691a      	ldr	r2, [r3, #16]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	430a      	orrs	r2, r1
 8002f4c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f4e:	e023      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	68b9      	ldr	r1, [r7, #8]
 8002f56:	4618      	mov	r0, r3
 8002f58:	f000 fc52 	bl	8003800 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f6a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8002f6c:	68fb      	ldr	r3, [r7, #12]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002f7a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	691b      	ldr	r3, [r3, #16]
 8002f86:	021a      	lsls	r2, r3, #8
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	430a      	orrs	r2, r1
 8002f8e:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8002f90:	e002      	b.n	8002f98 <HAL_TIM_PWM_ConfigChannel+0x214>
    }
#endif /* TIM_CCER_CC6E */

    default:
      status = HAL_ERROR;
 8002f92:	2301      	movs	r3, #1
 8002f94:	75fb      	strb	r3, [r7, #23]
      break;
 8002f96:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002fa0:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa2:	4618      	mov	r0, r3
 8002fa4:	3718      	adds	r7, #24
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}
 8002faa:	bf00      	nop

08002fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0b6      	b.n	8003136 <HAL_TIM_ConfigClockSource+0x18a>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fe6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002fea:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002ff2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ffc:	683b      	ldr	r3, [r7, #0]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003004:	d03e      	beq.n	8003084 <HAL_TIM_ConfigClockSource+0xd8>
 8003006:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800300a:	f200 8087 	bhi.w	800311c <HAL_TIM_ConfigClockSource+0x170>
 800300e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003012:	f000 8086 	beq.w	8003122 <HAL_TIM_ConfigClockSource+0x176>
 8003016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800301a:	d87f      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x170>
 800301c:	2b70      	cmp	r3, #112	; 0x70
 800301e:	d01a      	beq.n	8003056 <HAL_TIM_ConfigClockSource+0xaa>
 8003020:	2b70      	cmp	r3, #112	; 0x70
 8003022:	d87b      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x170>
 8003024:	2b60      	cmp	r3, #96	; 0x60
 8003026:	d050      	beq.n	80030ca <HAL_TIM_ConfigClockSource+0x11e>
 8003028:	2b60      	cmp	r3, #96	; 0x60
 800302a:	d877      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x170>
 800302c:	2b50      	cmp	r3, #80	; 0x50
 800302e:	d03c      	beq.n	80030aa <HAL_TIM_ConfigClockSource+0xfe>
 8003030:	2b50      	cmp	r3, #80	; 0x50
 8003032:	d873      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x170>
 8003034:	2b40      	cmp	r3, #64	; 0x40
 8003036:	d058      	beq.n	80030ea <HAL_TIM_ConfigClockSource+0x13e>
 8003038:	2b40      	cmp	r3, #64	; 0x40
 800303a:	d86f      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x170>
 800303c:	2b30      	cmp	r3, #48	; 0x30
 800303e:	d064      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15e>
 8003040:	2b30      	cmp	r3, #48	; 0x30
 8003042:	d86b      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x170>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d060      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15e>
 8003048:	2b20      	cmp	r3, #32
 800304a:	d867      	bhi.n	800311c <HAL_TIM_ConfigClockSource+0x170>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d05c      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15e>
 8003050:	2b10      	cmp	r3, #16
 8003052:	d05a      	beq.n	800310a <HAL_TIM_ConfigClockSource+0x15e>
 8003054:	e062      	b.n	800311c <HAL_TIM_ConfigClockSource+0x170>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	6818      	ldr	r0, [r3, #0]
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	6899      	ldr	r1, [r3, #8]
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	685a      	ldr	r2, [r3, #4]
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	68db      	ldr	r3, [r3, #12]
 8003066:	f000 fcb1 	bl	80039cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003072:	68bb      	ldr	r3, [r7, #8]
 8003074:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003078:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	68ba      	ldr	r2, [r7, #8]
 8003080:	609a      	str	r2, [r3, #8]
      break;
 8003082:	e04f      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6818      	ldr	r0, [r3, #0]
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	6899      	ldr	r1, [r3, #8]
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685a      	ldr	r2, [r3, #4]
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	f000 fc9a 	bl	80039cc <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	689a      	ldr	r2, [r3, #8]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80030a6:	609a      	str	r2, [r3, #8]
      break;
 80030a8:	e03c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	6818      	ldr	r0, [r3, #0]
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	6859      	ldr	r1, [r3, #4]
 80030b2:	683b      	ldr	r3, [r7, #0]
 80030b4:	68db      	ldr	r3, [r3, #12]
 80030b6:	461a      	mov	r2, r3
 80030b8:	f000 fc0e 	bl	80038d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2150      	movs	r1, #80	; 0x50
 80030c2:	4618      	mov	r0, r3
 80030c4:	f000 fc67 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 80030c8:	e02c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	6818      	ldr	r0, [r3, #0]
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	683b      	ldr	r3, [r7, #0]
 80030d4:	68db      	ldr	r3, [r3, #12]
 80030d6:	461a      	mov	r2, r3
 80030d8:	f000 fc2d 	bl	8003936 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	2160      	movs	r1, #96	; 0x60
 80030e2:	4618      	mov	r0, r3
 80030e4:	f000 fc57 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 80030e8:	e01c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x178>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6818      	ldr	r0, [r3, #0]
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	6859      	ldr	r1, [r3, #4]
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	68db      	ldr	r3, [r3, #12]
 80030f6:	461a      	mov	r2, r3
 80030f8:	f000 fbee 	bl	80038d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2140      	movs	r1, #64	; 0x40
 8003102:	4618      	mov	r0, r3
 8003104:	f000 fc47 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 8003108:	e00c      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x178>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681a      	ldr	r2, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	4619      	mov	r1, r3
 8003114:	4610      	mov	r0, r2
 8003116:	f000 fc3e 	bl	8003996 <TIM_ITRx_SetConfig>
      break;
 800311a:	e003      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x178>
    }

    default:
      status = HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	73fb      	strb	r3, [r7, #15]
      break;
 8003120:	e000      	b.n	8003124 <HAL_TIM_ConfigClockSource+0x178>
      break;
 8003122:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003134:	7bfb      	ldrb	r3, [r7, #15]
}
 8003136:	4618      	mov	r0, r3
 8003138:	3710      	adds	r7, #16
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313e:	b480      	push	{r7}
 8003140:	b083      	sub	sp, #12
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003146:	bf00      	nop
 8003148:	370c      	adds	r7, #12
 800314a:	46bd      	mov	sp, r7
 800314c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003150:	4770      	bx	lr

08003152 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003152:	b480      	push	{r7}
 8003154:	b083      	sub	sp, #12
 8003156:	af00      	add	r7, sp, #0
 8003158:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800315a:	bf00      	nop
 800315c:	370c      	adds	r7, #12
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003166:	b480      	push	{r7}
 8003168:	b083      	sub	sp, #12
 800316a:	af00      	add	r7, sp, #0
 800316c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800316e:	bf00      	nop
 8003170:	370c      	adds	r7, #12
 8003172:	46bd      	mov	sp, r7
 8003174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003178:	4770      	bx	lr

0800317a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800317a:	b480      	push	{r7}
 800317c:	b083      	sub	sp, #12
 800317e:	af00      	add	r7, sp, #0
 8003180:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003182:	bf00      	nop
 8003184:	370c      	adds	r7, #12
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003190:	b480      	push	{r7}
 8003192:	b085      	sub	sp, #20
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
 8003198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	4a42      	ldr	r2, [pc, #264]	; (80032ac <TIM_Base_SetConfig+0x11c>)
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d013      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ae:	d00f      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	4a3f      	ldr	r2, [pc, #252]	; (80032b0 <TIM_Base_SetConfig+0x120>)
 80031b4:	4293      	cmp	r3, r2
 80031b6:	d00b      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	4a3e      	ldr	r2, [pc, #248]	; (80032b4 <TIM_Base_SetConfig+0x124>)
 80031bc:	4293      	cmp	r3, r2
 80031be:	d007      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	4a3d      	ldr	r2, [pc, #244]	; (80032b8 <TIM_Base_SetConfig+0x128>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d003      	beq.n	80031d0 <TIM_Base_SetConfig+0x40>
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	4a3c      	ldr	r2, [pc, #240]	; (80032bc <TIM_Base_SetConfig+0x12c>)
 80031cc:	4293      	cmp	r3, r2
 80031ce:	d108      	bne.n	80031e2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d8:	683b      	ldr	r3, [r7, #0]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	68fa      	ldr	r2, [r7, #12]
 80031de:	4313      	orrs	r3, r2
 80031e0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	4a31      	ldr	r2, [pc, #196]	; (80032ac <TIM_Base_SetConfig+0x11c>)
 80031e6:	4293      	cmp	r3, r2
 80031e8:	d01f      	beq.n	800322a <TIM_Base_SetConfig+0x9a>
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031f0:	d01b      	beq.n	800322a <TIM_Base_SetConfig+0x9a>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	4a2e      	ldr	r2, [pc, #184]	; (80032b0 <TIM_Base_SetConfig+0x120>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d017      	beq.n	800322a <TIM_Base_SetConfig+0x9a>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	4a2d      	ldr	r2, [pc, #180]	; (80032b4 <TIM_Base_SetConfig+0x124>)
 80031fe:	4293      	cmp	r3, r2
 8003200:	d013      	beq.n	800322a <TIM_Base_SetConfig+0x9a>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	4a2c      	ldr	r2, [pc, #176]	; (80032b8 <TIM_Base_SetConfig+0x128>)
 8003206:	4293      	cmp	r3, r2
 8003208:	d00f      	beq.n	800322a <TIM_Base_SetConfig+0x9a>
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	4a2c      	ldr	r2, [pc, #176]	; (80032c0 <TIM_Base_SetConfig+0x130>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00b      	beq.n	800322a <TIM_Base_SetConfig+0x9a>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a2b      	ldr	r2, [pc, #172]	; (80032c4 <TIM_Base_SetConfig+0x134>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d007      	beq.n	800322a <TIM_Base_SetConfig+0x9a>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a2a      	ldr	r2, [pc, #168]	; (80032c8 <TIM_Base_SetConfig+0x138>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d003      	beq.n	800322a <TIM_Base_SetConfig+0x9a>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a25      	ldr	r2, [pc, #148]	; (80032bc <TIM_Base_SetConfig+0x12c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d108      	bne.n	800323c <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003230:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	68db      	ldr	r3, [r3, #12]
 8003236:	68fa      	ldr	r2, [r7, #12]
 8003238:	4313      	orrs	r3, r2
 800323a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	4313      	orrs	r3, r2
 8003248:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	68fa      	ldr	r2, [r7, #12]
 800324e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	689a      	ldr	r2, [r3, #8]
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	4a12      	ldr	r2, [pc, #72]	; (80032ac <TIM_Base_SetConfig+0x11c>)
 8003264:	4293      	cmp	r3, r2
 8003266:	d013      	beq.n	8003290 <TIM_Base_SetConfig+0x100>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	4a13      	ldr	r2, [pc, #76]	; (80032b8 <TIM_Base_SetConfig+0x128>)
 800326c:	4293      	cmp	r3, r2
 800326e:	d00f      	beq.n	8003290 <TIM_Base_SetConfig+0x100>
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	4a13      	ldr	r2, [pc, #76]	; (80032c0 <TIM_Base_SetConfig+0x130>)
 8003274:	4293      	cmp	r3, r2
 8003276:	d00b      	beq.n	8003290 <TIM_Base_SetConfig+0x100>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	4a12      	ldr	r2, [pc, #72]	; (80032c4 <TIM_Base_SetConfig+0x134>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d007      	beq.n	8003290 <TIM_Base_SetConfig+0x100>
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	4a11      	ldr	r2, [pc, #68]	; (80032c8 <TIM_Base_SetConfig+0x138>)
 8003284:	4293      	cmp	r3, r2
 8003286:	d003      	beq.n	8003290 <TIM_Base_SetConfig+0x100>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	4a0c      	ldr	r2, [pc, #48]	; (80032bc <TIM_Base_SetConfig+0x12c>)
 800328c:	4293      	cmp	r3, r2
 800328e:	d103      	bne.n	8003298 <TIM_Base_SetConfig+0x108>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	691a      	ldr	r2, [r3, #16]
 8003294:	687b      	ldr	r3, [r7, #4]
 8003296:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	2201      	movs	r2, #1
 800329c:	615a      	str	r2, [r3, #20]
}
 800329e:	bf00      	nop
 80032a0:	3714      	adds	r7, #20
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	40012c00 	.word	0x40012c00
 80032b0:	40000400 	.word	0x40000400
 80032b4:	40000800 	.word	0x40000800
 80032b8:	40013400 	.word	0x40013400
 80032bc:	40015000 	.word	0x40015000
 80032c0:	40014000 	.word	0x40014000
 80032c4:	40014400 	.word	0x40014400
 80032c8:	40014800 	.word	0x40014800

080032cc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80032cc:	b480      	push	{r7}
 80032ce:	b087      	sub	sp, #28
 80032d0:	af00      	add	r7, sp, #0
 80032d2:	6078      	str	r0, [r7, #4]
 80032d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	6a1b      	ldr	r3, [r3, #32]
 80032da:	f023 0201 	bic.w	r2, r3, #1
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	699b      	ldr	r3, [r3, #24]
 80032f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	f023 0303 	bic.w	r3, r3, #3
 8003306:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003308:	683b      	ldr	r3, [r7, #0]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	68fa      	ldr	r2, [r7, #12]
 800330e:	4313      	orrs	r3, r2
 8003310:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	f023 0302 	bic.w	r3, r3, #2
 8003318:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800331a:	683b      	ldr	r3, [r7, #0]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	697a      	ldr	r2, [r7, #20]
 8003320:	4313      	orrs	r3, r2
 8003322:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	4a30      	ldr	r2, [pc, #192]	; (80033e8 <TIM_OC1_SetConfig+0x11c>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d013      	beq.n	8003354 <TIM_OC1_SetConfig+0x88>
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	4a2f      	ldr	r2, [pc, #188]	; (80033ec <TIM_OC1_SetConfig+0x120>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d00f      	beq.n	8003354 <TIM_OC1_SetConfig+0x88>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	4a2e      	ldr	r2, [pc, #184]	; (80033f0 <TIM_OC1_SetConfig+0x124>)
 8003338:	4293      	cmp	r3, r2
 800333a:	d00b      	beq.n	8003354 <TIM_OC1_SetConfig+0x88>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	4a2d      	ldr	r2, [pc, #180]	; (80033f4 <TIM_OC1_SetConfig+0x128>)
 8003340:	4293      	cmp	r3, r2
 8003342:	d007      	beq.n	8003354 <TIM_OC1_SetConfig+0x88>
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	4a2c      	ldr	r2, [pc, #176]	; (80033f8 <TIM_OC1_SetConfig+0x12c>)
 8003348:	4293      	cmp	r3, r2
 800334a:	d003      	beq.n	8003354 <TIM_OC1_SetConfig+0x88>
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	4a2b      	ldr	r2, [pc, #172]	; (80033fc <TIM_OC1_SetConfig+0x130>)
 8003350:	4293      	cmp	r3, r2
 8003352:	d10c      	bne.n	800336e <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003354:	697b      	ldr	r3, [r7, #20]
 8003356:	f023 0308 	bic.w	r3, r3, #8
 800335a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	68db      	ldr	r3, [r3, #12]
 8003360:	697a      	ldr	r2, [r7, #20]
 8003362:	4313      	orrs	r3, r2
 8003364:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003366:	697b      	ldr	r3, [r7, #20]
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	4a1d      	ldr	r2, [pc, #116]	; (80033e8 <TIM_OC1_SetConfig+0x11c>)
 8003372:	4293      	cmp	r3, r2
 8003374:	d013      	beq.n	800339e <TIM_OC1_SetConfig+0xd2>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	4a1c      	ldr	r2, [pc, #112]	; (80033ec <TIM_OC1_SetConfig+0x120>)
 800337a:	4293      	cmp	r3, r2
 800337c:	d00f      	beq.n	800339e <TIM_OC1_SetConfig+0xd2>
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	4a1b      	ldr	r2, [pc, #108]	; (80033f0 <TIM_OC1_SetConfig+0x124>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d00b      	beq.n	800339e <TIM_OC1_SetConfig+0xd2>
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <TIM_OC1_SetConfig+0x128>)
 800338a:	4293      	cmp	r3, r2
 800338c:	d007      	beq.n	800339e <TIM_OC1_SetConfig+0xd2>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	4a19      	ldr	r2, [pc, #100]	; (80033f8 <TIM_OC1_SetConfig+0x12c>)
 8003392:	4293      	cmp	r3, r2
 8003394:	d003      	beq.n	800339e <TIM_OC1_SetConfig+0xd2>
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	4a18      	ldr	r2, [pc, #96]	; (80033fc <TIM_OC1_SetConfig+0x130>)
 800339a:	4293      	cmp	r3, r2
 800339c:	d111      	bne.n	80033c2 <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800339e:	693b      	ldr	r3, [r7, #16]
 80033a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80033a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80033a6:	693b      	ldr	r3, [r7, #16]
 80033a8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80033ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80033ae:	683b      	ldr	r3, [r7, #0]
 80033b0:	695b      	ldr	r3, [r3, #20]
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	699b      	ldr	r3, [r3, #24]
 80033bc:	693a      	ldr	r2, [r7, #16]
 80033be:	4313      	orrs	r3, r2
 80033c0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	693a      	ldr	r2, [r7, #16]
 80033c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	68fa      	ldr	r2, [r7, #12]
 80033cc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80033ce:	683b      	ldr	r3, [r7, #0]
 80033d0:	685a      	ldr	r2, [r3, #4]
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	697a      	ldr	r2, [r7, #20]
 80033da:	621a      	str	r2, [r3, #32]
}
 80033dc:	bf00      	nop
 80033de:	371c      	adds	r7, #28
 80033e0:	46bd      	mov	sp, r7
 80033e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033e6:	4770      	bx	lr
 80033e8:	40012c00 	.word	0x40012c00
 80033ec:	40013400 	.word	0x40013400
 80033f0:	40014000 	.word	0x40014000
 80033f4:	40014400 	.word	0x40014400
 80033f8:	40014800 	.word	0x40014800
 80033fc:	40015000 	.word	0x40015000

08003400 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003400:	b480      	push	{r7}
 8003402:	b087      	sub	sp, #28
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6a1b      	ldr	r3, [r3, #32]
 800340e:	f023 0210 	bic.w	r2, r3, #16
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6a1b      	ldr	r3, [r3, #32]
 800341a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	699b      	ldr	r3, [r3, #24]
 8003426:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800342e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003432:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800343a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800343c:	683b      	ldr	r3, [r7, #0]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	021b      	lsls	r3, r3, #8
 8003442:	68fa      	ldr	r2, [r7, #12]
 8003444:	4313      	orrs	r3, r2
 8003446:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003448:	697b      	ldr	r3, [r7, #20]
 800344a:	f023 0320 	bic.w	r3, r3, #32
 800344e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003450:	683b      	ldr	r3, [r7, #0]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	011b      	lsls	r3, r3, #4
 8003456:	697a      	ldr	r2, [r7, #20]
 8003458:	4313      	orrs	r3, r2
 800345a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	4a2c      	ldr	r2, [pc, #176]	; (8003510 <TIM_OC2_SetConfig+0x110>)
 8003460:	4293      	cmp	r3, r2
 8003462:	d007      	beq.n	8003474 <TIM_OC2_SetConfig+0x74>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	4a2b      	ldr	r2, [pc, #172]	; (8003514 <TIM_OC2_SetConfig+0x114>)
 8003468:	4293      	cmp	r3, r2
 800346a:	d003      	beq.n	8003474 <TIM_OC2_SetConfig+0x74>
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	4a2a      	ldr	r2, [pc, #168]	; (8003518 <TIM_OC2_SetConfig+0x118>)
 8003470:	4293      	cmp	r3, r2
 8003472:	d10d      	bne.n	8003490 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003474:	697b      	ldr	r3, [r7, #20]
 8003476:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800347a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800347c:	683b      	ldr	r3, [r7, #0]
 800347e:	68db      	ldr	r3, [r3, #12]
 8003480:	011b      	lsls	r3, r3, #4
 8003482:	697a      	ldr	r2, [r7, #20]
 8003484:	4313      	orrs	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800348e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	4a1f      	ldr	r2, [pc, #124]	; (8003510 <TIM_OC2_SetConfig+0x110>)
 8003494:	4293      	cmp	r3, r2
 8003496:	d013      	beq.n	80034c0 <TIM_OC2_SetConfig+0xc0>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	4a1e      	ldr	r2, [pc, #120]	; (8003514 <TIM_OC2_SetConfig+0x114>)
 800349c:	4293      	cmp	r3, r2
 800349e:	d00f      	beq.n	80034c0 <TIM_OC2_SetConfig+0xc0>
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	4a1e      	ldr	r2, [pc, #120]	; (800351c <TIM_OC2_SetConfig+0x11c>)
 80034a4:	4293      	cmp	r3, r2
 80034a6:	d00b      	beq.n	80034c0 <TIM_OC2_SetConfig+0xc0>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	4a1d      	ldr	r2, [pc, #116]	; (8003520 <TIM_OC2_SetConfig+0x120>)
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d007      	beq.n	80034c0 <TIM_OC2_SetConfig+0xc0>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	4a1c      	ldr	r2, [pc, #112]	; (8003524 <TIM_OC2_SetConfig+0x124>)
 80034b4:	4293      	cmp	r3, r2
 80034b6:	d003      	beq.n	80034c0 <TIM_OC2_SetConfig+0xc0>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	4a17      	ldr	r2, [pc, #92]	; (8003518 <TIM_OC2_SetConfig+0x118>)
 80034bc:	4293      	cmp	r3, r2
 80034be:	d113      	bne.n	80034e8 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80034c6:	613b      	str	r3, [r7, #16]
#if defined(TIM_CR2_OIS2N)
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80034c8:	693b      	ldr	r3, [r7, #16]
 80034ca:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80034ce:	613b      	str	r3, [r7, #16]
#endif /* TIM_CR2_OIS2N */
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80034d0:	683b      	ldr	r3, [r7, #0]
 80034d2:	695b      	ldr	r3, [r3, #20]
 80034d4:	009b      	lsls	r3, r3, #2
 80034d6:	693a      	ldr	r2, [r7, #16]
 80034d8:	4313      	orrs	r3, r2
 80034da:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	699b      	ldr	r3, [r3, #24]
 80034e0:	009b      	lsls	r3, r3, #2
 80034e2:	693a      	ldr	r2, [r7, #16]
 80034e4:	4313      	orrs	r3, r2
 80034e6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	693a      	ldr	r2, [r7, #16]
 80034ec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685a      	ldr	r2, [r3, #4]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	697a      	ldr	r2, [r7, #20]
 8003500:	621a      	str	r2, [r3, #32]
}
 8003502:	bf00      	nop
 8003504:	371c      	adds	r7, #28
 8003506:	46bd      	mov	sp, r7
 8003508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800350c:	4770      	bx	lr
 800350e:	bf00      	nop
 8003510:	40012c00 	.word	0x40012c00
 8003514:	40013400 	.word	0x40013400
 8003518:	40015000 	.word	0x40015000
 800351c:	40014000 	.word	0x40014000
 8003520:	40014400 	.word	0x40014400
 8003524:	40014800 	.word	0x40014800

08003528 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
 8003530:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	6a1b      	ldr	r3, [r3, #32]
 8003536:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a1b      	ldr	r3, [r3, #32]
 8003542:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	69db      	ldr	r3, [r3, #28]
 800354e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800355a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f023 0303 	bic.w	r3, r3, #3
 8003562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	68fa      	ldr	r2, [r7, #12]
 800356a:	4313      	orrs	r3, r2
 800356c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003576:	683b      	ldr	r3, [r7, #0]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	021b      	lsls	r3, r3, #8
 800357c:	697a      	ldr	r2, [r7, #20]
 800357e:	4313      	orrs	r3, r2
 8003580:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	4a2b      	ldr	r2, [pc, #172]	; (8003634 <TIM_OC3_SetConfig+0x10c>)
 8003586:	4293      	cmp	r3, r2
 8003588:	d007      	beq.n	800359a <TIM_OC3_SetConfig+0x72>
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	4a2a      	ldr	r2, [pc, #168]	; (8003638 <TIM_OC3_SetConfig+0x110>)
 800358e:	4293      	cmp	r3, r2
 8003590:	d003      	beq.n	800359a <TIM_OC3_SetConfig+0x72>
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	4a29      	ldr	r2, [pc, #164]	; (800363c <TIM_OC3_SetConfig+0x114>)
 8003596:	4293      	cmp	r3, r2
 8003598:	d10d      	bne.n	80035b6 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800359a:	697b      	ldr	r3, [r7, #20]
 800359c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80035a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	68db      	ldr	r3, [r3, #12]
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	697a      	ldr	r2, [r7, #20]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80035b4:	617b      	str	r3, [r7, #20]
  }

#if defined(TIM_CR2_OIS3)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	4a1e      	ldr	r2, [pc, #120]	; (8003634 <TIM_OC3_SetConfig+0x10c>)
 80035ba:	4293      	cmp	r3, r2
 80035bc:	d013      	beq.n	80035e6 <TIM_OC3_SetConfig+0xbe>
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	4a1d      	ldr	r2, [pc, #116]	; (8003638 <TIM_OC3_SetConfig+0x110>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d00f      	beq.n	80035e6 <TIM_OC3_SetConfig+0xbe>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a1d      	ldr	r2, [pc, #116]	; (8003640 <TIM_OC3_SetConfig+0x118>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d00b      	beq.n	80035e6 <TIM_OC3_SetConfig+0xbe>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a1c      	ldr	r2, [pc, #112]	; (8003644 <TIM_OC3_SetConfig+0x11c>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d007      	beq.n	80035e6 <TIM_OC3_SetConfig+0xbe>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a1b      	ldr	r2, [pc, #108]	; (8003648 <TIM_OC3_SetConfig+0x120>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d003      	beq.n	80035e6 <TIM_OC3_SetConfig+0xbe>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a16      	ldr	r2, [pc, #88]	; (800363c <TIM_OC3_SetConfig+0x114>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d113      	bne.n	800360e <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80035ec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80035f4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	695b      	ldr	r3, [r3, #20]
 80035fa:	011b      	lsls	r3, r3, #4
 80035fc:	693a      	ldr	r2, [r7, #16]
 80035fe:	4313      	orrs	r3, r2
 8003600:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	011b      	lsls	r3, r3, #4
 8003608:	693a      	ldr	r2, [r7, #16]
 800360a:	4313      	orrs	r3, r2
 800360c:	613b      	str	r3, [r7, #16]
  }
#endif /* TIM_CR2_OIS3 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	693a      	ldr	r2, [r7, #16]
 8003612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68fa      	ldr	r2, [r7, #12]
 8003618:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	685a      	ldr	r2, [r3, #4]
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	697a      	ldr	r2, [r7, #20]
 8003626:	621a      	str	r2, [r3, #32]
}
 8003628:	bf00      	nop
 800362a:	371c      	adds	r7, #28
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr
 8003634:	40012c00 	.word	0x40012c00
 8003638:	40013400 	.word	0x40013400
 800363c:	40015000 	.word	0x40015000
 8003640:	40014000 	.word	0x40014000
 8003644:	40014400 	.word	0x40014400
 8003648:	40014800 	.word	0x40014800

0800364c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800364c:	b480      	push	{r7}
 800364e:	b087      	sub	sp, #28
 8003650:	af00      	add	r7, sp, #0
 8003652:	6078      	str	r0, [r7, #4]
 8003654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	6a1b      	ldr	r3, [r3, #32]
 8003666:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	69db      	ldr	r3, [r3, #28]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800367a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800367e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003686:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	021b      	lsls	r3, r3, #8
 800368e:	68fa      	ldr	r2, [r7, #12]
 8003690:	4313      	orrs	r3, r2
 8003692:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800369a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800369c:	683b      	ldr	r3, [r7, #0]
 800369e:	689b      	ldr	r3, [r3, #8]
 80036a0:	031b      	lsls	r3, r3, #12
 80036a2:	693a      	ldr	r2, [r7, #16]
 80036a4:	4313      	orrs	r3, r2
 80036a6:	613b      	str	r3, [r7, #16]

#if defined(TIM_CR2_OIS4)
  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <TIM_OC4_SetConfig+0xc8>)
 80036ac:	4293      	cmp	r3, r2
 80036ae:	d013      	beq.n	80036d8 <TIM_OC4_SetConfig+0x8c>
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	4a19      	ldr	r2, [pc, #100]	; (8003718 <TIM_OC4_SetConfig+0xcc>)
 80036b4:	4293      	cmp	r3, r2
 80036b6:	d00f      	beq.n	80036d8 <TIM_OC4_SetConfig+0x8c>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <TIM_OC4_SetConfig+0xd0>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d00b      	beq.n	80036d8 <TIM_OC4_SetConfig+0x8c>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	4a17      	ldr	r2, [pc, #92]	; (8003720 <TIM_OC4_SetConfig+0xd4>)
 80036c4:	4293      	cmp	r3, r2
 80036c6:	d007      	beq.n	80036d8 <TIM_OC4_SetConfig+0x8c>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	4a16      	ldr	r2, [pc, #88]	; (8003724 <TIM_OC4_SetConfig+0xd8>)
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d003      	beq.n	80036d8 <TIM_OC4_SetConfig+0x8c>
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a15      	ldr	r2, [pc, #84]	; (8003728 <TIM_OC4_SetConfig+0xdc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d109      	bne.n	80036ec <TIM_OC4_SetConfig+0xa0>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80036de:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	695b      	ldr	r3, [r3, #20]
 80036e4:	019b      	lsls	r3, r3, #6
 80036e6:	697a      	ldr	r2, [r7, #20]
 80036e8:	4313      	orrs	r3, r2
 80036ea:	617b      	str	r3, [r7, #20]
  }
#endif /* TIM_CR2_OIS4 */

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	697a      	ldr	r2, [r7, #20]
 80036f0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	68fa      	ldr	r2, [r7, #12]
 80036f6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685a      	ldr	r2, [r3, #4]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	693a      	ldr	r2, [r7, #16]
 8003704:	621a      	str	r2, [r3, #32]
}
 8003706:	bf00      	nop
 8003708:	371c      	adds	r7, #28
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr
 8003712:	bf00      	nop
 8003714:	40012c00 	.word	0x40012c00
 8003718:	40013400 	.word	0x40013400
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800
 8003728:	40015000 	.word	0x40015000

0800372c <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 800372c:	b480      	push	{r7}
 800372e:	b087      	sub	sp, #28
 8003730:	af00      	add	r7, sp, #0
 8003732:	6078      	str	r0, [r7, #4]
 8003734:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	6a1b      	ldr	r3, [r3, #32]
 800373a:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a1b      	ldr	r3, [r3, #32]
 8003746:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	685b      	ldr	r3, [r3, #4]
 800374c:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003752:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800375a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8003770:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	041b      	lsls	r3, r3, #16
 8003778:	693a      	ldr	r2, [r7, #16]
 800377a:	4313      	orrs	r3, r2
 800377c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	4a19      	ldr	r2, [pc, #100]	; (80037e8 <TIM_OC5_SetConfig+0xbc>)
 8003782:	4293      	cmp	r3, r2
 8003784:	d013      	beq.n	80037ae <TIM_OC5_SetConfig+0x82>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	4a18      	ldr	r2, [pc, #96]	; (80037ec <TIM_OC5_SetConfig+0xc0>)
 800378a:	4293      	cmp	r3, r2
 800378c:	d00f      	beq.n	80037ae <TIM_OC5_SetConfig+0x82>
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	4a17      	ldr	r2, [pc, #92]	; (80037f0 <TIM_OC5_SetConfig+0xc4>)
 8003792:	4293      	cmp	r3, r2
 8003794:	d00b      	beq.n	80037ae <TIM_OC5_SetConfig+0x82>
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	4a16      	ldr	r2, [pc, #88]	; (80037f4 <TIM_OC5_SetConfig+0xc8>)
 800379a:	4293      	cmp	r3, r2
 800379c:	d007      	beq.n	80037ae <TIM_OC5_SetConfig+0x82>
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a15      	ldr	r2, [pc, #84]	; (80037f8 <TIM_OC5_SetConfig+0xcc>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d003      	beq.n	80037ae <TIM_OC5_SetConfig+0x82>
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	4a14      	ldr	r2, [pc, #80]	; (80037fc <TIM_OC5_SetConfig+0xd0>)
 80037aa:	4293      	cmp	r3, r2
 80037ac:	d109      	bne.n	80037c2 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80037ae:	697b      	ldr	r3, [r7, #20]
 80037b0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80037b4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	021b      	lsls	r3, r3, #8
 80037bc:	697a      	ldr	r2, [r7, #20]
 80037be:	4313      	orrs	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	697a      	ldr	r2, [r7, #20]
 80037c6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68fa      	ldr	r2, [r7, #12]
 80037cc:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80037ce:	683b      	ldr	r3, [r7, #0]
 80037d0:	685a      	ldr	r2, [r3, #4]
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	693a      	ldr	r2, [r7, #16]
 80037da:	621a      	str	r2, [r3, #32]
}
 80037dc:	bf00      	nop
 80037de:	371c      	adds	r7, #28
 80037e0:	46bd      	mov	sp, r7
 80037e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037e6:	4770      	bx	lr
 80037e8:	40012c00 	.word	0x40012c00
 80037ec:	40013400 	.word	0x40013400
 80037f0:	40014000 	.word	0x40014000
 80037f4:	40014400 	.word	0x40014400
 80037f8:	40014800 	.word	0x40014800
 80037fc:	40015000 	.word	0x40015000

08003800 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003800:	b480      	push	{r7}
 8003802:	b087      	sub	sp, #28
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6a1b      	ldr	r3, [r3, #32]
 800380e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	6a1b      	ldr	r3, [r3, #32]
 800381a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003826:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800382e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003832:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003834:	683b      	ldr	r3, [r7, #0]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	021b      	lsls	r3, r3, #8
 800383a:	68fa      	ldr	r2, [r7, #12]
 800383c:	4313      	orrs	r3, r2
 800383e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003840:	693b      	ldr	r3, [r7, #16]
 8003842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003846:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	689b      	ldr	r3, [r3, #8]
 800384c:	051b      	lsls	r3, r3, #20
 800384e:	693a      	ldr	r2, [r7, #16]
 8003850:	4313      	orrs	r3, r2
 8003852:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	4a1a      	ldr	r2, [pc, #104]	; (80038c0 <TIM_OC6_SetConfig+0xc0>)
 8003858:	4293      	cmp	r3, r2
 800385a:	d013      	beq.n	8003884 <TIM_OC6_SetConfig+0x84>
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	4a19      	ldr	r2, [pc, #100]	; (80038c4 <TIM_OC6_SetConfig+0xc4>)
 8003860:	4293      	cmp	r3, r2
 8003862:	d00f      	beq.n	8003884 <TIM_OC6_SetConfig+0x84>
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	4a18      	ldr	r2, [pc, #96]	; (80038c8 <TIM_OC6_SetConfig+0xc8>)
 8003868:	4293      	cmp	r3, r2
 800386a:	d00b      	beq.n	8003884 <TIM_OC6_SetConfig+0x84>
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	4a17      	ldr	r2, [pc, #92]	; (80038cc <TIM_OC6_SetConfig+0xcc>)
 8003870:	4293      	cmp	r3, r2
 8003872:	d007      	beq.n	8003884 <TIM_OC6_SetConfig+0x84>
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	4a16      	ldr	r2, [pc, #88]	; (80038d0 <TIM_OC6_SetConfig+0xd0>)
 8003878:	4293      	cmp	r3, r2
 800387a:	d003      	beq.n	8003884 <TIM_OC6_SetConfig+0x84>
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	4a15      	ldr	r2, [pc, #84]	; (80038d4 <TIM_OC6_SetConfig+0xd4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d109      	bne.n	8003898 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003884:	697b      	ldr	r3, [r7, #20]
 8003886:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800388a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800388c:	683b      	ldr	r3, [r7, #0]
 800388e:	695b      	ldr	r3, [r3, #20]
 8003890:	029b      	lsls	r3, r3, #10
 8003892:	697a      	ldr	r2, [r7, #20]
 8003894:	4313      	orrs	r3, r2
 8003896:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	697a      	ldr	r2, [r7, #20]
 800389c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	68fa      	ldr	r2, [r7, #12]
 80038a2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	685a      	ldr	r2, [r3, #4]
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	693a      	ldr	r2, [r7, #16]
 80038b0:	621a      	str	r2, [r3, #32]
}
 80038b2:	bf00      	nop
 80038b4:	371c      	adds	r7, #28
 80038b6:	46bd      	mov	sp, r7
 80038b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038bc:	4770      	bx	lr
 80038be:	bf00      	nop
 80038c0:	40012c00 	.word	0x40012c00
 80038c4:	40013400 	.word	0x40013400
 80038c8:	40014000 	.word	0x40014000
 80038cc:	40014400 	.word	0x40014400
 80038d0:	40014800 	.word	0x40014800
 80038d4:	40015000 	.word	0x40015000

080038d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80038d8:	b480      	push	{r7}
 80038da:	b087      	sub	sp, #28
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	6a1b      	ldr	r3, [r3, #32]
 80038e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6a1b      	ldr	r3, [r3, #32]
 80038ee:	f023 0201 	bic.w	r2, r3, #1
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80038fc:	693b      	ldr	r3, [r7, #16]
 80038fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	011b      	lsls	r3, r3, #4
 8003908:	693a      	ldr	r2, [r7, #16]
 800390a:	4313      	orrs	r3, r2
 800390c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f023 030a 	bic.w	r3, r3, #10
 8003914:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003916:	697a      	ldr	r2, [r7, #20]
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4313      	orrs	r3, r2
 800391c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	693a      	ldr	r2, [r7, #16]
 8003922:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003924:	68fb      	ldr	r3, [r7, #12]
 8003926:	697a      	ldr	r2, [r7, #20]
 8003928:	621a      	str	r2, [r3, #32]
}
 800392a:	bf00      	nop
 800392c:	371c      	adds	r7, #28
 800392e:	46bd      	mov	sp, r7
 8003930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003934:	4770      	bx	lr

08003936 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003936:	b480      	push	{r7}
 8003938:	b087      	sub	sp, #28
 800393a:	af00      	add	r7, sp, #0
 800393c:	60f8      	str	r0, [r7, #12]
 800393e:	60b9      	str	r1, [r7, #8]
 8003940:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	6a1b      	ldr	r3, [r3, #32]
 8003946:	f023 0210 	bic.w	r2, r3, #16
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	6a1b      	ldr	r3, [r3, #32]
 8003958:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800395a:	697b      	ldr	r3, [r7, #20]
 800395c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003960:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	031b      	lsls	r3, r3, #12
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	4313      	orrs	r3, r2
 800396a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800396c:	693b      	ldr	r3, [r7, #16]
 800396e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003972:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	011b      	lsls	r3, r3, #4
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	4313      	orrs	r3, r2
 800397c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	697a      	ldr	r2, [r7, #20]
 8003982:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003984:	68fb      	ldr	r3, [r7, #12]
 8003986:	693a      	ldr	r2, [r7, #16]
 8003988:	621a      	str	r2, [r3, #32]
}
 800398a:	bf00      	nop
 800398c:	371c      	adds	r7, #28
 800398e:	46bd      	mov	sp, r7
 8003990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003994:	4770      	bx	lr

08003996 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003996:	b480      	push	{r7}
 8003998:	b085      	sub	sp, #20
 800399a:	af00      	add	r7, sp, #0
 800399c:	6078      	str	r0, [r7, #4]
 800399e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039ac:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80039ae:	683a      	ldr	r2, [r7, #0]
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4313      	orrs	r3, r2
 80039b4:	f043 0307 	orr.w	r3, r3, #7
 80039b8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	68fa      	ldr	r2, [r7, #12]
 80039be:	609a      	str	r2, [r3, #8]
}
 80039c0:	bf00      	nop
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ca:	4770      	bx	lr

080039cc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b087      	sub	sp, #28
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	60f8      	str	r0, [r7, #12]
 80039d4:	60b9      	str	r1, [r7, #8]
 80039d6:	607a      	str	r2, [r7, #4]
 80039d8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80039da:	68fb      	ldr	r3, [r7, #12]
 80039dc:	689b      	ldr	r3, [r3, #8]
 80039de:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80039e6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80039e8:	683b      	ldr	r3, [r7, #0]
 80039ea:	021a      	lsls	r2, r3, #8
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	431a      	orrs	r2, r3
 80039f0:	68bb      	ldr	r3, [r7, #8]
 80039f2:	4313      	orrs	r3, r2
 80039f4:	697a      	ldr	r2, [r7, #20]
 80039f6:	4313      	orrs	r3, r2
 80039f8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	697a      	ldr	r2, [r7, #20]
 80039fe:	609a      	str	r2, [r3, #8]
}
 8003a00:	bf00      	nop
 8003a02:	371c      	adds	r7, #28
 8003a04:	46bd      	mov	sp, r7
 8003a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0a:	4770      	bx	lr

08003a0c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003a0c:	b480      	push	{r7}
 8003a0e:	b087      	sub	sp, #28
 8003a10:	af00      	add	r7, sp, #0
 8003a12:	60f8      	str	r0, [r7, #12]
 8003a14:	60b9      	str	r1, [r7, #8]
 8003a16:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	f003 031f 	and.w	r3, r3, #31
 8003a1e:	2201      	movs	r2, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	6a1a      	ldr	r2, [r3, #32]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	401a      	ands	r2, r3
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a1a      	ldr	r2, [r3, #32]
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	f003 031f 	and.w	r3, r3, #31
 8003a3e:	6879      	ldr	r1, [r7, #4]
 8003a40:	fa01 f303 	lsl.w	r3, r1, r3
 8003a44:	431a      	orrs	r2, r3
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	621a      	str	r2, [r3, #32]
}
 8003a4a:	bf00      	nop
 8003a4c:	371c      	adds	r7, #28
 8003a4e:	46bd      	mov	sp, r7
 8003a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a54:	4770      	bx	lr
	...

08003a58 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003a58:	b480      	push	{r7}
 8003a5a:	b085      	sub	sp, #20
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	6078      	str	r0, [r7, #4]
 8003a60:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a68:	2b01      	cmp	r3, #1
 8003a6a:	d101      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003a6c:	2302      	movs	r3, #2
 8003a6e:	e06d      	b.n	8003b4c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2202      	movs	r2, #2
 8003a7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	60bb      	str	r3, [r7, #8]

#if defined(TIM_CR2_MMS2)
  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a30      	ldr	r2, [pc, #192]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d009      	beq.n	8003aae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a2f      	ldr	r2, [pc, #188]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d004      	beq.n	8003aae <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	4a2d      	ldr	r2, [pc, #180]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d108      	bne.n	8003ac0 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003ab4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	685b      	ldr	r3, [r3, #4]
 8003aba:	68fa      	ldr	r2, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	60fb      	str	r3, [r7, #12]
  }
#endif /* TIM_CR2_MMS2 */

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ac6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003ac8:	683b      	ldr	r3, [r7, #0]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	68fa      	ldr	r2, [r7, #12]
 8003ace:	4313      	orrs	r3, r2
 8003ad0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	68fa      	ldr	r2, [r7, #12]
 8003ad8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	4a1e      	ldr	r2, [pc, #120]	; (8003b58 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003ae0:	4293      	cmp	r3, r2
 8003ae2:	d01d      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003aec:	d018      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	4a1c      	ldr	r2, [pc, #112]	; (8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003af4:	4293      	cmp	r3, r2
 8003af6:	d013      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	4a1a      	ldr	r2, [pc, #104]	; (8003b68 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003afe:	4293      	cmp	r3, r2
 8003b00:	d00e      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	4a15      	ldr	r2, [pc, #84]	; (8003b5c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b08:	4293      	cmp	r3, r2
 8003b0a:	d009      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	4a16      	ldr	r2, [pc, #88]	; (8003b6c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d004      	beq.n	8003b20 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	4a11      	ldr	r2, [pc, #68]	; (8003b60 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003b1c:	4293      	cmp	r3, r2
 8003b1e:	d10c      	bne.n	8003b3a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b20:	68bb      	ldr	r3, [r7, #8]
 8003b22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003b26:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b28:	683b      	ldr	r3, [r7, #0]
 8003b2a:	689b      	ldr	r3, [r3, #8]
 8003b2c:	68ba      	ldr	r2, [r7, #8]
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68ba      	ldr	r2, [r7, #8]
 8003b38:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	40012c00 	.word	0x40012c00
 8003b5c:	40013400 	.word	0x40013400
 8003b60:	40015000 	.word	0x40015000
 8003b64:	40000400 	.word	0x40000400
 8003b68:	40000800 	.word	0x40000800
 8003b6c:	40014000 	.word	0x40014000

08003b70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b083      	sub	sp, #12
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003b78:	bf00      	nop
 8003b7a:	370c      	adds	r7, #12
 8003b7c:	46bd      	mov	sp, r7
 8003b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b82:	4770      	bx	lr

08003b84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b083      	sub	sp, #12
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003b8c:	bf00      	nop
 8003b8e:	370c      	adds	r7, #12
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr

08003b98 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003b98:	b480      	push	{r7}
 8003b9a:	b083      	sub	sp, #12
 8003b9c:	af00      	add	r7, sp, #0
 8003b9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003ba0:	bf00      	nop
 8003ba2:	370c      	adds	r7, #12
 8003ba4:	46bd      	mov	sp, r7
 8003ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003baa:	4770      	bx	lr

08003bac <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d101      	bne.n	8003bbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003bba:	2301      	movs	r3, #1
 8003bbc:	e040      	b.n	8003c40 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d106      	bne.n	8003bd4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	2200      	movs	r2, #0
 8003bca:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f7fc fd26 	bl	8000620 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	2224      	movs	r2, #36	; 0x24
 8003bd8:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f022 0201 	bic.w	r2, r2, #1
 8003be8:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	f000 f82c 	bl	8003c48 <UART_SetConfig>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b01      	cmp	r3, #1
 8003bf4:	d101      	bne.n	8003bfa <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e022      	b.n	8003c40 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d002      	beq.n	8003c08 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f000 f9f4 	bl	8003ff0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	685a      	ldr	r2, [r3, #4]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003c16:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	689a      	ldr	r2, [r3, #8]
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003c26:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	681a      	ldr	r2, [r3, #0]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0201 	orr.w	r2, r2, #1
 8003c36:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003c38:	6878      	ldr	r0, [r7, #4]
 8003c3a:	f000 fa7b 	bl	8004134 <UART_CheckIdleState>
 8003c3e:	4603      	mov	r3, r0
}
 8003c40:	4618      	mov	r0, r3
 8003c42:	3708      	adds	r7, #8
 8003c44:	46bd      	mov	sp, r7
 8003c46:	bd80      	pop	{r7, pc}

08003c48 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003c48:	b580      	push	{r7, lr}
 8003c4a:	b088      	sub	sp, #32
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003c50:	2300      	movs	r3, #0
 8003c52:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	689a      	ldr	r2, [r3, #8]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	431a      	orrs	r2, r3
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	695b      	ldr	r3, [r3, #20]
 8003c62:	431a      	orrs	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	69db      	ldr	r3, [r3, #28]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681a      	ldr	r2, [r3, #0]
 8003c72:	4b92      	ldr	r3, [pc, #584]	; (8003ebc <UART_SetConfig+0x274>)
 8003c74:	4013      	ands	r3, r2
 8003c76:	687a      	ldr	r2, [r7, #4]
 8003c78:	6812      	ldr	r2, [r2, #0]
 8003c7a:	6979      	ldr	r1, [r7, #20]
 8003c7c:	430b      	orrs	r3, r1
 8003c7e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	685b      	ldr	r3, [r3, #4]
 8003c86:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68da      	ldr	r2, [r3, #12]
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	430a      	orrs	r2, r1
 8003c94:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	699b      	ldr	r3, [r3, #24]
 8003c9a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	6a1b      	ldr	r3, [r3, #32]
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	697a      	ldr	r2, [r7, #20]
 8003cb6:	430a      	orrs	r2, r1
 8003cb8:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	4a80      	ldr	r2, [pc, #512]	; (8003ec0 <UART_SetConfig+0x278>)
 8003cc0:	4293      	cmp	r3, r2
 8003cc2:	d120      	bne.n	8003d06 <UART_SetConfig+0xbe>
 8003cc4:	4b7f      	ldr	r3, [pc, #508]	; (8003ec4 <UART_SetConfig+0x27c>)
 8003cc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cc8:	f003 0303 	and.w	r3, r3, #3
 8003ccc:	2b03      	cmp	r3, #3
 8003cce:	d817      	bhi.n	8003d00 <UART_SetConfig+0xb8>
 8003cd0:	a201      	add	r2, pc, #4	; (adr r2, 8003cd8 <UART_SetConfig+0x90>)
 8003cd2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cd6:	bf00      	nop
 8003cd8:	08003ce9 	.word	0x08003ce9
 8003cdc:	08003cf5 	.word	0x08003cf5
 8003ce0:	08003cfb 	.word	0x08003cfb
 8003ce4:	08003cef 	.word	0x08003cef
 8003ce8:	2301      	movs	r3, #1
 8003cea:	77fb      	strb	r3, [r7, #31]
 8003cec:	e0b5      	b.n	8003e5a <UART_SetConfig+0x212>
 8003cee:	2302      	movs	r3, #2
 8003cf0:	77fb      	strb	r3, [r7, #31]
 8003cf2:	e0b2      	b.n	8003e5a <UART_SetConfig+0x212>
 8003cf4:	2304      	movs	r3, #4
 8003cf6:	77fb      	strb	r3, [r7, #31]
 8003cf8:	e0af      	b.n	8003e5a <UART_SetConfig+0x212>
 8003cfa:	2308      	movs	r3, #8
 8003cfc:	77fb      	strb	r3, [r7, #31]
 8003cfe:	e0ac      	b.n	8003e5a <UART_SetConfig+0x212>
 8003d00:	2310      	movs	r3, #16
 8003d02:	77fb      	strb	r3, [r7, #31]
 8003d04:	e0a9      	b.n	8003e5a <UART_SetConfig+0x212>
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	4a6f      	ldr	r2, [pc, #444]	; (8003ec8 <UART_SetConfig+0x280>)
 8003d0c:	4293      	cmp	r3, r2
 8003d0e:	d124      	bne.n	8003d5a <UART_SetConfig+0x112>
 8003d10:	4b6c      	ldr	r3, [pc, #432]	; (8003ec4 <UART_SetConfig+0x27c>)
 8003d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d14:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003d18:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d1c:	d011      	beq.n	8003d42 <UART_SetConfig+0xfa>
 8003d1e:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003d22:	d817      	bhi.n	8003d54 <UART_SetConfig+0x10c>
 8003d24:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d28:	d011      	beq.n	8003d4e <UART_SetConfig+0x106>
 8003d2a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003d2e:	d811      	bhi.n	8003d54 <UART_SetConfig+0x10c>
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d003      	beq.n	8003d3c <UART_SetConfig+0xf4>
 8003d34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d38:	d006      	beq.n	8003d48 <UART_SetConfig+0x100>
 8003d3a:	e00b      	b.n	8003d54 <UART_SetConfig+0x10c>
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	77fb      	strb	r3, [r7, #31]
 8003d40:	e08b      	b.n	8003e5a <UART_SetConfig+0x212>
 8003d42:	2302      	movs	r3, #2
 8003d44:	77fb      	strb	r3, [r7, #31]
 8003d46:	e088      	b.n	8003e5a <UART_SetConfig+0x212>
 8003d48:	2304      	movs	r3, #4
 8003d4a:	77fb      	strb	r3, [r7, #31]
 8003d4c:	e085      	b.n	8003e5a <UART_SetConfig+0x212>
 8003d4e:	2308      	movs	r3, #8
 8003d50:	77fb      	strb	r3, [r7, #31]
 8003d52:	e082      	b.n	8003e5a <UART_SetConfig+0x212>
 8003d54:	2310      	movs	r3, #16
 8003d56:	77fb      	strb	r3, [r7, #31]
 8003d58:	e07f      	b.n	8003e5a <UART_SetConfig+0x212>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	4a5b      	ldr	r2, [pc, #364]	; (8003ecc <UART_SetConfig+0x284>)
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d124      	bne.n	8003dae <UART_SetConfig+0x166>
 8003d64:	4b57      	ldr	r3, [pc, #348]	; (8003ec4 <UART_SetConfig+0x27c>)
 8003d66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d68:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 8003d6c:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d70:	d011      	beq.n	8003d96 <UART_SetConfig+0x14e>
 8003d72:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8003d76:	d817      	bhi.n	8003da8 <UART_SetConfig+0x160>
 8003d78:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d7c:	d011      	beq.n	8003da2 <UART_SetConfig+0x15a>
 8003d7e:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8003d82:	d811      	bhi.n	8003da8 <UART_SetConfig+0x160>
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d003      	beq.n	8003d90 <UART_SetConfig+0x148>
 8003d88:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8003d8c:	d006      	beq.n	8003d9c <UART_SetConfig+0x154>
 8003d8e:	e00b      	b.n	8003da8 <UART_SetConfig+0x160>
 8003d90:	2300      	movs	r3, #0
 8003d92:	77fb      	strb	r3, [r7, #31]
 8003d94:	e061      	b.n	8003e5a <UART_SetConfig+0x212>
 8003d96:	2302      	movs	r3, #2
 8003d98:	77fb      	strb	r3, [r7, #31]
 8003d9a:	e05e      	b.n	8003e5a <UART_SetConfig+0x212>
 8003d9c:	2304      	movs	r3, #4
 8003d9e:	77fb      	strb	r3, [r7, #31]
 8003da0:	e05b      	b.n	8003e5a <UART_SetConfig+0x212>
 8003da2:	2308      	movs	r3, #8
 8003da4:	77fb      	strb	r3, [r7, #31]
 8003da6:	e058      	b.n	8003e5a <UART_SetConfig+0x212>
 8003da8:	2310      	movs	r3, #16
 8003daa:	77fb      	strb	r3, [r7, #31]
 8003dac:	e055      	b.n	8003e5a <UART_SetConfig+0x212>
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a47      	ldr	r2, [pc, #284]	; (8003ed0 <UART_SetConfig+0x288>)
 8003db4:	4293      	cmp	r3, r2
 8003db6:	d124      	bne.n	8003e02 <UART_SetConfig+0x1ba>
 8003db8:	4b42      	ldr	r3, [pc, #264]	; (8003ec4 <UART_SetConfig+0x27c>)
 8003dba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dbc:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 8003dc0:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dc4:	d011      	beq.n	8003dea <UART_SetConfig+0x1a2>
 8003dc6:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8003dca:	d817      	bhi.n	8003dfc <UART_SetConfig+0x1b4>
 8003dcc:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd0:	d011      	beq.n	8003df6 <UART_SetConfig+0x1ae>
 8003dd2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8003dd6:	d811      	bhi.n	8003dfc <UART_SetConfig+0x1b4>
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d003      	beq.n	8003de4 <UART_SetConfig+0x19c>
 8003ddc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003de0:	d006      	beq.n	8003df0 <UART_SetConfig+0x1a8>
 8003de2:	e00b      	b.n	8003dfc <UART_SetConfig+0x1b4>
 8003de4:	2300      	movs	r3, #0
 8003de6:	77fb      	strb	r3, [r7, #31]
 8003de8:	e037      	b.n	8003e5a <UART_SetConfig+0x212>
 8003dea:	2302      	movs	r3, #2
 8003dec:	77fb      	strb	r3, [r7, #31]
 8003dee:	e034      	b.n	8003e5a <UART_SetConfig+0x212>
 8003df0:	2304      	movs	r3, #4
 8003df2:	77fb      	strb	r3, [r7, #31]
 8003df4:	e031      	b.n	8003e5a <UART_SetConfig+0x212>
 8003df6:	2308      	movs	r3, #8
 8003df8:	77fb      	strb	r3, [r7, #31]
 8003dfa:	e02e      	b.n	8003e5a <UART_SetConfig+0x212>
 8003dfc:	2310      	movs	r3, #16
 8003dfe:	77fb      	strb	r3, [r7, #31]
 8003e00:	e02b      	b.n	8003e5a <UART_SetConfig+0x212>
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	4a33      	ldr	r2, [pc, #204]	; (8003ed4 <UART_SetConfig+0x28c>)
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	d124      	bne.n	8003e56 <UART_SetConfig+0x20e>
 8003e0c:	4b2d      	ldr	r3, [pc, #180]	; (8003ec4 <UART_SetConfig+0x27c>)
 8003e0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e10:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8003e14:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e18:	d011      	beq.n	8003e3e <UART_SetConfig+0x1f6>
 8003e1a:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8003e1e:	d817      	bhi.n	8003e50 <UART_SetConfig+0x208>
 8003e20:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e24:	d011      	beq.n	8003e4a <UART_SetConfig+0x202>
 8003e26:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8003e2a:	d811      	bhi.n	8003e50 <UART_SetConfig+0x208>
 8003e2c:	2b00      	cmp	r3, #0
 8003e2e:	d003      	beq.n	8003e38 <UART_SetConfig+0x1f0>
 8003e30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003e34:	d006      	beq.n	8003e44 <UART_SetConfig+0x1fc>
 8003e36:	e00b      	b.n	8003e50 <UART_SetConfig+0x208>
 8003e38:	2300      	movs	r3, #0
 8003e3a:	77fb      	strb	r3, [r7, #31]
 8003e3c:	e00d      	b.n	8003e5a <UART_SetConfig+0x212>
 8003e3e:	2302      	movs	r3, #2
 8003e40:	77fb      	strb	r3, [r7, #31]
 8003e42:	e00a      	b.n	8003e5a <UART_SetConfig+0x212>
 8003e44:	2304      	movs	r3, #4
 8003e46:	77fb      	strb	r3, [r7, #31]
 8003e48:	e007      	b.n	8003e5a <UART_SetConfig+0x212>
 8003e4a:	2308      	movs	r3, #8
 8003e4c:	77fb      	strb	r3, [r7, #31]
 8003e4e:	e004      	b.n	8003e5a <UART_SetConfig+0x212>
 8003e50:	2310      	movs	r3, #16
 8003e52:	77fb      	strb	r3, [r7, #31]
 8003e54:	e001      	b.n	8003e5a <UART_SetConfig+0x212>
 8003e56:	2310      	movs	r3, #16
 8003e58:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	69db      	ldr	r3, [r3, #28]
 8003e5e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e62:	d16b      	bne.n	8003f3c <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8003e64:	7ffb      	ldrb	r3, [r7, #31]
 8003e66:	2b08      	cmp	r3, #8
 8003e68:	d838      	bhi.n	8003edc <UART_SetConfig+0x294>
 8003e6a:	a201      	add	r2, pc, #4	; (adr r2, 8003e70 <UART_SetConfig+0x228>)
 8003e6c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e70:	08003e95 	.word	0x08003e95
 8003e74:	08003e9d 	.word	0x08003e9d
 8003e78:	08003ea5 	.word	0x08003ea5
 8003e7c:	08003edd 	.word	0x08003edd
 8003e80:	08003eab 	.word	0x08003eab
 8003e84:	08003edd 	.word	0x08003edd
 8003e88:	08003edd 	.word	0x08003edd
 8003e8c:	08003edd 	.word	0x08003edd
 8003e90:	08003eb3 	.word	0x08003eb3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003e94:	f7fe f9be 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8003e98:	61b8      	str	r0, [r7, #24]
        break;
 8003e9a:	e024      	b.n	8003ee6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003e9c:	f7fe f9dc 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003ea0:	61b8      	str	r0, [r7, #24]
        break;
 8003ea2:	e020      	b.n	8003ee6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003ea4:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <UART_SetConfig+0x290>)
 8003ea6:	61bb      	str	r3, [r7, #24]
        break;
 8003ea8:	e01d      	b.n	8003ee6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003eaa:	f7fe f93d 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 8003eae:	61b8      	str	r0, [r7, #24]
        break;
 8003eb0:	e019      	b.n	8003ee6 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003eb2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003eb6:	61bb      	str	r3, [r7, #24]
        break;
 8003eb8:	e015      	b.n	8003ee6 <UART_SetConfig+0x29e>
 8003eba:	bf00      	nop
 8003ebc:	efff69f3 	.word	0xefff69f3
 8003ec0:	40013800 	.word	0x40013800
 8003ec4:	40021000 	.word	0x40021000
 8003ec8:	40004400 	.word	0x40004400
 8003ecc:	40004800 	.word	0x40004800
 8003ed0:	40004c00 	.word	0x40004c00
 8003ed4:	40005000 	.word	0x40005000
 8003ed8:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8003edc:	2300      	movs	r3, #0
 8003ede:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	77bb      	strb	r3, [r7, #30]
        break;
 8003ee4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d073      	beq.n	8003fd4 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8003eec:	69bb      	ldr	r3, [r7, #24]
 8003eee:	005a      	lsls	r2, r3, #1
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	085b      	lsrs	r3, r3, #1
 8003ef6:	441a      	add	r2, r3
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	685b      	ldr	r3, [r3, #4]
 8003efc:	fbb2 f3f3 	udiv	r3, r2, r3
 8003f00:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003f02:	693b      	ldr	r3, [r7, #16]
 8003f04:	2b0f      	cmp	r3, #15
 8003f06:	d916      	bls.n	8003f36 <UART_SetConfig+0x2ee>
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003f0e:	d212      	bcs.n	8003f36 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8003f10:	693b      	ldr	r3, [r7, #16]
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	f023 030f 	bic.w	r3, r3, #15
 8003f18:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003f1a:	693b      	ldr	r3, [r7, #16]
 8003f1c:	085b      	lsrs	r3, r3, #1
 8003f1e:	b29b      	uxth	r3, r3
 8003f20:	f003 0307 	and.w	r3, r3, #7
 8003f24:	b29a      	uxth	r2, r3
 8003f26:	89fb      	ldrh	r3, [r7, #14]
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	89fa      	ldrh	r2, [r7, #14]
 8003f32:	60da      	str	r2, [r3, #12]
 8003f34:	e04e      	b.n	8003fd4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003f36:	2301      	movs	r3, #1
 8003f38:	77bb      	strb	r3, [r7, #30]
 8003f3a:	e04b      	b.n	8003fd4 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8003f3c:	7ffb      	ldrb	r3, [r7, #31]
 8003f3e:	2b08      	cmp	r3, #8
 8003f40:	d827      	bhi.n	8003f92 <UART_SetConfig+0x34a>
 8003f42:	a201      	add	r2, pc, #4	; (adr r2, 8003f48 <UART_SetConfig+0x300>)
 8003f44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f48:	08003f6d 	.word	0x08003f6d
 8003f4c:	08003f75 	.word	0x08003f75
 8003f50:	08003f7d 	.word	0x08003f7d
 8003f54:	08003f93 	.word	0x08003f93
 8003f58:	08003f83 	.word	0x08003f83
 8003f5c:	08003f93 	.word	0x08003f93
 8003f60:	08003f93 	.word	0x08003f93
 8003f64:	08003f93 	.word	0x08003f93
 8003f68:	08003f8b 	.word	0x08003f8b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003f6c:	f7fe f952 	bl	8002214 <HAL_RCC_GetPCLK1Freq>
 8003f70:	61b8      	str	r0, [r7, #24]
        break;
 8003f72:	e013      	b.n	8003f9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003f74:	f7fe f970 	bl	8002258 <HAL_RCC_GetPCLK2Freq>
 8003f78:	61b8      	str	r0, [r7, #24]
        break;
 8003f7a:	e00f      	b.n	8003f9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003f7c:	4b1b      	ldr	r3, [pc, #108]	; (8003fec <UART_SetConfig+0x3a4>)
 8003f7e:	61bb      	str	r3, [r7, #24]
        break;
 8003f80:	e00c      	b.n	8003f9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003f82:	f7fe f8d1 	bl	8002128 <HAL_RCC_GetSysClockFreq>
 8003f86:	61b8      	str	r0, [r7, #24]
        break;
 8003f88:	e008      	b.n	8003f9c <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003f8a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003f8e:	61bb      	str	r3, [r7, #24]
        break;
 8003f90:	e004      	b.n	8003f9c <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8003f92:	2300      	movs	r3, #0
 8003f94:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003f96:	2301      	movs	r3, #1
 8003f98:	77bb      	strb	r3, [r7, #30]
        break;
 8003f9a:	bf00      	nop
    }

    if (pclk != 0U)
 8003f9c:	69bb      	ldr	r3, [r7, #24]
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d018      	beq.n	8003fd4 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	685b      	ldr	r3, [r3, #4]
 8003fa6:	085a      	lsrs	r2, r3, #1
 8003fa8:	69bb      	ldr	r3, [r7, #24]
 8003faa:	441a      	add	r2, r3
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003fb4:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	2b0f      	cmp	r3, #15
 8003fba:	d909      	bls.n	8003fd0 <UART_SetConfig+0x388>
 8003fbc:	693b      	ldr	r3, [r7, #16]
 8003fbe:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fc2:	d205      	bcs.n	8003fd0 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8003fc4:	693b      	ldr	r3, [r7, #16]
 8003fc6:	b29a      	uxth	r2, r3
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	60da      	str	r2, [r3, #12]
 8003fce:	e001      	b.n	8003fd4 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8003fd0:	2301      	movs	r3, #1
 8003fd2:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2200      	movs	r2, #0
 8003fd8:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 8003fe0:	7fbb      	ldrb	r3, [r7, #30]
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3720      	adds	r7, #32
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
 8003fea:	bf00      	nop
 8003fec:	007a1200 	.word	0x007a1200

08003ff0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	b083      	sub	sp, #12
 8003ff4:	af00      	add	r7, sp, #0
 8003ff6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ffc:	f003 0301 	and.w	r3, r3, #1
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00a      	beq.n	800401a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	685b      	ldr	r3, [r3, #4]
 800400a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	430a      	orrs	r2, r1
 8004018:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800401e:	f003 0302 	and.w	r3, r3, #2
 8004022:	2b00      	cmp	r3, #0
 8004024:	d00a      	beq.n	800403c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	430a      	orrs	r2, r1
 800403a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004040:	f003 0304 	and.w	r3, r3, #4
 8004044:	2b00      	cmp	r3, #0
 8004046:	d00a      	beq.n	800405e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	430a      	orrs	r2, r1
 800405c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004062:	f003 0308 	and.w	r3, r3, #8
 8004066:	2b00      	cmp	r3, #0
 8004068:	d00a      	beq.n	8004080 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	685b      	ldr	r3, [r3, #4]
 8004070:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d00a      	beq.n	80040a2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	430a      	orrs	r2, r1
 80040a0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a6:	f003 0320 	and.w	r3, r3, #32
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d00a      	beq.n	80040c4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	689b      	ldr	r3, [r3, #8]
 80040b4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d01a      	beq.n	8004106 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	685b      	ldr	r3, [r3, #4]
 80040d6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	430a      	orrs	r2, r1
 80040e4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80040ee:	d10a      	bne.n	8004106 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	430a      	orrs	r2, r1
 8004104:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800410e:	2b00      	cmp	r3, #0
 8004110:	d00a      	beq.n	8004128 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	685b      	ldr	r3, [r3, #4]
 8004118:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	430a      	orrs	r2, r1
 8004126:	605a      	str	r2, [r3, #4]
  }
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b098      	sub	sp, #96	; 0x60
 8004138:	af02      	add	r7, sp, #8
 800413a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2200      	movs	r2, #0
 8004140:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004144:	f7fc fb78 	bl	8000838 <HAL_GetTick>
 8004148:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 0308 	and.w	r3, r3, #8
 8004154:	2b08      	cmp	r3, #8
 8004156:	d12e      	bne.n	80041b6 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004158:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800415c:	9300      	str	r3, [sp, #0]
 800415e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004160:	2200      	movs	r2, #0
 8004162:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 f88c 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d021      	beq.n	80041b6 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800417a:	e853 3f00 	ldrex	r3, [r3]
 800417e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004182:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004186:	653b      	str	r3, [r7, #80]	; 0x50
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	461a      	mov	r2, r3
 800418e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004190:	647b      	str	r3, [r7, #68]	; 0x44
 8004192:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004194:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004196:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004198:	e841 2300 	strex	r3, r2, [r1]
 800419c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800419e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d1e6      	bne.n	8004172 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	2220      	movs	r2, #32
 80041a8:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	2200      	movs	r2, #0
 80041ae:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e062      	b.n	800427c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f003 0304 	and.w	r3, r3, #4
 80041c0:	2b04      	cmp	r3, #4
 80041c2:	d149      	bne.n	8004258 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80041c4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80041c8:	9300      	str	r3, [sp, #0]
 80041ca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80041cc:	2200      	movs	r2, #0
 80041ce:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80041d2:	6878      	ldr	r0, [r7, #4]
 80041d4:	f000 f856 	bl	8004284 <UART_WaitOnFlagUntilTimeout>
 80041d8:	4603      	mov	r3, r0
 80041da:	2b00      	cmp	r3, #0
 80041dc:	d03c      	beq.n	8004258 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80041e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e6:	e853 3f00 	ldrex	r3, [r3]
 80041ea:	623b      	str	r3, [r7, #32]
   return(result);
 80041ec:	6a3b      	ldr	r3, [r7, #32]
 80041ee:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80041f2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	461a      	mov	r2, r3
 80041fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80041fc:	633b      	str	r3, [r7, #48]	; 0x30
 80041fe:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004200:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004202:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004204:	e841 2300 	strex	r3, r2, [r1]
 8004208:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800420a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800420c:	2b00      	cmp	r3, #0
 800420e:	d1e6      	bne.n	80041de <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	3308      	adds	r3, #8
 8004216:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004218:	693b      	ldr	r3, [r7, #16]
 800421a:	e853 3f00 	ldrex	r3, [r3]
 800421e:	60fb      	str	r3, [r7, #12]
   return(result);
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	f023 0301 	bic.w	r3, r3, #1
 8004226:	64bb      	str	r3, [r7, #72]	; 0x48
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	3308      	adds	r3, #8
 800422e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004230:	61fa      	str	r2, [r7, #28]
 8004232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004234:	69b9      	ldr	r1, [r7, #24]
 8004236:	69fa      	ldr	r2, [r7, #28]
 8004238:	e841 2300 	strex	r3, r2, [r1]
 800423c:	617b      	str	r3, [r7, #20]
   return(result);
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d1e5      	bne.n	8004210 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	2220      	movs	r2, #32
 8004248:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      __HAL_UNLOCK(huart);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2200      	movs	r2, #0
 8004250:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004254:	2303      	movs	r3, #3
 8004256:	e011      	b.n	800427c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2220      	movs	r2, #32
 800425c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	2220      	movs	r2, #32
 8004262:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2200      	movs	r2, #0
 800426a:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	2200      	movs	r2, #0
 8004270:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	2200      	movs	r2, #0
 8004276:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800427a:	2300      	movs	r3, #0
}
 800427c:	4618      	mov	r0, r3
 800427e:	3758      	adds	r7, #88	; 0x58
 8004280:	46bd      	mov	sp, r7
 8004282:	bd80      	pop	{r7, pc}

08004284 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b084      	sub	sp, #16
 8004288:	af00      	add	r7, sp, #0
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	60b9      	str	r1, [r7, #8]
 800428e:	603b      	str	r3, [r7, #0]
 8004290:	4613      	mov	r3, r2
 8004292:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004294:	e049      	b.n	800432a <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	f1b3 3fff 	cmp.w	r3, #4294967295
 800429c:	d045      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800429e:	f7fc facb 	bl	8000838 <HAL_GetTick>
 80042a2:	4602      	mov	r2, r0
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	1ad3      	subs	r3, r2, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	429a      	cmp	r2, r3
 80042ac:	d302      	bcc.n	80042b4 <UART_WaitOnFlagUntilTimeout+0x30>
 80042ae:	69bb      	ldr	r3, [r7, #24]
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d101      	bne.n	80042b8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80042b4:	2303      	movs	r3, #3
 80042b6:	e048      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f003 0304 	and.w	r3, r3, #4
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d031      	beq.n	800432a <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	69db      	ldr	r3, [r3, #28]
 80042cc:	f003 0308 	and.w	r3, r3, #8
 80042d0:	2b08      	cmp	r3, #8
 80042d2:	d110      	bne.n	80042f6 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	2208      	movs	r2, #8
 80042da:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 80042dc:	68f8      	ldr	r0, [r7, #12]
 80042de:	f000 f838 	bl	8004352 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	2208      	movs	r2, #8
 80042e6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 80042ea:	68fb      	ldr	r3, [r7, #12]
 80042ec:	2200      	movs	r2, #0
 80042ee:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

           return HAL_ERROR;
 80042f2:	2301      	movs	r3, #1
 80042f4:	e029      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	69db      	ldr	r3, [r3, #28]
 80042fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004300:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004304:	d111      	bne.n	800432a <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800430e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004310:	68f8      	ldr	r0, [r7, #12]
 8004312:	f000 f81e 	bl	8004352 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	2220      	movs	r2, #32
 800431a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 8004326:	2303      	movs	r3, #3
 8004328:	e00f      	b.n	800434a <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800432a:	68fb      	ldr	r3, [r7, #12]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	69da      	ldr	r2, [r3, #28]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	4013      	ands	r3, r2
 8004334:	68ba      	ldr	r2, [r7, #8]
 8004336:	429a      	cmp	r2, r3
 8004338:	bf0c      	ite	eq
 800433a:	2301      	moveq	r3, #1
 800433c:	2300      	movne	r3, #0
 800433e:	b2db      	uxtb	r3, r3
 8004340:	461a      	mov	r2, r3
 8004342:	79fb      	ldrb	r3, [r7, #7]
 8004344:	429a      	cmp	r2, r3
 8004346:	d0a6      	beq.n	8004296 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004348:	2300      	movs	r3, #0
}
 800434a:	4618      	mov	r0, r3
 800434c:	3710      	adds	r7, #16
 800434e:	46bd      	mov	sp, r7
 8004350:	bd80      	pop	{r7, pc}

08004352 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004352:	b480      	push	{r7}
 8004354:	b095      	sub	sp, #84	; 0x54
 8004356:	af00      	add	r7, sp, #0
 8004358:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004360:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004362:	e853 3f00 	ldrex	r3, [r3]
 8004366:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004368:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800436a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800436e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	461a      	mov	r2, r3
 8004376:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004378:	643b      	str	r3, [r7, #64]	; 0x40
 800437a:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800437c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800437e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004380:	e841 2300 	strex	r3, r2, [r1]
 8004384:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004386:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004388:	2b00      	cmp	r3, #0
 800438a:	d1e6      	bne.n	800435a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	3308      	adds	r3, #8
 8004392:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004394:	6a3b      	ldr	r3, [r7, #32]
 8004396:	e853 3f00 	ldrex	r3, [r3]
 800439a:	61fb      	str	r3, [r7, #28]
   return(result);
 800439c:	69fb      	ldr	r3, [r7, #28]
 800439e:	f023 0301 	bic.w	r3, r3, #1
 80043a2:	64bb      	str	r3, [r7, #72]	; 0x48
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	3308      	adds	r3, #8
 80043aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80043ac:	62fa      	str	r2, [r7, #44]	; 0x2c
 80043ae:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80043b2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80043b4:	e841 2300 	strex	r3, r2, [r1]
 80043b8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d1e5      	bne.n	800438c <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80043c4:	2b01      	cmp	r3, #1
 80043c6:	d118      	bne.n	80043fa <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	e853 3f00 	ldrex	r3, [r3]
 80043d4:	60bb      	str	r3, [r7, #8]
   return(result);
 80043d6:	68bb      	ldr	r3, [r7, #8]
 80043d8:	f023 0310 	bic.w	r3, r3, #16
 80043dc:	647b      	str	r3, [r7, #68]	; 0x44
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	461a      	mov	r2, r3
 80043e4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80043e6:	61bb      	str	r3, [r7, #24]
 80043e8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ea:	6979      	ldr	r1, [r7, #20]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	e841 2300 	strex	r3, r2, [r1]
 80043f2:	613b      	str	r3, [r7, #16]
   return(result);
 80043f4:	693b      	ldr	r3, [r7, #16]
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d1e6      	bne.n	80043c8 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2220      	movs	r2, #32
 80043fe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	2200      	movs	r2, #0
 8004406:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	2200      	movs	r2, #0
 800440c:	669a      	str	r2, [r3, #104]	; 0x68
}
 800440e:	bf00      	nop
 8004410:	3754      	adds	r7, #84	; 0x54
 8004412:	46bd      	mov	sp, r7
 8004414:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004418:	4770      	bx	lr
	...

0800441c <__libc_init_array>:
 800441c:	b570      	push	{r4, r5, r6, lr}
 800441e:	4d0d      	ldr	r5, [pc, #52]	; (8004454 <__libc_init_array+0x38>)
 8004420:	4c0d      	ldr	r4, [pc, #52]	; (8004458 <__libc_init_array+0x3c>)
 8004422:	1b64      	subs	r4, r4, r5
 8004424:	10a4      	asrs	r4, r4, #2
 8004426:	2600      	movs	r6, #0
 8004428:	42a6      	cmp	r6, r4
 800442a:	d109      	bne.n	8004440 <__libc_init_array+0x24>
 800442c:	4d0b      	ldr	r5, [pc, #44]	; (800445c <__libc_init_array+0x40>)
 800442e:	4c0c      	ldr	r4, [pc, #48]	; (8004460 <__libc_init_array+0x44>)
 8004430:	f000 f820 	bl	8004474 <_init>
 8004434:	1b64      	subs	r4, r4, r5
 8004436:	10a4      	asrs	r4, r4, #2
 8004438:	2600      	movs	r6, #0
 800443a:	42a6      	cmp	r6, r4
 800443c:	d105      	bne.n	800444a <__libc_init_array+0x2e>
 800443e:	bd70      	pop	{r4, r5, r6, pc}
 8004440:	f855 3b04 	ldr.w	r3, [r5], #4
 8004444:	4798      	blx	r3
 8004446:	3601      	adds	r6, #1
 8004448:	e7ee      	b.n	8004428 <__libc_init_array+0xc>
 800444a:	f855 3b04 	ldr.w	r3, [r5], #4
 800444e:	4798      	blx	r3
 8004450:	3601      	adds	r6, #1
 8004452:	e7f2      	b.n	800443a <__libc_init_array+0x1e>
 8004454:	080044c4 	.word	0x080044c4
 8004458:	080044c4 	.word	0x080044c4
 800445c:	080044c4 	.word	0x080044c4
 8004460:	080044c8 	.word	0x080044c8

08004464 <memset>:
 8004464:	4402      	add	r2, r0
 8004466:	4603      	mov	r3, r0
 8004468:	4293      	cmp	r3, r2
 800446a:	d100      	bne.n	800446e <memset+0xa>
 800446c:	4770      	bx	lr
 800446e:	f803 1b01 	strb.w	r1, [r3], #1
 8004472:	e7f9      	b.n	8004468 <memset+0x4>

08004474 <_init>:
 8004474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004476:	bf00      	nop
 8004478:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800447a:	bc08      	pop	{r3}
 800447c:	469e      	mov	lr, r3
 800447e:	4770      	bx	lr

08004480 <_fini>:
 8004480:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004482:	bf00      	nop
 8004484:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004486:	bc08      	pop	{r3}
 8004488:	469e      	mov	lr, r3
 800448a:	4770      	bx	lr
